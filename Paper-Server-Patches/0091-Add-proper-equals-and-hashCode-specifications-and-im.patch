From 31b5a5ae8cd8750f3b710dad9ca9f89d8e0866f5 Mon Sep 17 00:00:00 2001
From: SotrForgotten <i@omc.hk>
Date: Mon, 11 Jul 2016 23:03:05 +0800
Subject: [PATCH] Add proper equals and hashCode specifications and
 implementations


diff --git a/src/main/java/org/bukkit/OfflinePlayer.java b/src/main/java/org/bukkit/OfflinePlayer.java
index dfaefba..f4090cb 100644
--- a/src/main/java/org/bukkit/OfflinePlayer.java
+++ b/src/main/java/org/bukkit/OfflinePlayer.java
@@ -117,6 +117,46 @@ public interface OfflinePlayer extends ServerOperator, AnimalTamer, Configuratio
      */
     public Location getBedSpawnLocation();
 	
+	// Paper start - define equals and hashCode for special case with Entity
+    /**
+     * Checks if this {@code OfflinePlayer} is equal to the other {@code Object}.
+     * <p>
+     *     This {@code OfflinePlayer} will be equal to the specified object if:
+     *     <ul>
+     *         <li>
+     *             The specified object is an instance of {@code OfflinePlayer}
+     *             and the uuids returned by {@link OfflinePlayer#getUniqueId()}
+     *             are equal.
+     *         </li>
+     *     </ul>
+     * </p>
+     *
+     * Sub-interfaces are allowed to change these specifications,
+     * but they must document the difference.
+     *
+     * @param other The specified object.
+     * @return {@code true} if this {@code OfflinePlayer} is equal to the specified
+     *     object, {@code false} otherwise.
+     *
+     * @see OfflinePlayer#getUniqueId()
+     */
+    @Override
+    boolean equals(final Object other);
+
+    /**
+     * The hash code for this class is defined as:
+     * <p>
+     *     {@code final int hash = (97 * 5) +
+     *     (getUniqueId() != null ? getUniqueId().hashCode() : 0);}
+     * </p>
+     * Sub-interfaces are allowed to change these specifications,
+     * but they must document the difference.
+     * @return The hash code for this object.
+     */
+    @Override
+    int hashCode();
+    // Paper end
+	
 	// Paper start
     /**
      * Return this player's profile
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
index baec450..0023a25 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
@@ -389,6 +389,8 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
 
     @Override
     public boolean equals(Object obj) {
+		// Paper start - comply with Entity.equals
+        /*
         if (obj == null) {
             return false;
         }
@@ -397,6 +399,13 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
         }
         final CraftEntity other = (CraftEntity) obj;
         return (this.getEntityId() == other.getEntityId());
+		*/
+        if (obj instanceof org.bukkit.entity.Entity) {
+            final org.bukkit.entity.Entity entity = (org.bukkit.entity.Entity) obj;
+            return entity.getEntityId() == getEntityId();
+        }
+        return false;
+        // Paper end
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index 0dc3053..90adf99 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -305,8 +305,8 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         boolean uuidEquals = this.getUniqueId().equals(other.getUniqueId());
         boolean idEquals = true;
 
-        if (other instanceof CraftPlayer) {
-            idEquals = this.getEntityId() == ((CraftPlayer) other).getEntityId();
+        if (other instanceof Player) { // Paper - change CraftPlayer to Player
+            idEquals = this.getEntityId() == ((Player) other).getEntityId(); // Paper - change CraftPlayer to Player
         }
 
         return uuidEquals && idEquals;
diff --git a/src/main/java/org/bukkit/entity/Entity.java b/src/main/java/org/bukkit/entity/Entity.java
new file mode 100644
index 0000000..7331e36
--- /dev/null
+++ b/src/main/java/org/bukkit/entity/Entity.java
@@ -0,0 +1,463 @@
+package org.bukkit.entity;
+
+import org.bukkit.Location;
+import org.bukkit.EntityEffect;
+import org.bukkit.Server;
+import org.bukkit.World;
+import org.bukkit.event.entity.EntityDamageEvent;
+import org.bukkit.metadata.Metadatable;
+import org.bukkit.util.Vector;
+
+import java.util.List;
+import java.util.UUID;
+import org.bukkit.command.CommandSender;
+import org.bukkit.event.player.PlayerTeleportEvent.TeleportCause;
+
+/**
+ * Represents a base entity in the world
+ */
+public interface Entity extends Metadatable, CommandSender {
+
+    /**
+     * Gets the entity's current position
+     *
+     * @return a new copy of Location containing the position of this entity
+     */
+    public Location getLocation();
+
+    /**
+     * Stores the entity's current position in the provided Location object.
+     * <p>
+     * If the provided Location is null this method does nothing and returns
+     * null.
+     *
+     * @param loc the location to copy into
+     * @return The Location object provided or null
+     */
+    public Location getLocation(Location loc);
+
+    /**
+     * Sets this entity's velocity
+     *
+     * @param velocity New velocity to travel with
+     */
+    public void setVelocity(Vector velocity);
+
+    /**
+     * Gets this entity's current velocity
+     *
+     * @return Current travelling velocity of this entity
+     */
+    public Vector getVelocity();
+
+    /**
+     * Returns true if the entity is supported by a block. This value is a
+     * state updated by the server and is not recalculated unless the entity
+     * moves.
+     *
+     * @return True if entity is on ground.
+     */
+    public boolean isOnGround();
+
+    /**
+     * Gets the current world this entity resides in
+     *
+     * @return World
+     */
+    public World getWorld();
+
+    /**
+     * Teleports this entity to the given location. If this entity is riding a
+     * vehicle, it will be dismounted prior to teleportation.
+     *
+     * @param location New location to teleport this entity to
+     * @return <code>true</code> if the teleport was successful
+     */
+    public boolean teleport(Location location);
+
+    /**
+     * Teleports this entity to the given location. If this entity is riding a
+     * vehicle, it will be dismounted prior to teleportation.
+     *
+     * @param location New location to teleport this entity to
+     * @param cause The cause of this teleportation
+     * @return <code>true</code> if the teleport was successful
+     */
+    public boolean teleport(Location location, TeleportCause cause);
+
+    /**
+     * Teleports this entity to the target Entity. If this entity is riding a
+     * vehicle, it will be dismounted prior to teleportation.
+     *
+     * @param destination Entity to teleport this entity to
+     * @return <code>true</code> if the teleport was successful
+     */
+    public boolean teleport(Entity destination);
+
+    /**
+     * Teleports this entity to the target Entity. If this entity is riding a
+     * vehicle, it will be dismounted prior to teleportation.
+     *
+     * @param destination Entity to teleport this entity to
+     * @param cause The cause of this teleportation
+     * @return <code>true</code> if the teleport was successful
+     */
+    public boolean teleport(Entity destination, TeleportCause cause);
+
+    /**
+     * Returns a list of entities within a bounding box centered around this
+     * entity
+     *
+     * @param x 1/2 the size of the box along x axis
+     * @param y 1/2 the size of the box along y axis
+     * @param z 1/2 the size of the box along z axis
+     * @return {@code List<Entity>} List of entities nearby
+     */
+    public List<org.bukkit.entity.Entity> getNearbyEntities(double x, double y, double z);
+
+    /**
+     * Returns a unique id for this entity
+     *
+     * @return Entity id
+     */
+    public int getEntityId();
+
+    /**
+     * Returns the entity's current fire ticks (ticks before the entity stops
+     * being on fire).
+     *
+     * @return int fireTicks
+     */
+    public int getFireTicks();
+
+    /**
+     * Returns the entity's maximum fire ticks.
+     *
+     * @return int maxFireTicks
+     */
+    public int getMaxFireTicks();
+
+    /**
+     * Sets the entity's current fire ticks (ticks before the entity stops
+     * being on fire).
+     *
+     * @param ticks Current ticks remaining
+     */
+    public void setFireTicks(int ticks);
+
+    /**
+     * Mark the entity's removal.
+     */
+    public void remove();
+
+    /**
+     * Returns true if this entity has been marked for removal.
+     *
+     * @return True if it is dead.
+     */
+    public boolean isDead();
+
+    /**
+     * Returns false if the entity has died or been despawned for some other
+     * reason.
+     *
+     * @return True if valid.
+     */
+    public boolean isValid();
+
+    /**
+     * Gets the {@link Server} that contains this Entity
+     *
+     * @return Server instance running this Entity
+     */
+    public Server getServer();
+
+    /**
+     * Gets the primary passenger of a vehicle. For vehicles that could have
+     * multiple passengers, this will only return the primary passenger.
+     *
+     * @return an entity
+     */
+    public abstract Entity getPassenger();
+
+    /**
+     * Set the passenger of a vehicle.
+     *
+     * @param passenger The new passenger.
+     * @return false if it could not be done for whatever reason
+     */
+    public abstract boolean setPassenger(Entity passenger);
+
+    /**
+     * Check if a vehicle has passengers.
+     *
+     * @return True if the vehicle has no passengers.
+     */
+    public abstract boolean isEmpty();
+
+    /**
+     * Eject any passenger.
+     *
+     * @return True if there was a passenger.
+     */
+    public abstract boolean eject();
+
+    /**
+     * Returns the distance this entity has fallen
+     *
+     * @return The distance.
+     */
+    public float getFallDistance();
+
+    /**
+     * Sets the fall distance for this entity
+     *
+     * @param distance The new distance.
+     */
+    public void setFallDistance(float distance);
+
+    /**
+     * Record the last {@link EntityDamageEvent} inflicted on this entity
+     *
+     * @param event a {@link EntityDamageEvent}
+     */
+    public void setLastDamageCause(EntityDamageEvent event);
+
+    /**
+     * Retrieve the last {@link EntityDamageEvent} inflicted on this entity.
+     * This event may have been cancelled.
+     *
+     * @return the last known {@link EntityDamageEvent} or null if hitherto
+     *     unharmed
+     */
+    public EntityDamageEvent getLastDamageCause();
+
+    /**
+     * Returns a unique and persistent id for this entity
+     *
+     * @return unique id
+     */
+    public UUID getUniqueId();
+
+    /**
+     * Gets the amount of ticks this entity has lived for.
+     * <p>
+     * This is the equivalent to "age" in entities.
+     *
+     * @return Age of entity
+     */
+    public int getTicksLived();
+
+    /**
+     * Sets the amount of ticks this entity has lived for.
+     * <p>
+     * This is the equivalent to "age" in entities. May not be less than one
+     * tick.
+     *
+     * @param value Age of entity
+     */
+    public void setTicksLived(int value);
+
+    /**
+     * Performs the specified {@link EntityEffect} for this entity.
+     * <p>
+     * This will be viewable to all players near the entity.
+     *
+     * @param type Effect to play.
+     */
+    public void playEffect(EntityEffect type);
+
+    /**
+     * Get the type of the entity.
+     *
+     * @return The entity type.
+     */
+    public EntityType getType();
+
+    /**
+     * Returns whether this entity is inside a vehicle.
+     *
+     * @return True if the entity is in a vehicle.
+     */
+    public boolean isInsideVehicle();
+
+    /**
+     * Leave the current vehicle. If the entity is currently in a vehicle (and
+     * is removed from it), true will be returned, otherwise false will be
+     * returned.
+     *
+     * @return True if the entity was in a vehicle.
+     */
+    public boolean leaveVehicle();
+
+    /**
+     * Get the vehicle that this player is inside. If there is no vehicle,
+     * null will be returned.
+     *
+     * @return The current vehicle.
+     */
+    public Entity getVehicle();
+
+    /**
+     * Sets a custom name on a mob. This name will be used in death messages
+     * and can be sent to the client as a nameplate over the mob.
+     * <p>
+     * Setting the name to null or an empty string will clear it.
+     * <p>
+     * This value has no effect on players, they will always use their real
+     * name.
+     *
+     * @param name the name to set
+     */
+    public void setCustomName(String name);
+
+    /**
+     * Gets the custom name on a mob. If there is no name this method will
+     * return null.
+     * <p>
+     * This value has no effect on players, they will always use their real
+     * name.
+     *
+     * @return name of the mob or null
+     */
+    public String getCustomName();
+
+    /**
+     * Sets whether or not to display the mob's custom name client side. The
+     * name will be displayed above the mob similarly to a player.
+     * <p>
+     * This value has no effect on players, they will always display their
+     * name.
+     *
+     * @param flag custom name or not
+     */
+    public void setCustomNameVisible(boolean flag);
+
+    /**
+     * Gets whether or not the mob's custom name is displayed client side.
+     * <p>
+     * This value has no effect on players, they will always display their
+     * name.
+     *
+     * @return if the custom name is displayed
+     */
+    public boolean isCustomNameVisible();
+
+    /**
+     * Sets whether the entity has a team colored (default: white) glow.
+     *
+     * @param flag if the entity is glowing
+     */
+    void setGlowing(boolean flag);
+
+    /**
+     * Gets whether the entity is glowing or not.
+     *
+     * @return whether the entity is glowing
+     */
+    boolean isGlowing();
+
+    /**
+     * Sets whether the entity is invulnerable or not.
+     * <p>
+     * When an entity is invulnerable it can only be damaged by players in
+     * creative mode.
+     *
+     * @param flag if the entity is invulnerable
+     */
+    public void setInvulnerable(boolean flag);
+
+    /**
+     * Gets whether the entity is invulnerable or not.
+     *
+     * @return whether the entity is
+     */
+    public boolean isInvulnerable();
+	
+	// Paper start - Add equals and hashCode specifications
+    /**
+     * Checks if this {@code Entity} is equal to the other {@code Object}.
+     * <p>
+     *     This {@code Entity} will be equal to the specified object if:
+     *     <ul>
+     *         <li>
+     *             The specified object is an instance of {@code Entity}.
+     *         </li>
+     *         <li>
+     *             The entity ids are equal, returned by
+     *             {@link Entity#getEntityId()}.
+     *         </li>
+     *     </ul>
+     * </p>
+     * Sub-interfaces are allowed to change these specifications, but they must
+     * document the difference.
+     * @param other The specified object.
+     * @return {@code true} if this {@code Entity} is equal to the specified
+     *     object, {@code false} otherwise.
+     *
+     * @see Entity#getEntityId()
+     */
+    @Override
+    boolean equals(final Object other);
+
+    /**
+     * Returns the hash code for this {@code Entity}.
+     * The entity's hash code is defined to be as:
+     * <pre>
+     *     <code>    int hash = 7;
+     *         hash = (hash * 29) + getEntityId();
+     *     </code>
+     * </pre>
+     * Sub-interfaces are allowed to change these specifications,
+     * but they must document the difference.
+     * @return The hash code for this entity.
+     */
+    @Override
+    int hashCode();
+    // Paper end
+
+    /**
+     * Gets whether the entity is silent or not.
+     *
+     * @return whether the entity is silent.
+     */
+    public boolean isSilent();
+
+    /**
+     * Sets whether the entity is silent or not.
+     * <p>
+     * When an entity is silent it will not produce any sound.
+     *
+     * @param flag if the entity is silent
+     */
+    public void setSilent(boolean flag);
+
+    // Spigot Start
+    public class Spigot
+    {
+
+        /**
+         * Returns whether this entity is invulnerable.
+         *         
+        * @return True if the entity is invulnerable.
+         */
+        public boolean isInvulnerable()
+        {
+            throw new UnsupportedOperationException( "Not supported yet." );
+        }
+    }
+
+    Spigot spigot();
+    // Spigot End
+
+    // Paper start
+    /**
+     * Gets the location where this entity originates from.
+     * <p>
+     * This value can be null if the entity hasn't yet been added to the world.
+     *
+     * @return Location where entity originates or null if not yet added
+     */
+    Location getOrigin();
+    // Paper end
+}
diff --git a/src/main/java/org/bukkit/entity/Player.java b/src/main/java/org/bukkit/entity/Player.java
index 9436cc7..76392a0 100644
--- a/src/main/java/org/bukkit/entity/Player.java
+++ b/src/main/java/org/bukkit/entity/Player.java
@@ -1489,6 +1489,55 @@ public interface Player extends HumanEntity, Conversable, CommandSender, Offline
      */
     boolean hasResourcePack();
     // Paper end
+	
+	// Paper start
+    /*
+     * For backwards compatibility with old CraftPlayer.equals
+     */
+    /**
+     * Checks if this {@code Player} is equal to the specified object.
+     * <p>
+     *     This method will check for equality based upon the instance of the
+     *     specified object:
+     *     <ol>
+     *         <li>
+     *             If the instance is an instance of {@code Player}:
+     *             <ul>
+     *                 <li>
+     *                     If the entity ids and entity uuids are equal.
+     *                 </li>
+     *             </ul>
+     *         </li>
+     *         <li>
+     *             If the instance is an instance of {@code OfflinePlayer}
+     *             and not an instance of {@code Player}:
+     *             <ul>
+     *                 <li>
+     *                     If the uuids are equal, returned by
+     *                     {@link OfflinePlayer#getUniqueId()}.
+     *                 </li>
+     *             </ul>
+     *         </li>
+     *         <li>
+     *             Any other case will return {@code false}.
+     *         </li>
+     *     </ol>
+     * </p>
+     *
+     * Sub-interfaces are allowed to change these specifications,
+     * but they must document the difference.
+     *
+     * @param other The specified object.
+     * @return {@code true} if this {@code Player} is equal to the specified
+     *     object, {@code false} otherwise.
+     *
+     * @see Entity#getEntityId()
+     * @see Entity#getUniqueId()
+     * @see OfflinePlayer#getUniqueId()
+     */
+    @Override
+    boolean equals(final Object other);
+    // Paper end
 
     // Spigot start
     public class Spigot extends Entity.Spigot
-- 
2.8.2.windows.1

