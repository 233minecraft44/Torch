From 26102662ceadf41c86316addce47ef8615b7ca90 Mon Sep 17 00:00:00 2001
From: SotrForgotten <i@omc.hk>
Date: Thu, 21 Jul 2016 04:35:19 +0800
Subject: [PATCH] Pool BlockPosition to reduce memory usage


diff --git a/src/main/java/net/minecraft/server/Chunk.java b/src/main/java/net/minecraft/server/Chunk.java
index dbbbcd2..5e63f97 100644
--- a/src/main/java/net/minecraft/server/Chunk.java
+++ b/src/main/java/net/minecraft/server/Chunk.java
@@ -311,13 +311,15 @@ public class Chunk {
     }
 
     private void a(int i, int j, int k, int l) {
-        if (l > k && this.world.areChunksLoaded(new BlockPosition(i, 0, j), 16)) {
+        final PooledMutableBlockPosition pos1 = PooledMutableBlockPosition.acquire(i, 0, j); // Spigot
+        if (l > k && this.world.areChunksLoaded(pos1, 16)) { // Spigot
             for (int i1 = k; i1 < l; ++i1) {
-                this.world.c(EnumSkyBlock.SKY, new BlockPosition(i, i1, j));
+                this.world.c(EnumSkyBlock.SKY, pos1.acquireBatch(i, i1, j)); // Spigot
             }
 
             this.s = true;
         }
+		pos1.release(); // Spigot
 
     }
 
@@ -1060,7 +1062,7 @@ public class Chunk {
             }
         }
         // CraftBukkit end
-        world.timings.syncChunkLoadPopulateNeighbors.startTiming(); // Paper
+        // world.timings.syncChunkLoadPopulateNeighbors.startTiming(); // Paper
         Chunk chunk = MCUtil.getLoadedChunkWithoutMarkingActive(ichunkprovider,this.locX, this.locZ - 1); // Paper
         Chunk chunk1 = MCUtil.getLoadedChunkWithoutMarkingActive(ichunkprovider,this.locX + 1, this.locZ); // Paper
         Chunk chunk2 = MCUtil.getLoadedChunkWithoutMarkingActive(ichunkprovider,this.locX, this.locZ + 1); // Paper
@@ -1085,7 +1087,7 @@ public class Chunk {
                 chunk4.a(chunkgenerator);
             }
         }
-        world.timings.syncChunkLoadPopulateNeighbors.stopTiming(); // Paper
+        // world.timings.syncChunkLoadPopulateNeighbors.stopTiming(); // Paper
 
     }
 
@@ -1376,7 +1378,8 @@ public class Chunk {
         int k = this.g();
         boolean flag = false;
         boolean flag1 = false;
-        BlockPosition.MutableBlockPosition blockposition_mutableblockposition = new BlockPosition.MutableBlockPosition((this.locX << 4) + i, 0, (this.locZ << 4) + j);
+        // BlockPosition.MutableBlockPosition blockposition_mutableblockposition = new BlockPosition.MutableBlockPosition((this.locX << 4) + i, 0, (this.locZ << 4) + j);
+		PooledMutableBlockPosition blockposition_mutableblockposition = PooledMutableBlockPosition.acquire((this.locX << 4) + i, 0, (this.locZ << 4) + j); // Spigot
 
         int l;
 
@@ -1391,6 +1394,7 @@ public class Chunk {
             if (!flag && i1 > 0) {
                 flag = true;
             } else if (flag && i1 == 0 && !this.world.w(blockposition_mutableblockposition)) {
+				blockposition_mutableblockposition.release(); // Spigot
                 return false;
             }
         }
@@ -1402,6 +1406,7 @@ public class Chunk {
             }
         }
 
+		blockposition_mutableblockposition.release(); // Spigot
         return true;
     }
 
diff --git a/src/main/java/net/minecraft/server/ChunkRegionLoader.java b/src/main/java/net/minecraft/server/ChunkRegionLoader.java
index 5ff443d..85424e3 100644
--- a/src/main/java/net/minecraft/server/ChunkRegionLoader.java
+++ b/src/main/java/net/minecraft/server/ChunkRegionLoader.java
@@ -377,7 +377,7 @@ public class ChunkRegionLoader implements IChunkLoader, IAsyncChunkSaver {
 
     public static void loadEntities(Chunk chunk, NBTTagCompound nbttagcompound, World world) { // Hose // Paper - make static
         // CraftBukkit end
-        world.timings.syncChunkLoadNBTTimer.startTiming(); // Spigot
+        // world.timings.syncChunkLoadNBTTimer.startTiming(); // Spigot
         NBTTagList nbttaglist1 = nbttagcompound.getList("Entities", 10);
 
         if (nbttaglist1 != null) {
@@ -421,7 +421,7 @@ public class ChunkRegionLoader implements IChunkLoader, IAsyncChunkSaver {
                 }
             }
         }
-        world.timings.syncChunkLoadNBTTimer.stopTiming(); // Spigot
+        // world.timings.syncChunkLoadNBTTimer.stopTiming(); // Spigot
 
         // return chunk; // CraftBukkit
     }
diff --git a/src/main/java/net/minecraft/server/Entity.java b/src/main/java/net/minecraft/server/Entity.java
index dd40ee9..e5f5763 100644
--- a/src/main/java/net/minecraft/server/Entity.java
+++ b/src/main/java/net/minecraft/server/Entity.java
@@ -50,7 +50,10 @@ import org.bukkit.event.entity.EntityPortalEvent;
 import org.bukkit.plugin.PluginManager;
 // CraftBukkit end
 
-public abstract class Entity implements ICommandListener {
+public abstract class Entity implements ICommandListener, org.spigotmc.OptimizedRemoveAllArrayList.Marker {
+    private boolean needsRemoved = false;
+    public boolean isToBeRemoved() { return needsRemoved; }
+    public void setRemovalState(boolean removalState) { needsRemoved = removalState; }
 
     // CraftBukkit start
     private static final int CURRENT_LEVEL = 2;
diff --git a/src/main/java/net/minecraft/server/PathfinderNormal.java b/src/main/java/net/minecraft/server/PathfinderNormal.java
index 87e9a7d..5c4ced5 100644
--- a/src/main/java/net/minecraft/server/PathfinderNormal.java
+++ b/src/main/java/net/minecraft/server/PathfinderNormal.java
@@ -27,12 +27,14 @@ public class PathfinderNormal extends PathfinderAbstract {
 
         if (this.e() && this.b.isInWater()) {
             i = (int) this.b.getBoundingBox().b;
-            BlockPosition.MutableBlockPosition blockposition_mutableblockposition = new BlockPosition.MutableBlockPosition(MathHelper.floor(this.b.locX), i, MathHelper.floor(this.b.locZ));
+			PooledMutableBlockPosition blockposition_mutableblockposition = PooledMutableBlockPosition.acquire(MathHelper.floor(this.b.locX), i, MathHelper.floor(this.b.locZ)); // Spigot
 
             for (Block block = this.a.getType(blockposition_mutableblockposition).getBlock(); block == Blocks.FLOWING_WATER || block == Blocks.WATER; block = this.a.getType(blockposition_mutableblockposition).getBlock()) {
                 ++i;
                 blockposition_mutableblockposition.c(MathHelper.floor(this.b.locX), i, MathHelper.floor(this.b.locZ));
             }
+			blockposition_mutableblockposition.release(); // Spigot
+			
         } else if (!this.b.onGround) {
             for (blockposition = new BlockPosition(this.b); (this.a.getType(blockposition).getMaterial() == Material.AIR || this.a.getType(blockposition).getBlock().b(this.a, blockposition)) && blockposition.getY() > 0; blockposition = blockposition.down()) {
                 ;
diff --git a/src/main/java/net/minecraft/server/PooledMutableBlockPosition.java b/src/main/java/net/minecraft/server/PooledMutableBlockPosition.java
new file mode 100644
index 0000000..bb59364
--- /dev/null
+++ b/src/main/java/net/minecraft/server/PooledMutableBlockPosition.java
@@ -0,0 +1,200 @@
+package net.minecraft.server;
+
+import org.apache.logging.log4j.Level;
+
+import java.util.ArrayDeque;
+import java.util.Deque;
+
+public final class PooledMutableBlockPosition extends BlockPosition {
+
+    private int x;
+    private int y;
+	private int acquiredTick;
+    private Deque<PooledMutableBlockPosition> related;
+    public boolean free = false;
+    public boolean batchShifts;
+
+    private static final int MAX_SIZE = 200;
+    private static final Deque<PooledMutableBlockPosition> pool = new ArrayDeque<PooledMutableBlockPosition>(MAX_SIZE);
+    private int z;
+	
+	public PooledMutableBlockPosition acquireBatch() {
+        return acquireBatch(0, 0, 0);
+    }
+
+    public PooledMutableBlockPosition acquireBatch(EnumDirection dir) {
+        return acquireBatch(dir, 1);
+    }
+
+    public PooledMutableBlockPosition acquireBatch(EnumDirection dir, int i) {
+        return acquireBatch(x + dir.getAdjacentX() * i, y + dir.getAdjacentY() * i, z + dir.getAdjacentZ() * i);
+    }
+
+    public PooledMutableBlockPosition acquireBatch(int x, int y, int z) {
+        PooledMutableBlockPosition pos = acquire(x, y, z);
+        if (related == null) {
+            related = new ArrayDeque();
+        }
+        pos.related = related; // So any batch additions to this child goes to parent, as child won't check this
+        related.add(pos);
+        return pos;
+    }
+
+    /**
+     * We can't safely return these to pool as we don't know if its stored
+     * @param dir
+     * @param i
+     * @return
+     */
+    @Override
+    public BlockPosition shift(EnumDirection dir, int i) {
+        if (batchShifts) {
+            return acquireBatch(dir, i);
+        }
+        PooledMutableBlockPosition position = acquire(x + dir.getAdjacentX() * i, y + dir.getAdjacentY() * i, z + dir.getAdjacentZ() * i);
+        position.free = true; // Prevent returning to pool
+        return position;
+    }
+
+    private PooledMutableBlockPosition(int x, int y, int z) {
+        super(0, 0, 0);
+        this.x = x;
+        this.y = y;
+        this.z = z;
+    }
+
+    public static PooledMutableBlockPosition acquire() {
+        return acquire(0, 0, 0);
+    }
+
+    public static PooledMutableBlockPosition acquire(Entity entity) {
+        return acquire(MathHelper.floor(entity.locX), MathHelper.floor(entity.locY), MathHelper.floor(entity.locZ));
+    }
+    public static PooledMutableBlockPosition acquire(BlockPosition pos) {
+        return acquire(pos.getX(), pos.getY(), pos.getZ());
+    }
+
+    public static synchronized PooledMutableBlockPosition acquire(int x, int y, int z) {
+        PooledMutableBlockPosition pos;
+        synchronized (pool) {
+            pos = pool.pollLast();
+        }
+        if (pos != null && pos.free) {
+            pos.free = false;
+            pos.acquiredTick = MinecraftServer.currentTick;
+            pos.set(x, y, z);
+        } else {
+            pos = new PooledMutableBlockPosition(x, y, z);
+            pos.acquiredTick = MinecraftServer.currentTick;
+        }
+
+        return pos;
+    }
+    private static void releaseToPool(PooledMutableBlockPosition pos) {
+        if (!pos.free) {
+            pos.free = true;
+            synchronized (pool) {
+                if (pool.size() < MAX_SIZE) {
+                    pool.add(pos);
+                }
+                final Deque<PooledMutableBlockPosition> rel = pos.related;
+                if (rel != null) {
+                    int allowed = MAX_SIZE - pool.size();
+                    int related = rel.size();
+                    for (int i = 0; i < allowed && i < related; i++) {
+                        final PooledMutableBlockPosition relpos = rel.poll();
+                        relpos.free = true;
+                        relpos.related = null;
+                        pool.add(relpos);
+                    }
+                    pos.related = null;
+                }
+            }
+        }
+    }
+
+    public void release() {
+        releaseToPool(this);
+    }
+
+    public int getXI() {
+        checkTick();
+        return this.x;
+    }
+
+    public int IgetYI() {
+        checkTick();
+        return this.y;
+    }
+
+    public int getZI() {
+        checkTick();
+        return this.z;
+    }
+	
+    private void checkTick() {
+        if (MinecraftServer.currentTick != acquiredTick) {
+            free = false;
+            new Throwable().printStackTrace();
+        }
+    }
+
+    /**
+     * This method is purely to provide compile time test incase c() doesn't get renamed
+     */
+    private static void testMutableBlockPositionMethod() {
+        BlockPosition.MutableBlockPosition test = (new BlockPosition.MutableBlockPosition()).c(0,0,0);
+    }
+    // PAIL: Rename BlockPosition.MutableBlockPosition to set - then we can remove this.
+    public PooledMutableBlockPosition c(int x, int y, int z) {
+        return set(x, y, z);
+    }
+    public PooledMutableBlockPosition set(int x, int y, int z) {
+        checkTick();
+        if (free) {
+            MinecraftServer.LOGGER.log(Level.ERROR, "PooledMutableBlockPosition modified after it was released.", new Throwable());
+            free = false;
+        }
+        this.x = x;
+        this.y = y;
+        this.z = z;
+        return this;
+    }
+
+    @Override
+    public int compareTo(BaseBlockPosition o) {
+        return y == o.getY() ? (z == o.getZ() ? x - o.getX() : z - o.getZ()) : y - o.getY();
+    }
+
+    public BlockPosition copy() {
+        return new BlockPosition(x, y, z);
+    }
+	
+	    public PooledMutableBlockPosition set(Entity entity) {
+        return set(MathHelper.floor(entity.locX), MathHelper.floor(entity.locY), MathHelper.floor(entity.locZ));
+    }
+
+    public PooledMutableBlockPosition adjust(int x, int y, int z) {
+        return set(this.x + x, this.y + y, this.z + z);
+    }
+
+    public PooledMutableBlockPosition adjustX(int x) {
+        return set(this.x + x, this.y, this.z);
+    }
+
+    public PooledMutableBlockPosition adjustY(int y) {
+        return set(this.x, this.y + y, this.z);
+    }
+    public PooledMutableBlockPosition adjustZ(int z) {
+        return set(this.x, this.y, this.z + z);
+    }
+
+    public PooledMutableBlockPosition adjust(EnumDirection enumdirection) {
+        return adjust(enumdirection, 1);
+    }
+
+    public PooledMutableBlockPosition adjust(EnumDirection dir, int i) {
+        return set(x + dir.getAdjacentX() * i, y + dir.getAdjacentY() * i, z + dir.getAdjacentZ() * i);
+    }
+
+}
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/server/TileEntity.java b/src/main/java/net/minecraft/server/TileEntity.java
index fc2afa0..79bcebe 100644
--- a/src/main/java/net/minecraft/server/TileEntity.java
+++ b/src/main/java/net/minecraft/server/TileEntity.java
@@ -10,7 +10,10 @@ import co.aikar.timings.MinecraftTimings; // Paper
 import co.aikar.timings.Timing; // Paper
 import org.bukkit.inventory.InventoryHolder; // CraftBukkit
 
-public abstract class TileEntity {
+public abstract class TileEntity implements org.spigotmc.OptimizedRemoveAllArrayList.Marker {
+    private boolean needsRemoved = false;
+    public boolean isToBeRemoved() { return needsRemoved; }
+    public void setRemovalState(boolean removalState) { needsRemoved = removalState; }
 
     public Timing tickTimer = MinecraftTimings.getTileEntityTimings(this); // Paper
     private static final Logger a = LogManager.getLogger();
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java b/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
index 7b5477d..199ee49 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
@@ -24,6 +24,8 @@ import org.bukkit.metadata.MetadataValue;
 import org.bukkit.plugin.Plugin;
 import org.bukkit.util.BlockVector;
 
+import net.minecraft.server.PooledMutableBlockPosition;
+
 public class CraftBlock implements Block {
     private final CraftChunk chunk;
     private final int x;
@@ -110,7 +112,10 @@ public class CraftBlock implements Block {
     }
 
     public byte getData() {
-        IBlockData blockData = chunk.getHandle().getBlockData(new BlockPosition(x, y, z));
+        final PooledMutableBlockPosition position = PooledMutableBlockPosition.acquire(this.x, this.y, this.z); // Spigot
+        IBlockData blockData = chunk.getHandle().getBlockData(position);
+        position.release();
+
         return (byte) blockData.getBlock().toLegacyData(blockData);
     }
 
@@ -174,15 +179,24 @@ public class CraftBlock implements Block {
     }
 
     public byte getLightLevel() {
-        return (byte) chunk.getHandle().getWorld().getLightLevel(new BlockPosition(this.x, this.y, this.z));
+        final PooledMutableBlockPosition blockposition = PooledMutableBlockPosition.acquire(this.x, this.y, this.z);
+        final byte lightLevel = (byte) chunk.getHandle().getWorld().getLightLevel(blockposition);
+        blockposition.release();
+        return lightLevel;
     }
 
     public byte getLightFromSky() {
-        return (byte) chunk.getHandle().getBrightness(EnumSkyBlock.SKY, new BlockPosition(this.x, this.y, this.z));
+        final PooledMutableBlockPosition blockposition = PooledMutableBlockPosition.acquire(this.x, this.y, this.z);
+        final byte brightness = (byte) chunk.getHandle().getBrightness(EnumSkyBlock.SKY, blockposition);
+        blockposition.release();
+        return brightness;
     }
 
     public byte getLightFromBlocks() {
-        return (byte) chunk.getHandle().getBrightness(EnumSkyBlock.BLOCK, new BlockPosition(this.x, this.y, this.z));
+       final PooledMutableBlockPosition blockposition = PooledMutableBlockPosition.acquire(this.x, this.y, this.z);
+        final byte brightness = (byte) chunk.getHandle().getBrightness(EnumSkyBlock.BLOCK, blockposition);
+        blockposition.release();
+        return brightness;
     }
 
 
@@ -385,14 +399,16 @@ public class CraftBlock implements Block {
 
     public int getBlockPower(BlockFace face) {
         int power = 0;
+		final PooledMutableBlockPosition position = PooledMutableBlockPosition.acquire(this.x, this.y, this.z); // Spigot
         BlockRedstoneWire wire = Blocks.REDSTONE_WIRE;
         net.minecraft.server.World world = chunk.getHandle().getWorld();
-        if ((face == BlockFace.DOWN || face == BlockFace.SELF) && world.isBlockFacePowered(new BlockPosition(x, y - 1, z), EnumDirection.DOWN)) power = wire.getPower(world, new BlockPosition(x, y - 1, z), power);
-        if ((face == BlockFace.UP || face == BlockFace.SELF) && world.isBlockFacePowered(new BlockPosition(x, y + 1, z), EnumDirection.UP)) power = wire.getPower(world, new BlockPosition(x, y + 1, z), power);
-        if ((face == BlockFace.EAST || face == BlockFace.SELF) && world.isBlockFacePowered(new BlockPosition(x + 1, y, z), EnumDirection.EAST)) power = wire.getPower(world, new BlockPosition(x + 1, y, z), power);
-        if ((face == BlockFace.WEST || face == BlockFace.SELF) && world.isBlockFacePowered(new BlockPosition(x - 1, y, z), EnumDirection.WEST)) power = wire.getPower(world, new BlockPosition(x - 1, y, z), power);
-        if ((face == BlockFace.NORTH || face == BlockFace.SELF) && world.isBlockFacePowered(new BlockPosition(x, y, z - 1), EnumDirection.NORTH)) power = wire.getPower(world, new BlockPosition(x, y, z - 1), power);
-        if ((face == BlockFace.SOUTH || face == BlockFace.SELF) && world.isBlockFacePowered(new BlockPosition(x, y, z + 1), EnumDirection.SOUTH)) power = wire.getPower(world, new BlockPosition(x, y, z - 1), power);
+        if ((face == BlockFace.DOWN || face == BlockFace.SELF) && world.isBlockFacePowered(position.set(x, y - 1, z), EnumDirection.DOWN)) power = wire.getPower(world, position.set(x, y - 1, z), power);
+        if ((face == BlockFace.UP || face == BlockFace.SELF) && world.isBlockFacePowered(position.set(x, y + 1, z), EnumDirection.UP)) power = wire.getPower(world, position.set(x, y + 1, z), power);
+        if ((face == BlockFace.EAST || face == BlockFace.SELF) && world.isBlockFacePowered(position.set(x + 1, y, z), EnumDirection.EAST)) power = wire.getPower(world, position.set(x + 1, y, z), power);
+        if ((face == BlockFace.WEST || face == BlockFace.SELF) && world.isBlockFacePowered(position.set(x - 1, y, z), EnumDirection.WEST)) power = wire.getPower(world, position.set(x - 1, y, z), power);
+        if ((face == BlockFace.NORTH || face == BlockFace.SELF) && world.isBlockFacePowered(position.set(x, y, z - 1), EnumDirection.NORTH)) power = wire.getPower(world, position.set(x, y, z - 1), power);
+        if ((face == BlockFace.SOUTH || face == BlockFace.SELF) && world.isBlockFacePowered(position.set(x, y, z + 1), EnumDirection.SOUTH)) power = wire.getPower(world, position.set(x, y, z - 1), power);
+        position.release(); // Spigot
         return power > 0 ? power : (face == BlockFace.SELF ? isBlockIndirectlyPowered() : isBlockFaceIndirectlyPowered(face)) ? 15 : 0;
     }
 
diff --git a/src/main/java/org/spigotmc/OptimizedRemoveAllArrayList.java b/src/main/java/org/spigotmc/OptimizedRemoveAllArrayList.java
new file mode 100644
index 0000000..c699e32
--- /dev/null
+++ b/src/main/java/org/spigotmc/OptimizedRemoveAllArrayList.java
@@ -0,0 +1,78 @@
+package org.spigotmc;
+
+
+import org.spigotmc.OptimizedRemoveAllArrayList.Marker;
+
+import java.util.ArrayList;
+import java.util.Collection;
+
+/**
+ * Improved algorithim for bulk removing entries from a list
+ *
+ * WARNING: This system only works on Identity Based lists,
+ * unlike traditional .removeAll() that operates on object equality.
+ */
+public class OptimizedRemoveAllArrayList <T extends Marker> extends ArrayList<T> {
+    public OptimizedRemoveAllArrayList(int initialCapacity) {
+        super(initialCapacity);
+    }
+
+    public OptimizedRemoveAllArrayList() {
+    }
+
+    public OptimizedRemoveAllArrayList(Collection<? extends T> c) {
+        super(c);
+    }
+
+    public OptimizedRemoveAllArrayList<T> clone() {
+        return new OptimizedRemoveAllArrayList<T>(this);
+    }
+
+    @Override
+    public boolean addAll(Collection<? extends T> c) {
+        for (T t : c) {
+            t.setRemovalState(false);
+        }
+        return super.addAll(c);
+    }
+
+    @Override
+    public boolean add(T t) {
+        t.setRemovalState(false);
+        return super.add(t);
+    }
+
+    @Override
+    public boolean remove(Object o) {
+        ((Marker) o).setRemovalState(true);
+        return true;
+    }
+
+    @Override
+    public boolean removeAll(Collection<?> c) {
+        if (c != null) {
+            for (Object o : c) {
+                ((Marker) o).setRemovalState(true);
+            }
+        }
+
+        int size = size();
+        int insertAt = 0;
+
+        for (int i = 0; i < size; i++) {
+            T el = get(i);
+
+            if (el != null && !el.isToBeRemoved()) {
+                set(insertAt++, el);
+            }
+        }
+        subList(insertAt, size).clear();
+
+        return size() != size;
+    }
+
+    public interface Marker {
+        boolean isToBeRemoved();
+        void setRemovalState(boolean removalState);
+    }
+}
\ No newline at end of file
-- 
2.8.2.windows.1

