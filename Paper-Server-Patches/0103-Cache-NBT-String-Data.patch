From e06cf47042f32710837139a965b7fda81395edaa Mon Sep 17 00:00:00 2001
From: SotrForgotten <i@omc.hk>
Date: Tue, 12 Jul 2016 04:57:10 +0800
Subject: [PATCH] Cache-NBT-String-Data


diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 148db07..bd89917 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -579,7 +579,7 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
     private boolean autoSaveOrdered = false;
 
     private void queueWorldsForAutoSave() {
-        if (!this.N) {
+        if (!this.M) {
             this.autoSaveWorlds.clear();
             for (int j = 0; j < this.worlds.size(); ++j) {
                 WorldServer worldserver = this.worlds.get(j);
diff --git a/src/main/java/net/minecraft/server/NBTBase.java b/src/main/java/net/minecraft/server/NBTBase.java
new file mode 100644
index 0000000..4f03bac
--- /dev/null
+++ b/src/main/java/net/minecraft/server/NBTBase.java
@@ -0,0 +1,119 @@
+package net.minecraft.server;
+
+import java.io.DataInput;
+import java.io.DataOutput;
+import java.io.IOException;
+
+public abstract class NBTBase {
+
+    public static final String[] a = new String[] { "END", "BYTE", "SHORT", "INT", "LONG", "FLOAT", "DOUBLE", "BYTE[]", "STRING", "LIST", "COMPOUND", "INT[]"};
+
+    abstract void write(DataOutput dataoutput) throws IOException;
+
+    abstract void load(DataInput datainput, int i, NBTReadLimiter nbtreadlimiter) throws IOException;
+
+    public abstract String toString();
+
+    public abstract byte getTypeId();
+	
+	// Migot start
+    protected static java.util.concurrent.ConcurrentHashMap<String, String> storedStrings = new java.util.concurrent.ConcurrentHashMap<String, String>(16, 0.75f, 2);
+
+    public static String getStoredString(String name, boolean store) {
+        String str = storedStrings.get(name);
+        if(str == null) {
+            if(store) {
+                storedStrings.put(name, name);
+            }
+            str = name;
+        }
+        return str;
+    }
+    // Migot end
+
+    protected NBTBase() {}
+
+    protected static NBTBase createTag(byte b0) {
+        switch (b0) {
+        case 0:
+            return new NBTTagEnd();
+
+        case 1:
+            return new NBTTagByte();
+
+        case 2:
+            return new NBTTagShort();
+
+        case 3:
+            return new NBTTagInt();
+
+        case 4:
+            return new NBTTagLong();
+
+        case 5:
+            return new NBTTagFloat();
+
+        case 6:
+            return new NBTTagDouble();
+
+        case 7:
+            return new NBTTagByteArray();
+
+        case 8:
+            return new NBTTagString();
+
+        case 9:
+            return new NBTTagList();
+
+        case 10:
+            return new NBTTagCompound();
+
+        case 11:
+            return new NBTTagIntArray();
+
+        default:
+            return null;
+        }
+    }
+
+    public abstract NBTBase clone();
+
+    public boolean isEmpty() {
+        return false;
+    }
+
+    public boolean equals(Object object) {
+        if (!(object instanceof NBTBase)) {
+            return false;
+        } else {
+            NBTBase nbtbase = (NBTBase) object;
+
+            return this.getTypeId() == nbtbase.getTypeId();
+        }
+    }
+
+    public int hashCode() {
+        return this.getTypeId();
+    }
+
+    protected String a_() {
+        return this.toString();
+    }
+
+    public abstract static class NBTNumber extends NBTBase {
+
+        protected NBTNumber() {}
+
+        public abstract long c();
+
+        public abstract int d();
+
+        public abstract short e();
+
+        public abstract byte f();
+
+        public abstract double g();
+
+        public abstract float h();
+    }
+}
diff --git a/src/main/java/net/minecraft/server/NBTTagCompound.java b/src/main/java/net/minecraft/server/NBTTagCompound.java
index 7fa49dd..1b2cd19 100644
--- a/src/main/java/net/minecraft/server/NBTTagCompound.java
+++ b/src/main/java/net/minecraft/server/NBTTagCompound.java
@@ -40,7 +40,7 @@ public class NBTTagCompound extends NBTBase {
             byte b0;
 
             while ((b0 = a(datainput, nbtreadlimiter)) != 0) {
-                String s = b(datainput, nbtreadlimiter);
+                String s = getStoredString(b(datainput, nbtreadlimiter), true); // Migot
 
                 nbtreadlimiter.a((long) (224 + 16 * s.length()));
                 NBTBase nbtbase = a(b0, s, datainput, i + 1, nbtreadlimiter);
diff --git a/src/main/java/net/minecraft/server/NBTTagString.java b/src/main/java/net/minecraft/server/NBTTagString.java
new file mode 100644
index 0000000..487a6d8
--- /dev/null
+++ b/src/main/java/net/minecraft/server/NBTTagString.java
@@ -0,0 +1,65 @@
+package net.minecraft.server;
+
+import java.io.DataInput;
+import java.io.DataOutput;
+import java.io.IOException;
+
+public class NBTTagString extends NBTBase {
+
+    private String data;
+
+    public NBTTagString() {
+        this.data = "";
+    }
+
+    public NBTTagString(String s) {
+        this.data = s;
+        if (s == null) {
+            throw new IllegalArgumentException("Empty string not allowed");
+        }
+    }
+
+    void write(DataOutput dataoutput) throws IOException {
+        dataoutput.writeUTF(this.data);
+    }
+
+    void load(DataInput datainput, int i, NBTReadLimiter nbtreadlimiter) throws IOException {
+        nbtreadlimiter.a(288L);
+        this.data = getStoredString(datainput.readUTF(), true); // Migot
+        nbtreadlimiter.a((long) (16 * this.data.length()));
+    }
+
+    public byte getTypeId() {
+        return (byte) 8;
+    }
+
+    public String toString() {
+        return "\"" + this.data.replace("\"", "\\\"") + "\"";
+    }
+
+    public NBTBase clone() {
+        return new NBTTagString(this.data);
+    }
+
+    public boolean isEmpty() {
+        return this.data.isEmpty();
+    }
+
+    public boolean equals(Object object) {
+        if (!super.equals(object)) {
+            return false;
+        } else {
+            NBTTagString nbttagstring = (NBTTagString) object;
+
+            return this.data == null && nbttagstring.data == null || this.data != null && this.data.equals(nbttagstring.data);
+        }
+    }
+
+    public int hashCode() {
+        return super.hashCode() ^ this.data.hashCode();
+    }
+
+    public String a_() {
+        return this.data;
+    }
+}
-- 
2.8.2.windows.1

