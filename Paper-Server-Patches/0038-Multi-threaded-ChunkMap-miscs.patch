From 0634b1a838e308168c515aa53a38009090d3f477 Mon Sep 17 00:00:00 2001
From: SotrForgotten <i@omc.hk>
Date: Sat, 2 Jul 2016 12:23:26 +0800
Subject: [PATCH] Multi threaded ChunkMap, miscs


diff --git a/src/main/java/net/minecraft/server/ChunkProviderServer.java b/src/main/java/net/minecraft/server/ChunkProviderServer.java
index 1eaf02d..e500764 100644
--- a/src/main/java/net/minecraft/server/ChunkProviderServer.java
+++ b/src/main/java/net/minecraft/server/ChunkProviderServer.java
@@ -15,6 +15,9 @@ import com.destroystokyo.paper.exception.ServerInternalException;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
+import com.google.common.collect.Maps;
+import java.util.Map;
+
 // CraftBukkit start
 import org.bukkit.Server;
 import org.bukkit.craftbukkit.chunkio.ChunkIOExecutor;
@@ -25,6 +28,7 @@ public class ChunkProviderServer implements IChunkProvider {
 
     private static final Logger a = LogManager.getLogger();
     public final it.unimi.dsi.fastutil.longs.LongSet unloadQueue = new it.unimi.dsi.fastutil.longs.LongArraySet(); // PAIL: private -> public // Paper
+	public final Map<Long, Chunk> chunks = Maps.newConcurrentMap(); // Hose
     public final ChunkGenerator chunkGenerator;
     private final IChunkLoader chunkLoader;
     // Paper start
diff --git a/src/main/java/net/minecraft/server/ChunkRegionLoader.java b/src/main/java/net/minecraft/server/ChunkRegionLoader.java
index 6e157f3..f743681 100644
--- a/src/main/java/net/minecraft/server/ChunkRegionLoader.java
+++ b/src/main/java/net/minecraft/server/ChunkRegionLoader.java
@@ -367,7 +367,7 @@ public class ChunkRegionLoader implements IChunkLoader, IAsyncChunkSaver {
         return chunk;
     }
 
-    public void loadEntities(Chunk chunk, NBTTagCompound nbttagcompound, World world) {
+    public synchronized void loadEntities(Chunk chunk, NBTTagCompound nbttagcompound, World world) { // Hose
         // CraftBukkit end
         world.timings.syncChunkLoadEntitiesTimer.startTiming(); // Spigot
         NBTTagList nbttaglist1 = nbttagcompound.getList("Entities", 10);
diff --git a/src/main/java/net/minecraft/server/EntityBoat.java b/src/main/java/net/minecraft/server/EntityBoat.java
index 67e86e0..4a140be 100644
--- a/src/main/java/net/minecraft/server/EntityBoat.java
+++ b/src/main/java/net/minecraft/server/EntityBoat.java
@@ -14,6 +14,8 @@ import org.bukkit.event.vehicle.VehicleEntityCollisionEvent;
 import org.bukkit.event.vehicle.VehicleMoveEvent;
 // CraftBukkit end
 
+import java.util.concurrent.RecursiveAction;
+
 public class EntityBoat extends Entity {
 
     private static final DataWatcherObject<Integer> a = DataWatcher.a(EntityBoat.class, DataWatcherRegistry.b);
@@ -152,7 +154,7 @@ public class EntityBoat extends Entity {
         }
     }
 
-    public void collide(Entity entity) {
+    public void collide_hose(Entity entity) { // Hose
         if (entity instanceof EntityBoat) {
             if (entity.getBoundingBox().b < this.getBoundingBox().e) {
                 // CraftBukkit start
@@ -176,8 +178,14 @@ public class EntityBoat extends Entity {
             // CraftBukkit end
             super.collide(entity);
         }
-
     }
+	
+	// Hose start
+	public void collide(Entity entity) {
+        collide c_task = new collide(entity);
+        c_task.fork();
+	}
+	// Hose end
 
     public Item j() {
         switch (EntityBoat.SyntheticClass_1.a[this.getType().ordinal()]) {
@@ -212,7 +220,8 @@ public class EntityBoat extends Entity {
 
     private Location lastLocation; // CraftBukkit
 
-    public void m() {
+	// Hose start
+    public void m_hose() {
         this.aH = this.aG;
         this.aG = this.t();
         if (this.aG != EntityBoat.EnumStatus.UNDER_WATER && this.aG != EntityBoat.EnumStatus.UNDER_FLOWING_WATER) {
@@ -297,8 +306,13 @@ public class EntityBoat extends Entity {
                 }
             }
         }
-
     }
+	
+	public void m() { // Hose - move
+        move m_task = new move();
+        m_task.fork();
+    }
+	// Hose end
 
     private void s() {
         if (this.au > 0 && !this.by()) {
@@ -837,4 +851,34 @@ public class EntityBoat extends Entity {
 
         private EnumStatus() {}
     }
+	
+	// Hose start
+	class collide extends RecursiveAction {
+        Entity entity;
+
+        public collide(Entity entity){
+            this.entity = entity;
+
+        }
+
+        @Override
+        protected void compute() {
+            collide_hose(entity);
+        }
+
+    }
+    
+    class move extends RecursiveAction {
+
+        public move(){
+
+        }
+
+        @Override
+        protected void compute() {
+            m_hose();
+        }
+    }
+	// Hose end
+	
 }
diff --git a/src/main/java/net/minecraft/server/EntityInsentient.java b/src/main/java/net/minecraft/server/EntityInsentient.java
index 7e54d0a..c9b0149 100644
--- a/src/main/java/net/minecraft/server/EntityInsentient.java
+++ b/src/main/java/net/minecraft/server/EntityInsentient.java
@@ -1289,7 +1289,7 @@ public abstract class EntityInsentient extends EntityLiving {
             try {
                 targetSelector.a();
             } catch (Exception ex) {
-                world.getServer().getLogger().log(java.util.logging.Level.WARNING, "Find no target.");
+                // world.getServer().getLogger().log(java.util.logging.Level.WARNING, "Find no target.");
             }
         }
     }
diff --git a/src/main/java/net/minecraft/server/MobSpawnerAbstract.java b/src/main/java/net/minecraft/server/MobSpawnerAbstract.java
index de6055a..2c3353a 100644
--- a/src/main/java/net/minecraft/server/MobSpawnerAbstract.java
+++ b/src/main/java/net/minecraft/server/MobSpawnerAbstract.java
@@ -1,13 +1,16 @@
 package net.minecraft.server;
 
 import com.google.common.collect.Lists;
+import com.google.common.collect.Queues;
+import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.List;
+import java.util.Queue;
 
 public abstract class MobSpawnerAbstract {
 
     public int spawnDelay = 20;
-    private final List<MobSpawnerData> mobs = Lists.newArrayList();
+    private final Queue<MobSpawnerData> mobs = Queues.newConcurrentLinkedQueue(); // Hose
     private MobSpawnerData spawnData = new MobSpawnerData();
     private double d;
     private double e;
@@ -136,7 +139,9 @@ public abstract class MobSpawnerAbstract {
         }
 
         if (!this.mobs.isEmpty()) {
-            this.a((MobSpawnerData) WeightedRandom.a(this.a().random, this.mobs));
+            // this.a((MobSpawnerData) WeightedRandom.a(this.a().random, this.mobs)); // Hose
+			List li = new ArrayList(this.mobs);
+            this.a((MobSpawnerData) WeightedRandom.a(this.a().random, li));
         }
 
         this.a(1);
diff --git a/src/main/java/net/minecraft/server/PlayerChunkMap.java b/src/main/java/net/minecraft/server/PlayerChunkMap.java
index d26352b..281f48e 100644
--- a/src/main/java/net/minecraft/server/PlayerChunkMap.java
+++ b/src/main/java/net/minecraft/server/PlayerChunkMap.java
@@ -23,6 +23,11 @@ import java.util.LinkedList;
 import org.spigotmc.AsyncCatcher;
 // TacoSpigot end
 
+import com.google.common.collect.Maps;
+import com.google.common.collect.Queues;
+import java.util.Map;
+import java.util.Queue;
+
 public class PlayerChunkMap {
 
     private static final Predicate<EntityPlayer> a = new Predicate() {
@@ -46,11 +51,14 @@ public class PlayerChunkMap {
     private final WorldServer world;
     // TacoSpigot start - catch async access
     private final List<EntityPlayer> managedPlayers = AsyncCatcher.catchAsyncUsage(Lists.newArrayList(), "list access PlayerChunkMap.managedPlayers");
-    private final Long2ObjectMap<PlayerChunk> e = new Long2ObjectOpenHashMap(4096);
-    private final Set<PlayerChunk> f = AsyncCatcher.catchAsyncUsage(Sets.newHashSet(), "set access PlayerChunkMap.f");
+    // private final Long2ObjectMap<PlayerChunk> e = new Long2ObjectOpenHashMap(4096);
+	private final Map<Long, PlayerChunk> e = Maps.newConcurrentMap();
+    // private final Set<PlayerChunk> f = AsyncCatcher.catchAsyncUsage(Sets.newHashSet(), "set access PlayerChunkMap.f");
+	private final Set<PlayerChunk> f = Sets.newConcurrentHashSet();
     private final List<PlayerChunk> g = AsyncCatcher.catchAsyncUsage(Lists.newLinkedList(), "list access PlayerChunkMap.g");
     private final List<PlayerChunk> h = AsyncCatcher.catchAsyncUsage(Lists.newLinkedList(), "list access PlayerChunkMap.h");
-    private final List<PlayerChunk> i = AsyncCatcher.catchAsyncUsage(Lists.newArrayList(), "list access PlayerChunkMap.i");
+    // private final List<PlayerChunk> i = AsyncCatcher.catchAsyncUsage(Lists.newArrayList(), "list access PlayerChunkMap.i");
+	private final Queue<PlayerChunk> i = Queues.newConcurrentLinkedQueue();
     // TacoSpigot end
     private int j;public int getViewDistance() { return j; } // Paper OBFHELPER
     private long k;
@@ -115,11 +123,21 @@ public class PlayerChunkMap {
             try (Timing ignored = world.timings.doChunkMapUpdate.startTiming()) { // Paper
             this.k = i;
 
+			// Hose start
+			Iterator it = this.i.iterator();
+            while (it.hasNext()) {
+                playerchunk = (PlayerChunk) it.next();
+                playerchunk.d();
+                playerchunk.c();
+            }
+			/*
             for (j = 0; j < this.i.size(); ++j) {
                 playerchunk = (PlayerChunk) this.i.get(j);
                 playerchunk.d();
                 playerchunk.c();
             }
+			*/
+			// Hose end
             } // Paper timing
         }
 
diff --git a/src/main/java/net/minecraft/server/PlayerList.java b/src/main/java/net/minecraft/server/PlayerList.java
index d342340..89756fa 100644
--- a/src/main/java/net/minecraft/server/PlayerList.java
+++ b/src/main/java/net/minecraft/server/PlayerList.java
@@ -50,7 +50,8 @@ public abstract class PlayerList {
     private static final SimpleDateFormat g = new SimpleDateFormat("yyyy-MM-dd \'at\' HH:mm:ss z");
     private final MinecraftServer server;
     public final List<EntityPlayer> players = new java.util.concurrent.CopyOnWriteArrayList(); // CraftBukkit - ArrayList -> CopyOnWriteArrayList: Iterator safety
-    private final Map<UUID, EntityPlayer> j = Maps.newHashMap();
+    // private final Map<UUID, EntityPlayer> j = Maps.newHashMap();
+	private final Map<UUID, EntityPlayer> j = Maps.newConcurrentMap();
     private final GameProfileBanList k;
     private final IpBanList l;
     private final OpList operators;
@@ -78,7 +79,8 @@ public abstract class PlayerList {
         this.l = new IpBanList(PlayerList.b);
         this.operators = new OpList(PlayerList.c);
         this.whitelist = new WhiteList(PlayerList.d);
-        this.o = Maps.newHashMap();
+        // this.o = Maps.newHashMap();
+		this.o = Maps.newConcurrentMap();
         this.server = minecraftserver;
         this.k.a(false);
         this.l.a(false);
diff --git a/src/main/java/net/minecraft/server/SpawnerCreature.java b/src/main/java/net/minecraft/server/SpawnerCreature.java
index a034db2..6b44f9c 100644
--- a/src/main/java/net/minecraft/server/SpawnerCreature.java
+++ b/src/main/java/net/minecraft/server/SpawnerCreature.java
@@ -11,10 +11,15 @@ import org.bukkit.craftbukkit.util.LongHashSet;
 import org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason;
 // CraftBukkit end
 
+import java.util.Set;
+import com.google.common.collect.Sets;
+import gnu.trove.iterator.TIntIterator;
+
 public final class SpawnerCreature {
 
     private static final int a = (int) Math.pow(17.0D, 2.0D);
-    private final LongHashSet b = new LongHashSet(); // CraftBukkit
+    // private final LongHashSet b = new LongHashSet(); // CraftBukkit
+	private final Set b = Sets.newConcurrentHashSet();
 
     public SpawnerCreature() {}
 
@@ -55,6 +60,7 @@ public final class SpawnerCreature {
             int i = 0;
             Iterator iterator = worldserver.players.iterator();
 
+			int l = 0; // Hose
             int j;
             int k;
 
@@ -64,7 +70,8 @@ public final class SpawnerCreature {
                 if (!entityhuman.affectsSpawning) continue; // Paper - affectsSpawning check
 
                 if (!entityhuman.isSpectator()) {
-                    int l = MathHelper.floor(entityhuman.locX / 16.0D);
+                    // int l = MathHelper.floor(entityhuman.locX / 16.0D);
+					l = MathHelper.floor(entityhuman.locX / 16.0D);
 
                     j = MathHelper.floor(entityhuman.locZ / 16.0D);
                     byte b0 = 8;
@@ -197,7 +204,48 @@ public final class SpawnerCreature {
                                                         entityinsentient.setPositionRotation((double) f, (double) k3, (double) f1, worldserver.random.nextFloat() * 360.0F, 0.0F);
                                                         if (entityinsentient.cG() && entityinsentient.canSpawn()) {
                                                             groupdataentity = entityinsentient.prepare(worldserver.D(new BlockPosition(entityinsentient)), groupdataentity);
-                                                            if (entityinsentient.canSpawn()) {
+                                                            // if (entityinsentient.canSpawn()) {
+															// Hose start - Limit spawn
+                                                            int entity_num = 0;
+                                                            TIntIterator tit;
+                                                            tit = worldserver.getChunkAt(l, j).entityCount.valueCollection().iterator();
+                                                            if (tit.hasNext()) {
+                                                                entity_num += tit.next();
+                                                            }
+                                                            tit = worldserver.getChunkAt(l+1, j).entityCount.valueCollection().iterator();
+                                                            if (tit.hasNext()) {
+                                                                entity_num += tit.next();
+                                                            }
+                                                            tit = worldserver.getChunkAt(l-1, j).entityCount.valueCollection().iterator();
+                                                            if (tit.hasNext()) {
+                                                                entity_num += tit.next();
+                                                            }
+                                                            tit = worldserver.getChunkAt(l, j-1).entityCount.valueCollection().iterator();
+                                                            if (tit.hasNext()) {
+                                                                entity_num += tit.next();
+                                                            }
+                                                            tit = worldserver.getChunkAt(l+1, j-1).entityCount.valueCollection().iterator();
+                                                            if (tit.hasNext()) {
+                                                                entity_num += tit.next();
+                                                            }
+                                                            tit = worldserver.getChunkAt(l-1, j-1).entityCount.valueCollection().iterator();
+                                                            if (tit.hasNext()) {
+                                                                entity_num += tit.next();
+                                                            }
+                                                            tit = worldserver.getChunkAt(l, j+1).entityCount.valueCollection().iterator();
+                                                            if (tit.hasNext()) {
+                                                                entity_num += tit.next();
+                                                            }
+                                                            tit = worldserver.getChunkAt(l+1, j+1).entityCount.valueCollection().iterator();
+                                                            if (tit.hasNext()) {
+                                                                entity_num += tit.next();
+                                                            }
+                                                            tit = worldserver.getChunkAt(l-1, j+1).entityCount.valueCollection().iterator();
+                                                            if (tit.hasNext()) {
+                                                                entity_num += tit.next();
+                                                            }
+                                                           if (entityinsentient.canSpawn() && entity_num < 500) {
+															// Hose end
                                                                 ++l2;
                                                                 worldserver.addEntity(entityinsentient, SpawnReason.NATURAL); // CraftBukkit - Added a reason for spawning this creature
                                                             } else {
diff --git a/src/main/java/net/minecraft/server/WorldMap.java b/src/main/java/net/minecraft/server/WorldMap.java
index e3e56f3..a0810fa 100644
--- a/src/main/java/net/minecraft/server/WorldMap.java
+++ b/src/main/java/net/minecraft/server/WorldMap.java
@@ -25,7 +25,8 @@ public class WorldMap extends PersistentBase {
     public byte scale;
     public byte[] colors = new byte[16384];
     public List<WorldMap.WorldMapHumanTracker> h = Lists.newArrayList();
-    public Map<EntityHuman, WorldMap.WorldMapHumanTracker> j = Maps.newHashMap(); // Spigot
+    // public Map<EntityHuman, WorldMap.WorldMapHumanTracker> j = Maps.newHashMap(); // Spigot
+	public final Map<EntityHuman, WorldMap.WorldMapHumanTracker> j = Maps.newConcurrentMap();
     public Map<UUID, MapIcon> decorations = Maps.newLinkedHashMap(); // Spigot
     private org.bukkit.craftbukkit.map.RenderData vanillaRender = new org.bukkit.craftbukkit.map.RenderData(); // Paper
 
diff --git a/src/main/java/net/minecraft/server/WorldServer.java b/src/main/java/net/minecraft/server/WorldServer.java
index ab376ca..c5cecc9 100644
--- a/src/main/java/net/minecraft/server/WorldServer.java
+++ b/src/main/java/net/minecraft/server/WorldServer.java
@@ -19,6 +19,10 @@ import javax.annotation.Nullable;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
+import com.google.common.collect.Queues;
+import java.util.Queue;
+import java.util.concurrent.RecursiveAction;
+
 // CraftBukkit start
 import java.util.logging.Level;
 
@@ -48,7 +52,8 @@ public class WorldServer extends World implements IAsyncTaskHandler {
     protected final VillageSiege siegeManager = new VillageSiege(this);
     private WorldServer.BlockActionDataList[] S = new WorldServer.BlockActionDataList[] { new WorldServer.BlockActionDataList(null), new WorldServer.BlockActionDataList(null)};
     private int T;
-    private List<NextTickListEntry> U = Lists.newArrayList();
+    // private List<NextTickListEntry> U = Lists.newArrayList();
+	private final Queue<NextTickListEntry> U = Queues.newConcurrentLinkedQueue();
 
     // CraftBukkit start
     public final int dimension;
@@ -401,6 +406,10 @@ public class WorldServer extends World implements IAsyncTaskHandler {
         this.methodProfiler.b();
     }
 
+	// Hose start
+	light_tick l_task;
+    chunk_tick c_tick;
+	// Hose end
     protected void j() {
         this.i();
         if (this.worldData.getType() == WorldType.DEBUG_ALL_BLOCK_STATES) {
@@ -424,9 +433,13 @@ public class WorldServer extends World implements IAsyncTaskHandler {
                 int k = chunk.locZ * 16;
 
                 this.methodProfiler.c("checkNextLight");
-                chunk.n();
+                // chunk.n();
+				l_task = new light_tick(chunk);
+                l_task.fork();
                 this.methodProfiler.c("tickChunk");
-                chunk.b(false);
+                // chunk.b(false);
+				c_tick = new chunk_tick(chunk);
+                c_tick.fork();
                 if ( !chunk.areNeighborsLoaded( 1 ) ) continue; // Spigot
                 this.methodProfiler.c("thunder");
                 int l;
@@ -721,7 +734,11 @@ public class WorldServer extends World implements IAsyncTaskHandler {
                 NextTickListEntry nextticklistentry;
 
                 for (int j = 0; j < i; ++j) {
-                    nextticklistentry = (NextTickListEntry) this.nextTickList.first();
+                    try {
+                        nextticklistentry = (NextTickListEntry) this.nextTickList.first();
+                    } catch (Exception ex) {
+                        continue;
+                    }
                     if (!flag && nextticklistentry.b > this.worldData.getTime()) {
                         break;
                     }
@@ -1143,13 +1160,15 @@ public class WorldServer extends World implements IAsyncTaskHandler {
 
     protected void b(Entity entity) {
         super.b(entity);
-        this.entitiesById.a(entity.getId(), entity);
+        // this.entitiesById.a(entity.getId(), entity);
+		this.entitiesById.put(entity.getId(), entity);
         this.entitiesByUUID.put(entity.getUniqueID(), entity);
         Entity[] aentity = entity.aR();
 
         if (aentity != null) {
             for (int i = 0; i < aentity.length; ++i) {
-                this.entitiesById.a(aentity[i].getId(), aentity[i]);
+                // this.entitiesById.a(aentity[i].getId(), aentity[i]);
+				this.entitiesById.put(aentity[i].getId(), aentity[i]);
             }
         }
 
@@ -1157,13 +1176,15 @@ public class WorldServer extends World implements IAsyncTaskHandler {
 
     protected void c(Entity entity) {
         super.c(entity);
-        this.entitiesById.d(entity.getId());
+        // this.entitiesById.d(entity.getId());
+		this.entitiesById.remove(entity.getId());
         this.entitiesByUUID.remove(entity.getUniqueID());
         Entity[] aentity = entity.aR();
 
         if (aentity != null) {
             for (int i = 0; i < aentity.length; ++i) {
-                this.entitiesById.d(aentity[i].getId());
+                // this.entitiesById.d(aentity[i].getId());
+				this.entitiesById.remove(aentity[i].getId());
             }
         }
 
@@ -1402,4 +1423,58 @@ public class WorldServer extends World implements IAsyncTaskHandler {
             this();
         }
     }
+	
+	// Hose start
+	class block_tick extends RecursiveAction {
+        WorldServer worldserver;
+        int i2, j, k2, j2, k;
+        ChunkSection chunksection;
+        IBlockData iblockdata;
+        
+        block_tick(WorldServer worldserver, int i2, int j, int k2, int j2, int k, ChunkSection chunksection, IBlockData iblockdata) {
+            this.worldserver = worldserver;
+            this.i2 = i2;
+            this.j = j;
+            this.k2 = k2;
+            this.j2 = j2;
+            this.k = k;
+            this.chunksection = chunksection;
+            this.iblockdata = iblockdata;
+        }
+        
+        @Override
+        protected void compute() {
+            iblockdata.getBlock().a((World) worldserver, new BlockPosition(i2 + j, k2 + chunksection.getYPosition(), j2 + k), iblockdata, worldserver.random);
+        }
+                 
+    }
+    
+    class light_tick extends RecursiveAction {
+        Chunk chunk;
+        
+        light_tick(Chunk chunk) {
+            this.chunk = chunk;
+        }
+        
+        @Override
+        protected void compute() {
+            chunk.n();
+        }
+                 
+    }
+    
+    class chunk_tick extends RecursiveAction {
+        Chunk chunk;
+        
+        chunk_tick(Chunk chunk) {
+            this.chunk = chunk;
+        }
+        
+        @Override
+        protected void compute() {
+            chunk.b(false);
+        }
+                 
+    }
+	// Hose end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/util/HashTreeSet.java b/src/main/java/org/bukkit/craftbukkit/util/HashTreeSet.java
index 80a5c29..d338740 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/HashTreeSet.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/HashTreeSet.java
@@ -6,10 +6,23 @@ import java.util.Iterator;
 import java.util.Set;
 import java.util.TreeSet;
 
+import com.google.common.collect.Sets;
+import java.util.AbstractSet;
+import java.util.ArrayList;
+import java.util.Comparator;
+import java.util.SortedSet;
+import java.util.concurrent.ConcurrentSkipListSet;
+
 public class HashTreeSet<V> implements Set<V> {
 
+	/*
     private HashSet<V> hash = new HashSet<V>();
     private TreeSet<V> tree = new TreeSet<V>();
+	*/
+	
+	private Set<V> hash = Sets.newConcurrentHashSet();
+    private TreeSet<V> tset = new TreeSet<V>();
+    private ConcurrentSkipListSet<V> tree = new ConcurrentSkipListSet<V>(new IterateOnlySortedSet<V>(tset));
 
     public HashTreeSet() {
 
@@ -113,5 +126,57 @@ public class HashTreeSet<V> implements Set<V> {
     public V first() {
         return tree.first();
     }
+	
+	static class IterateOnlySortedSet<E> extends AbstractSet<E> implements SortedSet<E> {
+        private final ArrayList<E> elements;
+        private final Comparator<? super E> comparator;
+
+        public IterateOnlySortedSet(SortedSet<E> source) {
+          elements = new ArrayList<>(source);
+          comparator = source.comparator();
+        }
+
+        @Override
+        public Iterator<E> iterator() {
+          return elements.iterator();
+        }
+
+        @Override
+        public int size() {
+          return elements.size();
+        }
+
+        @Override
+        public Comparator<? super E> comparator() {
+          return comparator;
+        }
+
+        // remaining methods simply throw UnsupportedOperationException
+
+        @Override
+        public SortedSet<E> subSet(E fromElement, E toElement) {
+            throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
+        }
+
+        @Override
+        public SortedSet<E> headSet(E toElement) {
+            throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
+        }
+
+        @Override
+        public SortedSet<E> tailSet(E fromElement) {
+            throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
+        }
+
+        @Override
+        public E first() {
+            throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
+        }
+
+        @Override
+        public E last() {
+            throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
+        }
+    }
 
 }
-- 
2.8.2.windows.1

