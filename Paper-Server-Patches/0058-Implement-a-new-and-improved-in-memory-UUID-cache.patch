From 308390ba0dd145b08c9b810f1c4c9e9d9ec251d2 Mon Sep 17 00:00:00 2001
From: SotrForgotten <i@omc.hk>
Date: Sat, 2 Jul 2016 22:06:59 +0800
Subject: [PATCH] Implement a new and improved in-memory UUID cache


diff --git a/src/main/java/com/destroystokyo/paper/profile/CachingProfileLookup.java b/src/main/java/com/destroystokyo/paper/profile/CachingProfileLookup.java
new file mode 100644
index 0000000..ac14434
--- /dev/null
+++ b/src/main/java/com/destroystokyo/paper/profile/CachingProfileLookup.java
@@ -0,0 +1,24 @@
+package com.destroystokyo.paper.profile;
+
+import com.google.common.collect.ImmutableCollection;
+
+import java.util.UUID;
+
+public interface CachingProfileLookup extends ProfileLookup {
+
+    ImmutableCollection<AccountProfile> getCachedProfiles();
+
+    AccountProfile getIfCached(UUID id);
+
+    AccountProfile getIfCached(String name);
+
+    void cache(AccountProfile profile);
+
+    void clearProfile(AccountProfile profile);
+
+    AccountProfile refresh(UUID id);
+
+    AccountProfile refresh(String name);
+
+    ProfileProperties refreshProperties(AccountProfile profile);
+}
\ No newline at end of file
diff --git a/src/main/java/com/destroystokyo/paper/profile/EventProfileLookup.java b/src/main/java/com/destroystokyo/paper/profile/EventProfileLookup.java
index 4cb486d..d942511 100644
--- a/src/main/java/com/destroystokyo/paper/profile/EventProfileLookup.java
+++ b/src/main/java/com/destroystokyo/paper/profile/EventProfileLookup.java
@@ -28,12 +28,12 @@ package com.destroystokyo.paper.profile;
          Bukkit.getPluginManager().callEvent(preResolveEvent);
          AsyncProfileResolveEvent resolveEvent;
          if (preResolveEvent.isResolved()) { // Plugin set result
-             resolveEvent = new AsyncProfileResolveEvent(LookupCause.NAME_LOOKUP, preResolveEvent.getResult(), false);
+             resolveEvent = new AsyncProfileResolveEvent(LookupCause.NAME, preResolveEvent.getResult(), false);
          } else {
              // Lookup result from mojang
              AccountProfile profile = delegate.lookup(name);
              if (profile == null) return null; // Not found
-             resolveEvent = new AsyncProfileResolveEvent(LookupCause.NAME_LOOKUP, profile, true);
+             resolveEvent = new AsyncProfileResolveEvent(LookupCause.NAME, profile, true);
          }
          Bukkit.getPluginManager().callEvent(resolveEvent);
          return resolveEvent.getResult();
@@ -46,12 +46,12 @@ package com.destroystokyo.paper.profile;
          Bukkit.getPluginManager().callEvent(preResolveEvent);
          AsyncProfileResolveEvent resolveEvent;
          if (preResolveEvent.isResolved()) { // Plugin set result
-             resolveEvent = new AsyncProfileResolveEvent(LookupCause.UUID_LOOKUP, preResolveEvent.getResult(), false);
+             resolveEvent = new AsyncProfileResolveEvent(LookupCause.UUID, preResolveEvent.getResult(), false);
          } else {
              // Lookup result from mojang
              AccountProfile profile = delegate.lookup(id);
              if (profile == null) return null; // Not found
-             resolveEvent = new AsyncProfileResolveEvent(LookupCause.UUID_LOOKUP, profile, true);
+             resolveEvent = new AsyncProfileResolveEvent(LookupCause.UUID, profile, true);
          }
          Bukkit.getPluginManager().callEvent(resolveEvent);
          return resolveEvent.getResult();
@@ -65,7 +65,7 @@ package com.destroystokyo.paper.profile;
              AsyncUUIDPreResolveEvent preResolveEvent = new AsyncUUIDPreResolveEvent(id);
              Bukkit.getPluginManager().callEvent(preResolveEvent);
              if (preResolveEvent.isResolved()) { // Plugin set result
-                 AsyncProfileResolveEvent resolveEvent = new AsyncProfileResolveEvent(LookupCause.UUID_LOOKUP, preResolveEvent.getResult(), false);
+                 AsyncProfileResolveEvent resolveEvent = new AsyncProfileResolveEvent(LookupCause.UUID, preResolveEvent.getResult(), false);
                  Bukkit.getPluginManager().callEvent(resolveEvent);
                  callback.onLookup(resolveEvent.getResult(), id);
              } else {
@@ -76,7 +76,7 @@ package com.destroystokyo.paper.profile;
              @Override
              public void onLookup(AccountProfile profile, UUID original) {
                  if (profile != null) {
-                     AsyncProfileResolveEvent resolveEvent = new AsyncProfileResolveEvent(LookupCause.UUID_LOOKUP, profile, true);
+                     AsyncProfileResolveEvent resolveEvent = new AsyncProfileResolveEvent(LookupCause.UUID, profile, true);
                      Bukkit.getPluginManager().callEvent(resolveEvent);
                      profile = resolveEvent.getResult();
                  }
@@ -98,7 +98,7 @@ package com.destroystokyo.paper.profile;
              AsyncNamePreResolveEvent preResolveEvent = new AsyncNamePreResolveEvent(name);
              Bukkit.getPluginManager().callEvent(preResolveEvent);
              if (preResolveEvent.isResolved()) { // Plugin set result
-                 AsyncProfileResolveEvent resolveEvent = new AsyncProfileResolveEvent(LookupCause.NAME_LOOKUP, preResolveEvent.getResult(), false);
+                 AsyncProfileResolveEvent resolveEvent = new AsyncProfileResolveEvent(LookupCause.NAME, preResolveEvent.getResult(), false);
                  Bukkit.getPluginManager().callEvent(resolveEvent);
                  callback.onLookup(resolveEvent.getResult(), name);
              } else {
@@ -109,7 +109,7 @@ package com.destroystokyo.paper.profile;
              @Override
              public void onLookup(AccountProfile profile, String original) {
                  if (profile != null) {
-                     AsyncProfileResolveEvent resolveEvent = new AsyncProfileResolveEvent(LookupCause.NAME_LOOKUP, profile, true);
+                     AsyncProfileResolveEvent resolveEvent = new AsyncProfileResolveEvent(LookupCause.NAME, profile, true);
                      Bukkit.getPluginManager().callEvent(resolveEvent);
                      profile = resolveEvent.getResult();
                  }
@@ -129,11 +129,11 @@ package com.destroystokyo.paper.profile;
          Bukkit.getPluginManager().callEvent(preResolveEvent);
          AsyncProfileResolveEvent resolveEvent;
          if (preResolveEvent.isResolved()) {
-             resolveEvent = new AsyncProfileResolveEvent(LookupCause.PROPERTIES_LOOKUP, preResolveEvent.getResult(), false);
+             resolveEvent = new AsyncProfileResolveEvent(LookupCause.PROPERTIES, preResolveEvent.getResult(), false);
          } else {
              ProfileProperties properties = delegate.lookupProperties(profile);
              if (properties == null) return null;
-             resolveEvent = new AsyncProfileResolveEvent(LookupCause.PROPERTIES_LOOKUP, profile.withProperties(properties), true);
+             resolveEvent = new AsyncProfileResolveEvent(LookupCause.PROPERTIES, profile.withProperties(properties), true);
          }
          Bukkit.getPluginManager().callEvent(resolveEvent);
          return resolveEvent.getResult().getProperties();
diff --git a/src/main/java/com/destroystokyo/paper/profile/LookupCause.java b/src/main/java/com/destroystokyo/paper/profile/LookupCause.java
index 9252c66..07a6d62 100644
--- a/src/main/java/com/destroystokyo/paper/profile/LookupCause.java
+++ b/src/main/java/com/destroystokyo/paper/profile/LookupCause.java
@@ -1,7 +1,7 @@
 package com.destroystokyo.paper.profile;
 
 public enum LookupCause {
-    UUID_LOOKUP,
-    NAME_LOOKUP,
-    PROPERTIES_LOOKUP;
+    UUID,
+    NAME,
+    PROPERTIES;
 }
\ No newline at end of file
diff --git a/src/main/java/com/destroystokyo/paper/profile/LookupFailedException.java b/src/main/java/com/destroystokyo/paper/profile/LookupFailedException.java
index 24dfdc3..8a60772 100644
--- a/src/main/java/com/destroystokyo/paper/profile/LookupFailedException.java
+++ b/src/main/java/com/destroystokyo/paper/profile/LookupFailedException.java
@@ -4,16 +4,13 @@ package com.destroystokyo.paper.profile;
  * Thrown when the lookup fails, for reason other then a profile not found
  */
 public class LookupFailedException extends RuntimeException {
-    public LookupFailedException(Throwable cause) {
-        super(cause);
-    }
 
     public LookupFailedException(String message, Throwable cause) {
         super(message, cause);
     }
 
-    public LookupFailedException(String s) {
-        super(s);
+    public LookupFailedException(String message) {
+        super(message);
     }
 
 }
\ No newline at end of file
diff --git a/src/main/java/com/destroystokyo/paper/profile/ProfileLookup.java b/src/main/java/com/destroystokyo/paper/profile/ProfileLookup.java
index 65e9732..9f7c1ac 100644
--- a/src/main/java/com/destroystokyo/paper/profile/ProfileLookup.java
+++ b/src/main/java/com/destroystokyo/paper/profile/ProfileLookup.java
@@ -15,7 +15,7 @@ public interface ProfileLookup {
      * We have to accept spaces due to this bug: https://www.reddit.com/r/Minecraft/comments/276wcb/psa_usernames_can_contain_spaces_this_effectively/
      * We also have to accept names less than 3 characters
      */
-    public static final Pattern NAME_PATTERN = Pattern.compile("[ \\w]{1,16}+");
+    Pattern NAME_PATTERN = Pattern.compile("[ \\w]{1,16}+");
 
     /**
      * Return if the name is valid
@@ -25,7 +25,7 @@ public interface ProfileLookup {
      * @param s the name to check
      * @return true if valid
      */
-    public static boolean isValidName(String s) {
+    static boolean isValidName(String s) {
         Matcher m = NAME_PATTERN.matcher(s);
         return m.matches();
     }
@@ -42,7 +42,7 @@ public interface ProfileLookup {
      * @throws LookupFailedException if unable to lookup
      * @throws NullPointerException if
      */
-    public AccountProfile lookup(String name);
+    AccountProfile lookup(String name);
 
     /**
      * Lookup a profile with the given uuid
@@ -55,7 +55,7 @@ public interface ProfileLookup {
      * @return a profile with the given id
      * @throws LookupFailedException if unable to lookup
      */
-    public AccountProfile lookup(UUID id);
+    AccountProfile lookup(UUID id);
 
     /**
      * Lookup a profile with the given name
@@ -66,7 +66,7 @@ public interface ProfileLookup {
      * @param name     look for a profile with this name
      * @param callback the callback to handle the result of the lookups
      */
-    public default void lookup(String name, ProfileLookupCallback<String> callback) {
+    default void lookup(String name, ProfileLookupCallback<String> callback) {
         try {
             AccountProfile profile = lookup(name);
             callback.onLookup(profile, name);
@@ -86,7 +86,7 @@ public interface ProfileLookup {
      * @param id       look for a profile with this id
      * @param callback the callback to handle the result of the lookups
      */
-    public default void lookup(UUID id, ProfileLookupCallback<UUID> callback) {
+    default void lookup(UUID id, ProfileLookupCallback<UUID> callback) {
         try {
             AccountProfile profile = lookup(id);
             callback.onLookup(profile, id);
@@ -112,7 +112,7 @@ public interface ProfileLookup {
      * @throws LookupFailedException    if lookup fails
      * @throws IllegalArgumentException if one of the ids doesn't exist
      */
-    public default ImmutableList<AccountProfile> lookupIds(Collection<UUID> ids) {
+    default ImmutableList<AccountProfile> lookupIds(Collection<UUID> ids) {
         ImmutableList.Builder<AccountProfile> profileBuilder = ImmutableList.builder();
         lookupIds(ids, ProfileLookupCallback.assumeFound((profile, original) -> profileBuilder.add(profile)));
         return profileBuilder.build();
@@ -133,7 +133,7 @@ public interface ProfileLookup {
      * @throws LookupFailedException    if lookup fails
      * @throws IllegalArgumentException if one of the names doesn't exist
      */
-    public default ImmutableList<AccountProfile> lookupNames(Collection<String> names) {
+    default ImmutableList<AccountProfile> lookupNames(Collection<String> names) {
         ImmutableList.Builder<AccountProfile> profileBuilder = ImmutableList.builder();
         lookupNames(names, ProfileLookupCallback.assumeFound((profile, original) -> profileBuilder.add(profile)));
         return profileBuilder.build();
@@ -150,7 +150,7 @@ public interface ProfileLookup {
      * @param ids      the ids to lookup
      * @param callback the callback to handle the lookups
      */
-    public default void lookupIds(Collection<UUID> ids, ProfileLookupCallback<UUID> callback) {
+    default void lookupIds(Collection<UUID> ids, ProfileLookupCallback<UUID> callback) {
         ids.forEach((id) -> lookup(id, callback));
     }
 
@@ -165,7 +165,7 @@ public interface ProfileLookup {
      * @param names    the names to lookup
      * @param callback the callback to handle the lookups
      */
-    public default void lookupNames(Collection<String> names, ProfileLookupCallback<String> callback) {
+    default void lookupNames(Collection<String> names, ProfileLookupCallback<String> callback) {
         names.forEach((name) -> lookup(name, callback));
     }
 
@@ -179,7 +179,7 @@ public interface ProfileLookup {
      * @throws IllegalArgumentException if there is no player with the given name/uuid
      * @throws LookupFailedException    if unable to lookup properties
      */
-    public ProfileProperties lookupProperties(AccountProfile profile);
+    ProfileProperties lookupProperties(AccountProfile profile);
 
     /**
      * Return if the lookups have the same underlying source
@@ -189,5 +189,5 @@ public interface ProfileLookup {
      * @param other the object to check equality with
      * @return if equal
      */
-    public boolean equals(Object other);
+    boolean equals(Object other);
 }
\ No newline at end of file
diff --git a/src/main/java/com/destroystokyo/paper/profile/ProfileLookupCallback.java b/src/main/java/com/destroystokyo/paper/profile/ProfileLookupCallback.java
index 7c060ec..6cad152 100644
--- a/src/main/java/com/destroystokyo/paper/profile/ProfileLookupCallback.java
+++ b/src/main/java/com/destroystokyo/paper/profile/ProfileLookupCallback.java
@@ -22,7 +22,7 @@ public interface ProfileLookupCallback<T> {
      * @param profile  the profile that was found, or null if the player
      * @param original the key that was being looked up
      */
-    public void onLookup(AccountProfile profile, T original);
+    void onLookup(AccountProfile profile, T original);
 
     /**
      * Called when a lookup fails
@@ -30,11 +30,11 @@ public interface ProfileLookupCallback<T> {
      * @param t        the exception that was caught, may be null
      * @param original the key that was being looked up
      */
-    public default void onLookupFailed(Throwable t, T original) {
+    default void onLookupFailed(Throwable t, T original) {
         throw new LookupFailedException("Unable to lookup " + original.toString(), t);
     }
 
-    public static <T> ProfileLookupCallback<T> assumeFound(ProfileLookupCallback<T> delegate) {
+    static <T> ProfileLookupCallback<T> assumeFound(ProfileLookupCallback<T> delegate) {
         return new ProfileLookupCallback<T>() {
             @Override
             public void onLookup(AccountProfile profile, T original) {
diff --git a/src/main/java/com/destroystokyo/paper/profile/ProfileProperty.java b/src/main/java/com/destroystokyo/paper/profile/ProfileProperty.java
index 321c3c0..e11b22f 100644
--- a/src/main/java/com/destroystokyo/paper/profile/ProfileProperty.java
+++ b/src/main/java/com/destroystokyo/paper/profile/ProfileProperty.java
@@ -16,7 +16,13 @@ import com.google.common.base.Preconditions;
 import com.google.common.io.ByteStreams;
 
 public final class ProfileProperty {
-    private final String name, value, signature;
+    private final String name;
+    private final String value;
+    private final String signature;
+
+    public ProfileProperty(String name, String value) {
+        this(name, value, null);
+    }
 
     public ProfileProperty(String name, String value, String signature) {
         this.name = Preconditions.checkNotNull(name, "Name of the property can't be null");
@@ -24,10 +30,6 @@ public final class ProfileProperty {
         this.signature = signature;
     }
 
-    public ProfileProperty(String name, String value) {
-        this(name, value, null);
-    }
-
     /**
      * Return the name of this property
      *
diff --git a/src/main/java/com/destroystokyo/paper/profile/event/AsyncNamePreResolveEvent.java b/src/main/java/com/destroystokyo/paper/profile/event/AsyncNamePreResolveEvent.java
index 7008e72..71fe3ad 100644
--- a/src/main/java/com/destroystokyo/paper/profile/event/AsyncNamePreResolveEvent.java
+++ b/src/main/java/com/destroystokyo/paper/profile/event/AsyncNamePreResolveEvent.java
@@ -5,6 +5,7 @@ package com.destroystokyo.paper.profile.event;
  import com.google.common.base.Preconditions;
  
  import org.bukkit.event.HandlerList;
+ import java.util.UUID;
  
  /**
   * Called before a uuid is requested from mojang.
@@ -13,11 +14,11 @@ package com.destroystokyo.paper.profile.event;
   */
  public class AsyncNamePreResolveEvent extends AsyncProfilePreResolveEvent {
      private final String name;
+	 private static final HandlerList handlers = new HandlerList();
  
      public AsyncNamePreResolveEvent(String name) {
-         super(LookupCause.NAME_LOOKUP);
-         Preconditions.checkNotNull(name, "Null name");
-         this.name = name;
+         super(LookupCause.NAME);
+        this.name = Preconditions.checkNotNull(name, "Null name");
      }
  
      /**
@@ -42,14 +43,12 @@ package com.destroystokyo.paper.profile.event;
          super.setResult(result);
      }
  
-     private static final HandlerList handlerList = new HandlerList();
- 
-     public static HandlerList getHandlerList() {
-         return handlerList;
-     }
- 
      @Override
      public HandlerList getHandlers() {
-         return handlerList;
+         return handlers;
+    }
+
+    public static HandlerList getHandlerList() {
+        return handlers;
      }
  }
\ No newline at end of file
diff --git a/src/main/java/com/destroystokyo/paper/profile/event/AsyncProfilePreResolveEvent.java b/src/main/java/com/destroystokyo/paper/profile/event/AsyncProfilePreResolveEvent.java
index ca6dcb0..b70ea82 100644
--- a/src/main/java/com/destroystokyo/paper/profile/event/AsyncProfilePreResolveEvent.java
+++ b/src/main/java/com/destroystokyo/paper/profile/event/AsyncProfilePreResolveEvent.java
@@ -18,7 +18,7 @@ package com.destroystokyo.paper.profile.event;
  
      public AsyncProfilePreResolveEvent(LookupCause cause) {
          super(!Bukkit.isPrimaryThread());
-         this.cause = Preconditions.checkNotNull(cause, "Null cause");;
+         this.cause = Preconditions.checkNotNull(cause, "Null cause");
      }
  
      /**
diff --git a/src/main/java/com/destroystokyo/paper/profile/event/AsyncProfileResolveEvent.java b/src/main/java/com/destroystokyo/paper/profile/event/AsyncProfileResolveEvent.java
index 7bf6f9e..20c5d56 100644
--- a/src/main/java/com/destroystokyo/paper/profile/event/AsyncProfileResolveEvent.java
+++ b/src/main/java/com/destroystokyo/paper/profile/event/AsyncProfileResolveEvent.java
@@ -14,12 +14,13 @@ package com.destroystokyo.paper.profile.event;
   */
  public class AsyncProfileResolveEvent extends Event {
      private final LookupCause cause;
+	 private static final HandlerList handlers = new HandlerList();
      private AccountProfile result;
      private boolean mojang;
  
      public AsyncProfileResolveEvent(LookupCause cause, AccountProfile result, boolean mojang) {
          super(!Bukkit.isPrimaryThread());
-         this.cause = Preconditions.checkNotNull(cause, "Null cause");;
+         this.cause = Preconditions.checkNotNull(cause, "Null cause");
          setResult(result);
          this.mojang = mojang;
      }
@@ -41,7 +42,7 @@ package com.destroystokyo.paper.profile.event;
       */
      public void setResult(AccountProfile result) {
          Preconditions.checkNotNull(result, "Null result");
-         if (this.getCause() == LookupCause.PROPERTIES_LOOKUP) {
+         if (this.getCause() == LookupCause.PROPERTIES) {
              Preconditions.checkArgument(result.hasProperties(), "Result doesn't have properties in properties lookup: %s", result);
          }
          this.result = result;
@@ -67,14 +68,12 @@ package com.destroystokyo.paper.profile.event;
          return mojang;
      }
  
-     private static final HandlerList handlerList = new HandlerList();
- 
-     public HandlerList getHandlerList() {
-         return handlerList;
-     }
- 
      @Override
      public HandlerList getHandlers() {
-         return getHandlerList();
+         return handlers;
+    }
+
+    public HandlerList getHandlerList() {
+        return handlers;
      }
  }
\ No newline at end of file
diff --git a/src/main/java/com/destroystokyo/paper/profile/event/AsyncPropertiesPreResolveEvent.java b/src/main/java/com/destroystokyo/paper/profile/event/AsyncPropertiesPreResolveEvent.java
index 393b1ff..cc4b8c5 100644
--- a/src/main/java/com/destroystokyo/paper/profile/event/AsyncPropertiesPreResolveEvent.java
+++ b/src/main/java/com/destroystokyo/paper/profile/event/AsyncPropertiesPreResolveEvent.java
@@ -13,10 +13,11 @@ package com.destroystokyo.paper.profile.event;
   * <p>The event may be called synchronously if the uuid is resolved on the main thread</p>
   */
  public class AsyncPropertiesPreResolveEvent extends AsyncProfilePreResolveEvent {
+	 private static final HandlerList handlers = new HandlerList();
      private final AccountProfile profile;
  
      public AsyncPropertiesPreResolveEvent(AccountProfile profile) {
-         super(LookupCause.PROPERTIES_LOOKUP);
+         super(LookupCause.PROPERTIES);
          Preconditions.checkNotNull(profile, "Null profile");
          this.profile = profile.withProperties(null);
      }
@@ -55,14 +56,12 @@ package com.destroystokyo.paper.profile.event;
          super.setResult(result);
      }
  
-     private static final HandlerList handlerList = new HandlerList();
- 
-     public static HandlerList getHandlerList() {
-         return handlerList;
-     }
- 
      @Override
      public HandlerList getHandlers() {
-         return getHandlerList();
+         return handlers;
+    }
+
+    public static HandlerList getHandlerList() {
+        return handlers;
      }
  }
\ No newline at end of file
diff --git a/src/main/java/com/destroystokyo/paper/profile/event/AsyncUUIDPreResolveEvent.java b/src/main/java/com/destroystokyo/paper/profile/event/AsyncUUIDPreResolveEvent.java
index 541d870..ec1ab44 100644
--- a/src/main/java/com/destroystokyo/paper/profile/event/AsyncUUIDPreResolveEvent.java
+++ b/src/main/java/com/destroystokyo/paper/profile/event/AsyncUUIDPreResolveEvent.java
@@ -14,10 +14,11 @@ package com.destroystokyo.paper.profile.event;
   * <p>The event may be called synchronously if the uuid is resolved on the main thread</p>
   */
  public class AsyncUUIDPreResolveEvent extends AsyncProfilePreResolveEvent {
+	 private static final HandlerList handlers = new HandlerList();
      private final UUID id;
  
      public AsyncUUIDPreResolveEvent(UUID id) {
-         super(LookupCause.UUID_LOOKUP);
+         super(LookupCause.UUID);
          this.id = Preconditions.checkNotNull(id, "Null id");;
      }
  
@@ -42,14 +43,13 @@ package com.destroystokyo.paper.profile.event;
          }
          super.setResult(result);
      }
-     private static final HandlerList handlerList = new HandlerList();
- 
-     public static HandlerList getHandlerList() {
-         return handlerList;
-     }
  
      @Override
      public HandlerList getHandlers() {
-         return getHandlerList();
+         return handlers;
+    }
+
+    public static HandlerList getHandlerList() {
+        return handlers;
      }
  }
\ No newline at end of file
-- 
2.8.2.windows.1

