From c34b39f64f6ed5afc1c5433e3b7cc53fc42d261b Mon Sep 17 00:00:00 2001
From: SotrForgotten <i@omc.hk>
Date: Sat, 16 Jul 2016 00:47:14 +0800
Subject: [PATCH] Dynamic port allocation


diff --git a/src/main/java/net/minecraft/server/DedicatedServer.java b/src/main/java/net/minecraft/server/DedicatedServer.java
index 7966ff7..e5075c7 100644
--- a/src/main/java/net/minecraft/server/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/DedicatedServer.java
@@ -193,6 +193,9 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
         if (!org.spigotmc.SpigotConfig.lateBind) {
             try {
                 this.am().a(inetaddress, this.P());
+                if(this.getServerConnection().getPort() != this.getConfiguredPort()) {
+                    DedicatedServer.LOGGER.info("Bound to port " + this.getServerConnection().getPort());
+                }
             } catch (IOException ioexception) {
                 DedicatedServer.LOGGER.warn("**** FAILED TO BIND TO PORT!");
                 DedicatedServer.LOGGER.warn("The exception was: {}", new Object[] { ioexception.toString()});
@@ -489,8 +492,13 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
         return this.getServerIp();
     }
 
+	// Return dynamic port, if set, otherwise configured port
     public int e_() {
-        return this.P();
+        if(this.getServerConnection().getPort() != 0) {
+            return this.getServerConnection().getPort();
+        } else {
+            return this.getConfiguredPort();
+        }
     }
 
     public String f_() {
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index e2fc76d..9311fed 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -1287,6 +1287,7 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
         return this.H;
     }
 
+	public int getConfiguredPort() { return this.P(); } // Alias for following method
     public int P() {
         return this.u;
     }
@@ -1512,6 +1513,7 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
         return this.p;
     }
     // Spigot End
+	
     public ServerConnection am() {
         return this.p == null ? this.p = new ServerConnection(this) : this.p; // Spigot
     }
diff --git a/src/main/java/net/minecraft/server/ServerConnection.java b/src/main/java/net/minecraft/server/ServerConnection.java
index 421b978..7fab0c1 100644
--- a/src/main/java/net/minecraft/server/ServerConnection.java
+++ b/src/main/java/net/minecraft/server/ServerConnection.java
@@ -60,6 +60,8 @@ public class ServerConnection {
     public volatile boolean d;
     private final List<ChannelFuture> g = Collections.synchronizedList(Lists.<ChannelFuture>newArrayList());
     private final List<NetworkManager> h = Collections.synchronizedList(Lists.<NetworkManager>newArrayList());
+	private int port;
+    public int getPort() { return port; }
     // Paper start - prevent blocking on adding a new network manager while the server is ticking
     private final List<NetworkManager> pending = Collections.synchronizedList(Lists.<NetworkManager>newArrayList());
     private void addPending() {
@@ -110,6 +112,7 @@ public class ServerConnection {
                     networkmanager.setPacketListener(new HandshakeListener(ServerConnection.this.f, networkmanager));
                 }
             }).group((EventLoopGroup) lazyinitvar.c()).localAddress(inetaddress, i)).bind().syncUninterruptibly());
+			this.port = ((java.net.InetSocketAddress) this.g.get(0).channel().localAddress()).getPort();
         }
     }
 
diff --git a/src/main/java/org/bukkit/Bukkit.java b/src/main/java/org/bukkit/Bukkit.java
index e9dcd14..15539da 100644
--- a/src/main/java/org/bukkit/Bukkit.java
+++ b/src/main/java/org/bukkit/Bukkit.java
@@ -161,10 +161,36 @@ public final class Bukkit {
      */
     public static int getMaxPlayers() {
         return server.getMaxPlayers();
+		
+	}
+	
+    /**
+     * Get the port number specified in the server configuration.
+     * If this is 0, the port is dynamically allocated, and can be
+     * retrieved with {@link #getPort()}.
+     *
+     * @return the configured listening port
+     */
+    public static int getConfiguredPort() {
+        return server.getConfiguredPort();
+    }
+
+    /**
+     * Get the port that the server is currently listening on.
+     * If the port is dynamic, this method can be used to detect the
+     * ephemeral port that was allocated. If the server is not bound
+     * to a port, this will return 0, which should only happen if
+     * binding failed for some reason.
+     *
+     * @return the currently bound listening port
+     */
+    public static int getBoundPort() {
+        return server.getBoundPort();
     }
 
     /**
-     * Get the game port that the server runs on.
+     * Get the port that the server is currently listening on,
+     * or the configured port if the server is not currently listening.
      *
      * @return the port number of this server
      */
diff --git a/src/main/java/org/bukkit/Server.java b/src/main/java/org/bukkit/Server.java
index 070bde6..1537bc7 100644
--- a/src/main/java/org/bukkit/Server.java
+++ b/src/main/java/org/bukkit/Server.java
@@ -144,7 +144,31 @@ public interface Server extends PluginMessageRecipient {
     public int getMaxPlayers();
 
     /**
-     * Get the game port that the server runs on.
+     * Get the port number specified in the server configuration.
+     * If this is 0, the port is dynamically allocated, and can be
+     * retrieved with {@link #getBoundPort()}.
+     *
+     * @return the configured listening port
+     */
+    int getConfiguredPort();
+
+    /**
+     * Get the port that the server is currently listening on.
+     * If the port is dynamic, this method can be used to detect the
+     * ephemeral port that was allocated. If the server is not bound
+     * to a port, this will return 0, which should only happen if
+     * binding failed for some reason.
+     *
+     * @return the currently bound listening port
+     */
+    int getBoundPort();
+
+    /**
+     * Get the port that the server is currently listening on,
+     * or the configured port if the server is not currently listening.
+     *
+     * Deprecated: use either {@link #getConfiguredPort()} or {@link #getBoundPort()},
+     * depending on what, exactly, you want to know.
      *
      * @return the port number of this server
      */
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 860b410..6a41700 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -494,11 +494,26 @@ public final class CraftServer implements Server {
     // NOTE: These are dependent on the corresponding call in MinecraftServer
     // so if that changes this will need to as well
     @Override
-    public int getPort() {
+    public int getConfiguredPort() {
         return this.getConfigInt("server-port", 25565);
     }
 
     @Override
+	public int getBoundPort() {
+        return getHandle().getServer().getServerConnection().getPort();
+    }
+
+    @Override
+    public int getPort() {
+        int port = getBoundPort();
+        if(port > 0) {
+            return port;
+        } else {
+            return getConfiguredPort();
+        }
+    }
+
+    @Override
     public int getViewDistance() {
         return this.getConfigInt("view-distance", 10);
     }
-- 
2.8.2.windows.1

