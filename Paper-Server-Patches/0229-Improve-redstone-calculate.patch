From 808ca5ff18cfb264f5a6432b554fc876731704fa Mon Sep 17 00:00:00 2001
From: SotrForgotten <i@omc.hk>
Date: Sun, 14 Aug 2016 07:08:05 +0800
Subject: [PATCH] Improve redstone calculate


diff --git a/src/main/java/net/minecraft/server/BlockRedstoneWire.java b/src/main/java/net/minecraft/server/BlockRedstoneWire.java
index bc48dbb..32adbc5 100644
--- a/src/main/java/net/minecraft/server/BlockRedstoneWire.java
+++ b/src/main/java/net/minecraft/server/BlockRedstoneWire.java
@@ -1,13 +1,13 @@
 package net.minecraft.server;
 
-import java.util.ArrayList;
-import java.util.EnumSet;
 import java.util.Iterator;
+import java.util.List;
 import java.util.Random;
 import java.util.Set;
 
 import javax.annotation.Nullable;
 
+import org.apache.commons.lang3.ArrayUtils;
 import org.bukkit.event.block.BlockRedstoneEvent; // CraftBukkit
 
 import com.google.common.collect.Lists;
@@ -15,6 +15,13 @@ import com.google.common.collect.Sets;
 
 public class BlockRedstoneWire extends Block {
 
+	private List<BlockPosition> turnOff = Lists.newArrayList();
+	private List<BlockPosition> turnOn = Lists.newArrayList();
+	private final Set<BlockPosition> updatedRedstoneWire = Sets.newLinkedHashSet();
+	private static final EnumDirection[] facingsVertical = { EnumDirection.DOWN, EnumDirection.UP };
+	private static final EnumDirection[] facingsHorizontal = { EnumDirection.WEST, EnumDirection.EAST,
+			EnumDirection.NORTH, EnumDirection.SOUTH };
+
 	public static final BlockStateEnum<BlockRedstoneWire.EnumRedstoneWireConnection> NORTH = BlockStateEnum.of("north",
 			BlockRedstoneWire.EnumRedstoneWireConnection.class);
 	public static final BlockStateEnum<BlockRedstoneWire.EnumRedstoneWireConnection> EAST = BlockStateEnum.of("east",
@@ -46,6 +53,34 @@ public class BlockRedstoneWire extends Block {
 	private boolean g = true;
 	private final Set<BlockPosition> B = Sets.newConcurrentHashSet();
 	private final Set<BlockPosition> blocksToUpdate = B; // Paper - OBFHELPER
+	private static final BaseBlockPosition[] surroundingBlocksOffset;
+	private static final EnumDirection[] facings = ArrayUtils.addAll(facingsVertical, facingsHorizontal);
+
+	static {
+		Set set = Sets.newLinkedHashSet();
+		EnumDirection[] arrayOfEnumDirection1 = facings;
+		int i = arrayOfEnumDirection1.length;
+		for (int j = 0; j < i; ++j) {
+			EnumDirection facing = arrayOfEnumDirection1[j];
+			set.add(facing.m);
+		}
+		arrayOfEnumDirection1 = facings;
+		i = arrayOfEnumDirection1.length;
+		for (int j = 0; j < i; ++j) {
+			EnumDirection facing1 = arrayOfEnumDirection1[j];
+			BaseBlockPosition v1 = facing1.m;
+			EnumDirection[] arrayOfEnumDirection2 = facings;
+			int k = arrayOfEnumDirection2.length;
+			for (int l = 0; l < k; ++l) {
+				EnumDirection facing2 = arrayOfEnumDirection2[l];
+				BaseBlockPosition v2 = facing2.m;
+
+				set.add(new BlockPosition(v1.getX() + v2.getX(), v1.getY() + v2.getY(), v1.getZ() + v2.getZ()));
+			}
+		}
+		set.remove(BlockPosition.ZERO);
+		surroundingBlocksOffset = (BaseBlockPosition[]) set.toArray(new BaseBlockPosition[set.size()]);
+	}
 
 	public BlockRedstoneWire() {
 		super(Material.ORIENTABLE);
@@ -147,26 +182,243 @@ public class BlockRedstoneWire extends Block {
 				|| world.getType(blockposition.down()).getBlock() == Blocks.GLOWSTONE;
 	}
 
-	private IBlockData e(World world, BlockPosition blockposition, IBlockData iblockdata) {
-		// Migot start
-		ArrayList arraylist;
-		synchronized (this.B) {
-			iblockdata = this.a(world, blockposition, blockposition, iblockdata);
-			arraylist = Lists.newArrayList(this.B);
+	private void calculateCurrentChanges(World world, BlockPosition blockposition) {
+		BlockPosition pos;
+		IBlockData state;
+		int oldPower;
+		int blockPower;
+		int wirePower;
+		int newPower;
+		BlockRedstoneEvent event;
+		if (world.getType(blockposition).getBlock() == this) {
+			this.turnOff.add(blockposition);
+		} else {
+			checkSurroundingWires(world, blockposition);
+		}
+
+		while (!(this.turnOff.isEmpty())) {
+			pos = this.turnOff.remove(0);
+			state = world.getType(pos);
+			oldPower = state.get(POWER).intValue();
+			this.g = false;
+			blockPower = world.z(pos);
+			this.g = true;
+			wirePower = getSurroundingWirePower(world, pos);
+
+			--wirePower;
+			newPower = Math.max(blockPower, wirePower);
+
+			if (oldPower != newPower) {
+				event = new BlockRedstoneEvent(world.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ()),
+						oldPower, newPower);
+				world.getServer().getPluginManager().callEvent(event);
+
+				newPower = event.getNewCurrent();
+			}
+
+			if (newPower < oldPower) {
+				if ((blockPower > 0) && (!(this.turnOn.contains(pos)))) {
+					this.turnOn.add(pos);
+				}
+
+				state = setWireState(world, pos, state, 0);
+			} else if (newPower > oldPower) {
+				state = setWireState(world, pos, state, newPower);
+			}
 
-			this.B.clear();
+			checkSurroundingWires(world, pos);
 		}
-		// Migot end
 
-		Iterator iterator = arraylist.iterator();
+		while (!(this.turnOn.isEmpty())) {
+			pos = this.turnOn.remove(0);
+			state = world.getType(pos);
+			oldPower = state.get(POWER).intValue();
+			this.g = false;
+			blockPower = world.z(pos);
+			this.g = true;
+			wirePower = getSurroundingWirePower(world, pos);
 
-		while (iterator.hasNext()) {
-			BlockPosition blockposition1 = (BlockPosition) iterator.next();
+			--wirePower;
+			newPower = Math.max(blockPower, wirePower);
+
+			if (oldPower != newPower) {
+				event = new BlockRedstoneEvent(world.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ()),
+						oldPower, newPower);
+				world.getServer().getPluginManager().callEvent(event);
+
+				newPower = event.getNewCurrent();
+			}
 
-			world.applyPhysics(blockposition1, this);
+			if (newPower > oldPower) {
+				state = setWireState(world, pos, state, newPower);
+			} else if (newPower < oldPower) {
+				;
+			}
+			checkSurroundingWires(world, pos);
 		}
+		this.turnOff.clear();
+		this.turnOn.clear();
+	}
 
-		return iblockdata;
+	private int getSurroundingWirePower(World worldIn, BlockPosition pos) {
+		int wirePower = 0;
+		for (Object element : EnumDirection.EnumDirectionLimit.HORIZONTAL) {
+			EnumDirection enumfacing = (EnumDirection) element;
+			BlockPosition offsetPos = pos.shift(enumfacing);
+
+			wirePower = getPower(worldIn, offsetPos, wirePower);
+
+			if ((worldIn.getType(offsetPos).l()) && (!(worldIn.getType(pos.up()).l()))) {
+				wirePower = getPower(worldIn, offsetPos.up(), wirePower);
+			} else if (!(worldIn.getType(offsetPos).l())) {
+				wirePower = getPower(worldIn, offsetPos.down(), wirePower);
+			}
+		}
+
+		return wirePower;
+	}
+
+	private IBlockData setWireState(World worldIn, BlockPosition pos, IBlockData state, int power) {
+		state = state.set(POWER, Integer.valueOf(power));
+		worldIn.setTypeAndData(pos, state, 2);
+		this.updatedRedstoneWire.add(pos);
+		return state;
+	}
+
+	private void checkSurroundingWires(World worldIn, BlockPosition pos) {
+		BlockPosition offsetPos;
+		IBlockData state = worldIn.getType(pos);
+		int ownPower = 0;
+		if (state.getBlock() == this) {
+			ownPower = state.get(POWER).intValue();
+		}
+
+		EnumDirection[] arrayOfEnumDirection1 = facingsHorizontal;
+		int i = arrayOfEnumDirection1.length;
+		for (int j = 0; j < i; ++j) {
+			EnumDirection facing = arrayOfEnumDirection1[j];
+			offsetPos = pos.shift(facing);
+			if (facing.k().c()) {
+				addWireToList(worldIn, offsetPos, ownPower);
+			}
+		}
+
+		arrayOfEnumDirection1 = facingsVertical;
+		i = arrayOfEnumDirection1.length;
+		for (int j = 0; j < i; ++j) {
+			EnumDirection facingVertical = arrayOfEnumDirection1[j];
+			offsetPos = pos.shift(facingVertical);
+			boolean solidBlock = worldIn.getType(offsetPos).k();
+			EnumDirection[] arrayOfEnumDirection2 = facingsHorizontal;
+			int k = arrayOfEnumDirection2.length;
+			for (int l = 0; l < k; ++l) {
+				EnumDirection facingHorizontal = arrayOfEnumDirection2[l];
+
+				if (((facingVertical == EnumDirection.UP) && (!(solidBlock))) || ((facingVertical == EnumDirection.DOWN)
+						&& (solidBlock) && (!(worldIn.getType(offsetPos.shift(facingHorizontal)).l())))) {
+					addWireToList(worldIn, offsetPos.shift(facingHorizontal), ownPower);
+				}
+			}
+		}
+	}
+
+	private void addWireToList(World worldIn, BlockPosition pos, int otherPower) {
+		IBlockData state = worldIn.getType(pos);
+		if (state.getBlock() == this) {
+			int power = state.get(POWER).intValue();
+
+			if ((power < otherPower - 1) && (!(this.turnOn.contains(pos)))) {
+				this.turnOn.add(pos);
+			}
+
+			if ((power > otherPower) && (!(this.turnOff.contains(pos)))) {
+				this.turnOff.add(pos);
+			}
+		}
+	}
+
+	private void addAllSurroundingBlocks(BlockPosition pos, Set<BlockPosition> set) {
+		BaseBlockPosition[] arrayOfBaseBlockPosition = surroundingBlocksOffset;
+		int i = arrayOfBaseBlockPosition.length;
+		for (int j = 0; j < i; ++j) {
+			BaseBlockPosition vect = arrayOfBaseBlockPosition[j];
+			set.add(pos.a(vect));
+		}
+	}
+
+	private boolean canBlockBePoweredFromSide(IBlockData state, EnumDirection side, boolean isWire) {
+		if ((state.getBlock() instanceof BlockPiston) && (state.get(BlockDirectional.FACING) == side.opposite())) {
+			return false;
+		}
+
+		if ((state.getBlock() instanceof BlockDiodeAbstract)
+				&& (state.get(BlockFacingHorizontal.FACING) != side.opposite())) {
+			return ((isWire) && (state.getBlock() instanceof BlockRedstoneComparator)
+					&& (state.get(BlockFacingHorizontal.FACING).k() != side.k()) && (side.k().c()));
+		}
+
+		return ((!(state.getBlock() instanceof BlockRedstoneTorch))
+				|| ((!(isWire)) && (state.get(BlockTorch.FACING) == side)));
+	}
+
+	private void addBlocksNeedingUpdate(World worldIn, BlockPosition pos, Set<BlockPosition> set) {
+		EnumDirection facing;
+		BlockPosition offsetPos;
+		List connectedSides = getSidesToPower(worldIn, pos);
+
+		EnumDirection[] arrayOfEnumDirection1 = facings;
+		int i = arrayOfEnumDirection1.length;
+		for (int j = 0; j < i; ++j) {
+			facing = arrayOfEnumDirection1[j];
+			offsetPos = pos.shift(facing);
+
+			if ((((connectedSides.contains(facing.opposite())) || (facing == EnumDirection.DOWN)
+					|| ((facing.k().c()) && (a(worldIn.getType(offsetPos), facing)))))
+					&& (canBlockBePoweredFromSide(worldIn.getType(offsetPos), facing, true))) {
+				set.add(offsetPos);
+			}
+
+		}
+
+		arrayOfEnumDirection1 = facings;
+		i = arrayOfEnumDirection1.length;
+		for (int j = 0; j < i; ++j) {
+			facing = arrayOfEnumDirection1[j];
+			offsetPos = pos.shift(facing);
+			if ((((connectedSides.contains(facing.opposite())) || (facing == EnumDirection.DOWN)))
+					&& (worldIn.getType(offsetPos).l())) {
+				EnumDirection[] arrayOfEnumDirection2 = facings;
+				int k = arrayOfEnumDirection2.length;
+				for (int l = 0; l < k; ++l) {
+					EnumDirection facing1 = arrayOfEnumDirection2[l];
+					if (canBlockBePoweredFromSide(worldIn.getType(offsetPos.shift(facing1)), facing1, false)) {
+						set.add(offsetPos.shift(facing1));
+					}
+				}
+			}
+		}
+	}
+
+	private void e(World world, BlockPosition blockposition, IBlockData iblockdata) {
+		calculateCurrentChanges(world, blockposition);
+		Set<BlockPosition> blocksNeedingUpdate = Sets.newLinkedHashSet();
+
+		for (BlockPosition posi : updatedRedstoneWire) {
+			addBlocksNeedingUpdate(world, posi, blocksNeedingUpdate);
+		}
+
+		Iterator it = Lists.newLinkedList(this.updatedRedstoneWire).descendingIterator();
+		while (it.hasNext()) {
+			addAllSurroundingBlocks((BlockPosition) it.next(), blocksNeedingUpdate);
+		}
+
+		blocksNeedingUpdate.removeAll(this.updatedRedstoneWire);
+
+		this.updatedRedstoneWire.clear();
+
+		for (BlockPosition posi : blocksNeedingUpdate) {
+			world.applyPhysics(posi, this);
+		}
 	}
 
 	private IBlockData a(World world, BlockPosition blockposition, BlockPosition blockposition1,
@@ -286,11 +538,10 @@ public class BlockRedstoneWire extends Block {
 
 	@Override
 	public void onPlace(World world, BlockPosition blockposition, IBlockData iblockdata) {
-		if (!world.isClientSide) {
-			this.e(world, blockposition, iblockdata);
-			Iterator iterator = EnumDirection.EnumDirectionLimit.VERTICAL.iterator();
-
+		if (!(world.isClientSide)) {
 			EnumDirection enumdirection;
+			e(world, blockposition, iblockdata);
+			Iterator iterator = EnumDirection.EnumDirectionLimit.VERTICAL.iterator();
 
 			while (iterator.hasNext()) {
 				enumdirection = (EnumDirection) iterator.next();
@@ -301,7 +552,7 @@ public class BlockRedstoneWire extends Block {
 
 			while (iterator.hasNext()) {
 				enumdirection = (EnumDirection) iterator.next();
-				this.b(world, blockposition.shift(enumdirection));
+				b(world, blockposition.shift(enumdirection));
 			}
 
 			iterator = EnumDirection.EnumDirectionLimit.HORIZONTAL.iterator();
@@ -311,30 +562,28 @@ public class BlockRedstoneWire extends Block {
 				BlockPosition blockposition1 = blockposition.shift(enumdirection);
 
 				if (world.getType(blockposition1).l()) {
-					this.b(world, blockposition1.up());
+					b(world, blockposition1.up());
 				} else {
-					this.b(world, blockposition1.down());
+					b(world, blockposition1.down());
 				}
 			}
-
 		}
 	}
 
 	@Override
 	public void remove(World world, BlockPosition blockposition, IBlockData iblockdata) {
 		super.remove(world, blockposition, iblockdata);
-		if (!world.isClientSide) {
+		if (!(world.isClientSide)) {
+			EnumDirection enumdirection1;
 			EnumDirection[] aenumdirection = EnumDirection.values();
 
 			for (EnumDirection enumdirection : aenumdirection) {
 				world.applyPhysics(blockposition.shift(enumdirection), this);
 			}
 
-			this.e(world, blockposition, iblockdata);
+			e(world, blockposition, iblockdata);
 			Iterator iterator = EnumDirection.EnumDirectionLimit.HORIZONTAL.iterator();
 
-			EnumDirection enumdirection1;
-
 			while (iterator.hasNext()) {
 				enumdirection1 = (EnumDirection) iterator.next();
 				this.b(world, blockposition.shift(enumdirection1));
@@ -352,7 +601,6 @@ public class BlockRedstoneWire extends Block {
 					this.b(world, blockposition1.down());
 				}
 			}
-
 		}
 	}
 
@@ -368,14 +616,13 @@ public class BlockRedstoneWire extends Block {
 
 	@Override
 	public void a(IBlockData iblockdata, World world, BlockPosition blockposition, Block block) {
-		if (!world.isClientSide) {
-			if (this.canPlace(world, blockposition)) {
-				this.e(world, blockposition, iblockdata);
+		if (!(world.isClientSide)) {
+			if (canPlace(world, blockposition)) {
+				e(world, blockposition, iblockdata);
 			} else {
-				this.b(world, blockposition, iblockdata, 0);
+				b(world, blockposition, iblockdata, 0);
 				world.setAir(blockposition);
 			}
-
 		}
 	}
 
@@ -394,37 +641,53 @@ public class BlockRedstoneWire extends Block {
 	@Override
 	public int b(IBlockData iblockdata, IBlockAccess iblockaccess, BlockPosition blockposition,
 			EnumDirection enumdirection) {
-		if (!this.g) {
+		if (!(this.g)) {
 			return 0;
-		} else {
-			int i = iblockdata.get(BlockRedstoneWire.POWER).intValue();
-
-			if (i == 0) {
-				return 0;
-			} else if (enumdirection == EnumDirection.UP) {
-				return i;
-			} else {
-				EnumSet enumset = EnumSet.noneOf(EnumDirection.class);
-				Iterator iterator = EnumDirection.EnumDirectionLimit.HORIZONTAL.iterator();
+		}
 
-				while (iterator.hasNext()) {
-					EnumDirection enumdirection1 = (EnumDirection) iterator.next();
+		int i = iblockdata.get(BlockRedstoneWire.POWER).intValue();
 
-					if (this.c(iblockaccess, blockposition, enumdirection1)) {
-						enumset.add(enumdirection1);
-					}
-				}
+		if (i == 0) {
+			return 0;
+		}
+		if (enumdirection == EnumDirection.UP) {
+			return i;
+		}
 
-				if (enumdirection.k().c() && enumset.isEmpty()) {
-					return i;
-				} else if (enumset.contains(enumdirection) && !enumset.contains(enumdirection.f())
-						&& !enumset.contains(enumdirection.e())) {
-					return i;
-				} else {
-					return 0;
-				}
+		if (getSidesToPower((World) iblockaccess, blockposition).contains(enumdirection)) {
+			return i;
+		}
+		return 0;
+	}
+
+	private List<EnumDirection> getSidesToPower(World worldIn, BlockPosition pos) {
+		int i;
+		int k;
+		List retval = Lists.newArrayList();
+		EnumDirection[] arrayOfEnumDirection = facingsHorizontal;
+		int j = arrayOfEnumDirection.length;
+		for (int l = 0; l < j; ++l) {
+			EnumDirection facing = arrayOfEnumDirection[l];
+			if (c(worldIn, pos, facing)) {
+				retval.add(facing);
 			}
 		}
+
+		if (retval.isEmpty()) {
+			return Lists.newArrayList(facingsHorizontal);
+		}
+
+		i = ((retval.contains(EnumDirection.NORTH)) || (retval.contains(EnumDirection.SOUTH))) ? 1 : 0;
+		k = ((retval.contains(EnumDirection.EAST)) || (retval.contains(EnumDirection.WEST))) ? 1 : 0;
+		if (i != 0) {
+			retval.remove(EnumDirection.EAST);
+			retval.remove(EnumDirection.WEST);
+		}
+		if (k != 0) {
+			retval.remove(EnumDirection.NORTH);
+			retval.remove(EnumDirection.SOUTH);
+		}
+		return retval;
 	}
 
 	private boolean c(IBlockAccess iblockaccess, BlockPosition blockposition, EnumDirection enumdirection) {
@@ -433,11 +696,7 @@ public class BlockRedstoneWire extends Block {
 		boolean flag = iblockdata.l();
 		boolean flag1 = iblockaccess.getType(blockposition.up()).l();
 
-		return !flag1 && flag && c(iblockaccess, blockposition1.up()) ? true
-				: (a(iblockdata, enumdirection) ? true
-						: (iblockdata.getBlock() == Blocks.POWERED_REPEATER
-								&& iblockdata.get(BlockFacingHorizontal.FACING) == enumdirection ? true
-										: !flag && c(iblockaccess, blockposition1.down())));
+		return ((!(flag1)) && (flag) && (c(iblockaccess, blockposition1.up())));
 	}
 
 	protected static boolean c(IBlockAccess iblockaccess, BlockPosition blockposition) {
diff --git a/src/main/java/net/minecraft/server/EnumDirection.java b/src/main/java/net/minecraft/server/EnumDirection.java
new file mode 100644
index 0000000..a464c3e
--- /dev/null
+++ b/src/main/java/net/minecraft/server/EnumDirection.java
@@ -0,0 +1,312 @@
+package net.minecraft.server;
+
+import com.google.common.base.Predicate;
+import com.google.common.collect.Iterators;
+import com.google.common.collect.Maps;
+import java.util.Iterator;
+import java.util.Map;
+import java.util.Random;
+import javax.annotation.Nullable;
+
+public enum EnumDirection implements INamable {
+
+    DOWN(0, 1, -1, "down", EnumDirection.EnumAxisDirection.NEGATIVE, EnumDirection.EnumAxis.Y, new BaseBlockPosition(0, -1, 0)), UP(1, 0, -1, "up", EnumDirection.EnumAxisDirection.POSITIVE, EnumDirection.EnumAxis.Y, new BaseBlockPosition(0, 1, 0)), NORTH(2, 3, 2, "north", EnumDirection.EnumAxisDirection.NEGATIVE, EnumDirection.EnumAxis.Z, new BaseBlockPosition(0, 0, -1)), SOUTH(3, 2, 0, "south", EnumDirection.EnumAxisDirection.POSITIVE, EnumDirection.EnumAxis.Z, new BaseBlockPosition(0, 0, 1)), WEST(4, 5, 1, "west", EnumDirection.EnumAxisDirection.NEGATIVE, EnumDirection.EnumAxis.X, new BaseBlockPosition(-1, 0, 0)), EAST(5, 4, 3, "east", EnumDirection.EnumAxisDirection.POSITIVE, EnumDirection.EnumAxis.X, new BaseBlockPosition(1, 0, 0));
+
+    private final int g;
+    private final int h;
+    private final int i;
+    private final String j;
+    private final EnumDirection.EnumAxis k;
+    private final EnumDirection.EnumAxisDirection l;
+    protected final BaseBlockPosition m; // Torch - private -> protected
+    private static final EnumDirection[] n = new EnumDirection[6];
+    private static final EnumDirection[] o = new EnumDirection[4];
+    private static final Map<String, EnumDirection> p = Maps.newHashMap();
+
+    private EnumDirection(int i, int j, int k, String s, EnumDirection.EnumAxisDirection enumdirection_enumaxisdirection, EnumDirection.EnumAxis enumdirection_enumaxis, BaseBlockPosition baseblockposition) {
+        this.g = i;
+        this.i = k;
+        this.h = j;
+        this.j = s;
+        this.k = enumdirection_enumaxis;
+        this.l = enumdirection_enumaxisdirection;
+        this.m = baseblockposition;
+    }
+
+    public int a() {
+        return this.g;
+    }
+
+    public int get2DRotationValue() {
+        return this.i;
+    }
+
+    public EnumDirection.EnumAxisDirection c() {
+        return this.l;
+    }
+
+    public EnumDirection opposite() {
+        return fromType1(this.h);
+    }
+
+    public EnumDirection e() {
+        switch (EnumDirection.SyntheticClass_1.b[this.ordinal()]) {
+        case 1:
+            return EnumDirection.EAST;
+
+        case 2:
+            return EnumDirection.SOUTH;
+
+        case 3:
+            return EnumDirection.WEST;
+
+        case 4:
+            return EnumDirection.NORTH;
+
+        default:
+            throw new IllegalStateException("Unable to get Y-rotated facing of " + this);
+        }
+    }
+
+    public EnumDirection f() {
+        switch (EnumDirection.SyntheticClass_1.b[this.ordinal()]) {
+        case 1:
+            return EnumDirection.WEST;
+
+        case 2:
+            return EnumDirection.NORTH;
+
+        case 3:
+            return EnumDirection.EAST;
+
+        case 4:
+            return EnumDirection.SOUTH;
+
+        default:
+            throw new IllegalStateException("Unable to get CCW facing of " + this);
+        }
+    }
+
+    public int getAdjacentX() {
+        return this.k == EnumDirection.EnumAxis.X ? this.l.a() : 0;
+    }
+
+    public int getAdjacentY() {
+        return this.k == EnumDirection.EnumAxis.Y ? this.l.a() : 0;
+    }
+
+    public int getAdjacentZ() {
+        return this.k == EnumDirection.EnumAxis.Z ? this.l.a() : 0;
+    }
+
+    public String j() {
+        return this.j;
+    }
+
+    public EnumDirection.EnumAxis k() {
+        return this.k;
+    }
+
+    public static EnumDirection fromType1(int i) {
+        return EnumDirection.n[MathHelper.a(i % EnumDirection.n.length)];
+    }
+
+    public static EnumDirection fromType2(int i) {
+        return EnumDirection.o[MathHelper.a(i % EnumDirection.o.length)];
+    }
+
+    public static EnumDirection fromAngle(double d0) {
+        return fromType2(MathHelper.floor(d0 / 90.0D + 0.5D) & 3);
+    }
+
+    public float l() {
+        return (float) ((this.i & 3) * 90);
+    }
+
+    public static EnumDirection a(Random random) {
+        return values()[random.nextInt(values().length)];
+    }
+
+    public String toString() {
+        return this.j;
+    }
+
+    public String getName() {
+        return this.j;
+    }
+
+    public static EnumDirection a(EnumDirection.EnumAxisDirection enumdirection_enumaxisdirection, EnumDirection.EnumAxis enumdirection_enumaxis) {
+        EnumDirection[] aenumdirection = values();
+        int i = aenumdirection.length;
+
+        for (int j = 0; j < i; ++j) {
+            EnumDirection enumdirection = aenumdirection[j];
+
+            if (enumdirection.c() == enumdirection_enumaxisdirection && enumdirection.k() == enumdirection_enumaxis) {
+                return enumdirection;
+            }
+        }
+
+        throw new IllegalArgumentException("No such direction: " + enumdirection_enumaxisdirection + " " + enumdirection_enumaxis);
+    }
+
+    static {
+        EnumDirection[] aenumdirection = values();
+        int i = aenumdirection.length;
+
+        for (int j = 0; j < i; ++j) {
+            EnumDirection enumdirection = aenumdirection[j];
+
+            EnumDirection.n[enumdirection.g] = enumdirection;
+            if (enumdirection.k().c()) {
+                EnumDirection.o[enumdirection.i] = enumdirection;
+            }
+
+            EnumDirection.p.put(enumdirection.j().toLowerCase(), enumdirection);
+        }
+
+    }
+
+    static class SyntheticClass_1 {
+
+        static final int[] a = new int[EnumDirection.EnumAxis.values().length];
+        static final int[] b = new int[EnumDirection.values().length];
+        static final int[] c = new int[EnumDirection.EnumDirectionLimit.values().length];
+
+        static {
+            try {
+                EnumDirection.SyntheticClass_1.c[EnumDirection.EnumDirectionLimit.HORIZONTAL.ordinal()] = 1;
+                EnumDirection.SyntheticClass_1.c[EnumDirection.EnumDirectionLimit.VERTICAL.ordinal()] = 2;
+                EnumDirection.SyntheticClass_1.b[EnumDirection.NORTH.ordinal()] = 1;
+                EnumDirection.SyntheticClass_1.b[EnumDirection.EAST.ordinal()] = 2;
+                EnumDirection.SyntheticClass_1.b[EnumDirection.SOUTH.ordinal()] = 3;
+                EnumDirection.SyntheticClass_1.b[EnumDirection.WEST.ordinal()] = 4;
+                EnumDirection.SyntheticClass_1.b[EnumDirection.UP.ordinal()] = 5;
+                EnumDirection.SyntheticClass_1.b[EnumDirection.DOWN.ordinal()] = 6;
+                EnumDirection.SyntheticClass_1.a[EnumDirection.EnumAxis.X.ordinal()] = 1;
+                EnumDirection.SyntheticClass_1.a[EnumDirection.EnumAxis.Y.ordinal()] = 2;
+                EnumDirection.SyntheticClass_1.a[EnumDirection.EnumAxis.Z.ordinal()] = 3;
+            } catch (NoSuchFieldError nosuchfielderror) {
+                ;
+            }
+
+        }
+    }
+
+    public static enum EnumDirectionLimit implements Predicate<EnumDirection>, Iterable<EnumDirection> {
+
+        HORIZONTAL, VERTICAL;
+
+        private EnumDirectionLimit() {}
+
+        public EnumDirection[] a() {
+            switch (EnumDirection.SyntheticClass_1.c[this.ordinal()]) {
+            case 1:
+                return new EnumDirection[] { EnumDirection.NORTH, EnumDirection.EAST, EnumDirection.SOUTH, EnumDirection.WEST};
+
+            case 2:
+                return new EnumDirection[] { EnumDirection.UP, EnumDirection.DOWN};
+
+            default:
+                throw new Error("Someone\'s been tampering with the universe!");
+            }
+        }
+
+        public EnumDirection a(Random random) {
+            EnumDirection[] aenumdirection = this.a();
+
+            return aenumdirection[random.nextInt(aenumdirection.length)];
+        }
+
+        public boolean a(@Nullable EnumDirection enumdirection) {
+            return enumdirection != null && enumdirection.k().d() == this;
+        }
+
+        public Iterator<EnumDirection> iterator() {
+            return Iterators.forArray(this.a());
+        }
+
+        public boolean apply(EnumDirection enumdirection) {
+            return this.a(enumdirection);
+        }
+    }
+
+    public static enum EnumAxisDirection {
+
+        POSITIVE(1, "Towards positive"), NEGATIVE(-1, "Towards negative");
+
+        private final int c;
+        private final String d;
+
+        private EnumAxisDirection(int i, String s) {
+            this.c = i;
+            this.d = s;
+        }
+
+        public int a() {
+            return this.c;
+        }
+
+        public String toString() {
+            return this.d;
+        }
+    }
+
+    public static enum EnumAxis implements Predicate<EnumDirection>, INamable {
+
+        X("x", EnumDirection.EnumDirectionLimit.HORIZONTAL), Y("y", EnumDirection.EnumDirectionLimit.VERTICAL), Z("z", EnumDirection.EnumDirectionLimit.HORIZONTAL);
+
+        private static final Map<String, EnumDirection.EnumAxis> d = Maps.newHashMap();
+        private final String e;
+        private final EnumDirection.EnumDirectionLimit f;
+
+        private EnumAxis(String s, EnumDirection.EnumDirectionLimit enumdirection_enumdirectionlimit) {
+            this.e = s;
+            this.f = enumdirection_enumdirectionlimit;
+        }
+
+        public String a() {
+            return this.e;
+        }
+
+        public boolean b() {
+            return this.f == EnumDirection.EnumDirectionLimit.VERTICAL;
+        }
+
+        public boolean c() {
+            return this.f == EnumDirection.EnumDirectionLimit.HORIZONTAL;
+        }
+
+        public String toString() {
+            return this.e;
+        }
+
+        public boolean a(@Nullable EnumDirection enumdirection) {
+            return enumdirection != null && enumdirection.k() == this;
+        }
+
+        public EnumDirection.EnumDirectionLimit d() {
+            return this.f;
+        }
+
+        public String getName() {
+            return this.e;
+        }
+
+        public boolean apply(EnumDirection enumdirection) {
+            return this.a(enumdirection);
+        }
+
+        static {
+            EnumDirection.EnumAxis[] aenumdirection_enumaxis = values();
+            int i = aenumdirection_enumaxis.length;
+
+            for (int j = 0; j < i; ++j) {
+                EnumDirection.EnumAxis enumdirection_enumaxis = aenumdirection_enumaxis[j];
+
+                EnumDirection.EnumAxis.d.put(enumdirection_enumaxis.a().toLowerCase(), enumdirection_enumaxis);
+            }
+
+        }
+    }
+}
diff --git a/src/main/java/net/minecraft/server/MobSpawnerAbstract.java b/src/main/java/net/minecraft/server/MobSpawnerAbstract.java
index 4c3dc10..ccc9fad 100644
--- a/src/main/java/net/minecraft/server/MobSpawnerAbstract.java
+++ b/src/main/java/net/minecraft/server/MobSpawnerAbstract.java
@@ -107,7 +107,7 @@ public abstract class MobSpawnerAbstract {
 				if (entityinsentient == null || entityinsentient.cG() && entityinsentient.canSpawn()) {
 					
 					if (nbttagcompound.d() == 1 && nbttagcompound.hasKeyOfType("id", 8) && entity instanceof EntityInsentient) {
-                        entity.prepare(world.D(new BlockPosition(entity)), (GroupDataEntity) null);
+                        ((EntityInsentient) entity).prepare(world.D(new BlockPosition(entity)), (GroupDataEntity) null);
                     }
 					
 					// Spigot Start
diff --git a/src/main/java/net/minecraft/server/PlayerChunkMap.java b/src/main/java/net/minecraft/server/PlayerChunkMap.java
index 8a94cdb..566c280 100644
--- a/src/main/java/net/minecraft/server/PlayerChunkMap.java
+++ b/src/main/java/net/minecraft/server/PlayerChunkMap.java
@@ -426,6 +426,8 @@ public class PlayerChunkMap {
 		return playerchunk != null && playerchunk.d(entityplayer) && playerchunk.e();
 	}
 
+	public final void setViewDistanceForAll(int viewDistance) { this.a(viewDistance); } // Paper - OBFHELPER
+    // Paper start - Separate into two methods
 	public void a(int i) {
 		i = MathHelper.clamp(i, 3, 32);
 		if (i != this.j) {
@@ -435,36 +437,56 @@ public class PlayerChunkMap {
 
 			while (iterator.hasNext()) {
 				EntityPlayer entityplayer = (EntityPlayer) iterator.next();
-				int k = (int) entityplayer.locX >> 4;
-				int l = (int) entityplayer.locZ >> 4;
-				int i1;
-				int j1;
-
-				if (j > 0) {
-					for (i1 = k - i; i1 <= k + i; ++i1) {
-						for (j1 = l - i; j1 <= l + i; ++j1) {
-							PlayerChunk playerchunk = this.c(i1, j1);
-
-							if (!playerchunk.d(entityplayer)) {
-								playerchunk.a(entityplayer);
-							}
+				this.setViewDistance(entityplayer, i, false); // Paper - Split, don't mark sort pending, we'll handle it after
+            }
+
+            this.j = i;
+            this.e();
+        }
+    }
+
+    public void setViewDistance(EntityPlayer entityplayer, int i) {
+        this.setViewDistance(entityplayer, i, true); // Mark sort pending by default so we don't have to remember to do so all the time
+    }
+    
+    // Copied from above with minor changes
+    public void setViewDistance(EntityPlayer entityplayer, int i, boolean markSort) {
+        i = MathHelper.clamp(i, 3, 32);
+        int oldViewDistance = entityplayer.getViewDistance();
+        if (i != oldViewDistance) {
+            int j = i - oldViewDistance;
+            
+            int k = (int) entityplayer.locX >> 4;
+            int l = (int) entityplayer.locZ >> 4;
+            int i1;
+            int j1;
+
+            if (j > 0) {
+                for (i1 = k - i; i1 <= k + i; ++i1) {
+                    for (j1 = l - i; j1 <= l + i; ++j1) {
+                        PlayerChunk playerchunk = this.c(i1, j1);
+
+                        if (!playerchunk.d(entityplayer)) {
+                            playerchunk.a(entityplayer);
 						}
 					}
-				} else {
-					for (i1 = k - this.j; i1 <= k + this.j; ++i1) {
-						for (j1 = l - this.j; j1 <= l + this.j; ++j1) {
-							if (!this.a(i1, j1, k, l, i)) {
-								this.c(i1, j1).b(entityplayer);
-							}
+				}
+            } else {
+                for (i1 = k - oldViewDistance; i1 <= k + oldViewDistance; ++i1) {
+                    for (j1 = l - oldViewDistance; j1 <= l + oldViewDistance; ++j1) {
+                        if (!this.a(i1, j1, k, l, i)) {
+                            this.c(i1, j1).b(entityplayer);
 						}
 					}
 				}
+				if (markSort) {
+                    this.e();
+				}
 			}
 
-			this.j = i;
-			this.e();
 		}
 	}
+	// Paper end
 
 	private void e() {
 		this.l = true;
@@ -562,9 +584,9 @@ public class PlayerChunkMap {
 			viewDistance = -1;
 		}
 		if (viewDistance != oldViewDistance) {
-			removePlayer(player);
+			// Order matters
+            this.setViewDistance(player, viewDistance);
 			player.setViewDistance(viewDistance);
-			addPlayer(player);
 		}
 	}
 	// Paper end
-- 
2.8.2.windows.1

