From 0dea21bf19aa4c4446aeb5035126ee64be346bef Mon Sep 17 00:00:00 2001
From: SotrForgotten <i@omc.hk>
Date: Sat, 23 Jul 2016 16:14:58 +0800
Subject: [PATCH] Threadsafe fixes, also rebuild


diff --git a/src/main/java/net/minecraft/server/BiomeBase.java b/src/main/java/net/minecraft/server/BiomeBase.java
index 6b84ece..0f90a26 100644
--- a/src/main/java/net/minecraft/server/BiomeBase.java
+++ b/src/main/java/net/minecraft/server/BiomeBase.java
@@ -21,7 +21,7 @@ public abstract class BiomeBase {
     protected static final IBlockData f = Blocks.SANDSTONE.getBlockData();
     protected static final IBlockData g = Blocks.ICE.getBlockData();
     protected static final IBlockData h = Blocks.WATER.getBlockData();
-    public static final Set<BiomeBase> i = Sets.newHashSet();
+    public static final Set<BiomeBase> i = Sets.newConcurrentHashSet();
     public static final RegistryBlockID<BiomeBase> j = new RegistryBlockID();
     protected static final NoiseGenerator3 k = new NoiseGenerator3(new Random(1234L), 1);
     protected static final NoiseGenerator3 l = new NoiseGenerator3(new Random(2345L), 1);
diff --git a/src/main/java/net/minecraft/server/Block.java b/src/main/java/net/minecraft/server/Block.java
index 3d6f803..a3ae8b7 100644
--- a/src/main/java/net/minecraft/server/Block.java
+++ b/src/main/java/net/minecraft/server/Block.java
@@ -1,9 +1,9 @@
 package net.minecraft.server;
 
 import com.google.common.collect.Sets;
-import java.util.HashSet;
 import java.util.Iterator;
 import java.util.List;
+import java.util.Set;
 import java.util.Random;
 import javax.annotation.Nullable;
 
@@ -869,7 +869,7 @@ public class Block {
             }
         }
 
-        HashSet hashset = Sets.newHashSet(new Block[] { (Block) Block.REGISTRY.get(new MinecraftKey("tripwire"))});
+        Set hashset = Sets.newHashSet(new Block[] { (Block) Block.REGISTRY.get(new MinecraftKey("tripwire"))});
         Iterator iterator1 = Block.REGISTRY.iterator();
 
         while (iterator1.hasNext()) {
diff --git a/src/main/java/net/minecraft/server/BlockMinecartTrackAbstract.java b/src/main/java/net/minecraft/server/BlockMinecartTrackAbstract.java
index 23f2f6a..dcbebe9 100644
--- a/src/main/java/net/minecraft/server/BlockMinecartTrackAbstract.java
+++ b/src/main/java/net/minecraft/server/BlockMinecartTrackAbstract.java
@@ -240,7 +240,7 @@ public abstract class BlockMinecartTrackAbstract extends Block {
         private final BlockMinecartTrackAbstract d;
         private IBlockData e;
         private final boolean f;
-        private final List<BlockPosition> g = Lists.newArrayList();
+        private final List<BlockPosition> g = new java.util.concurrent.CopyOnWriteArrayList<BlockPosition>();
 
         public MinecartTrackLogic(World world, BlockPosition blockposition, IBlockData iblockdata) {
             this.b = world;
diff --git a/src/main/java/net/minecraft/server/BlockPortal.java b/src/main/java/net/minecraft/server/BlockPortal.java
index 2ccfd54..2e8e7be 100644
--- a/src/main/java/net/minecraft/server/BlockPortal.java
+++ b/src/main/java/net/minecraft/server/BlockPortal.java
@@ -3,6 +3,8 @@ package net.minecraft.server;
 import com.google.common.cache.LoadingCache;
 import java.util.Random;
 import javax.annotation.Nullable;
+import java.util.Set;
+import com.google.common.collect.Sets;
 
 import org.bukkit.event.entity.EntityPortalEnterEvent; // CraftBukkit
 import org.bukkit.event.world.PortalCreateEvent; // CraftBukkit
@@ -264,7 +266,7 @@ public class BlockPortal extends BlockHalfTransparent {
         private BlockPosition position;
         private int height;
         private int width;
-        java.util.Collection<org.bukkit.block.Block> blocks = new java.util.HashSet<org.bukkit.block.Block>(); // CraftBukkit - add field
+        Set<org.bukkit.block.Block> blocks = Sets.newConcurrentHashSet(); // CraftBukkit - add field
 
         public Shape(World world, BlockPosition blockposition, EnumDirection.EnumAxis enumdirection_enumaxis) {
             this.a = world;
diff --git a/src/main/java/net/minecraft/server/BlockPosition.java b/src/main/java/net/minecraft/server/BlockPosition.java
index 343c7b1..875137f 100644
--- a/src/main/java/net/minecraft/server/BlockPosition.java
+++ b/src/main/java/net/minecraft/server/BlockPosition.java
@@ -261,7 +261,7 @@ public class BlockPosition extends BaseBlockPosition {
     public static final class PooledBlockPosition extends BlockPosition.MutableBlockPosition {
 
         private boolean f;
-        private static final List<BlockPosition.PooledBlockPosition> g = Lists.newArrayList();
+        private static final List<BlockPosition.PooledBlockPosition> g = new java.util.concurrent.CopyOnWriteArrayList<BlockPosition.PooledBlockPosition>();
 
         private PooledBlockPosition(int i, int j, int k) {
             super(i, j, k);
diff --git a/src/main/java/net/minecraft/server/BlockStateInteger.java b/src/main/java/net/minecraft/server/BlockStateInteger.java
index 835b5d6..12f9157 100644
--- a/src/main/java/net/minecraft/server/BlockStateInteger.java
+++ b/src/main/java/net/minecraft/server/BlockStateInteger.java
@@ -2,8 +2,8 @@ package net.minecraft.server;
 
 import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Sets;
+import java.util.Set;
 import java.util.Collection;
-import java.util.HashSet;
 
 public class BlockStateInteger extends BlockState<Integer> {
 
@@ -47,7 +47,7 @@ public class BlockStateInteger extends BlockState<Integer> {
         } else if (j <= i) {
             throw new IllegalArgumentException("Max value of " + s + " must be greater than min (" + i + ")");
         } else {
-            HashSet hashset = Sets.newHashSet();
+            Set hashset = Sets.newConcurrentHashSet();
 
             for (int k = i; k <= j; ++k) {
                 hashset.add(Integer.valueOf(k));
diff --git a/src/main/java/net/minecraft/server/ChunkProviderFlat.java b/src/main/java/net/minecraft/server/ChunkProviderFlat.java
index ea6a00e..0ee15e5 100644
--- a/src/main/java/net/minecraft/server/ChunkProviderFlat.java
+++ b/src/main/java/net/minecraft/server/ChunkProviderFlat.java
@@ -13,7 +13,7 @@ public class ChunkProviderFlat implements ChunkGenerator {
     private final Random b;
     private final IBlockData[] c = new IBlockData[256];
     private final WorldGenFlatInfo d;
-    private final List<StructureGenerator> e = Lists.newArrayList();
+    private final List<StructureGenerator> e = new java.util.concurrent.CopyOnWriteArrayList<StructureGenerator>();
     private final boolean f;
     private final boolean g;
     private WorldGenLakes h;
diff --git a/src/main/java/net/minecraft/server/CommandScoreboard.java b/src/main/java/net/minecraft/server/CommandScoreboard.java
index 6b2a1a0..b99aa44 100644
--- a/src/main/java/net/minecraft/server/CommandScoreboard.java
+++ b/src/main/java/net/minecraft/server/CommandScoreboard.java
@@ -6,7 +6,6 @@ import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collection;
 import java.util.Collections;
-import java.util.HashSet;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
@@ -471,8 +470,8 @@ public class CommandScoreboard extends CommandAbstract {
     protected void f(ICommandListener icommandlistener, String[] astring, int i, MinecraftServer minecraftserver) throws CommandException {
         Scoreboard scoreboard = this.a(minecraftserver);
         String s = astring[i++];
-        HashSet hashset = Sets.newHashSet();
-        HashSet hashset1 = Sets.newHashSet();
+        Set hashset = Sets.newConcurrentHashSet();
+        Set hashset1 = Sets.newConcurrentHashSet();
         String s1;
 
         if (icommandlistener instanceof EntityHuman && i == astring.length) {
@@ -524,8 +523,8 @@ public class CommandScoreboard extends CommandAbstract {
 
     protected void g(ICommandListener icommandlistener, String[] astring, int i, MinecraftServer minecraftserver) throws CommandException {
         Scoreboard scoreboard = this.a(minecraftserver);
-        HashSet hashset = Sets.newHashSet();
-        HashSet hashset1 = Sets.newHashSet();
+        Set hashset = Sets.newConcurrentHashSet();
+        Set hashset1 = Sets.newConcurrentHashSet();
         String s;
 
         if (icommandlistener instanceof EntityHuman && i == astring.length) {
diff --git a/src/main/java/net/minecraft/server/CommandSpreadPlayers.java b/src/main/java/net/minecraft/server/CommandSpreadPlayers.java
index 8aabe69..7980fed 100644
--- a/src/main/java/net/minecraft/server/CommandSpreadPlayers.java
+++ b/src/main/java/net/minecraft/server/CommandSpreadPlayers.java
@@ -6,9 +6,9 @@ import com.google.common.collect.Sets;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.HashMap;
-import java.util.HashSet;
 import java.util.Iterator;
 import java.util.List;
+import java.util.Set;
 import java.util.Random;
 import javax.annotation.Nullable;
 
@@ -93,7 +93,7 @@ public class CommandSpreadPlayers extends CommandAbstract {
     }
 
     private int b(List<Entity> list) {
-        HashSet hashset = Sets.newHashSet();
+        Set hashset = Sets.newConcurrentHashSet();
         Iterator iterator = list.iterator();
 
         while (iterator.hasNext()) {
diff --git a/src/main/java/net/minecraft/server/Container.java b/src/main/java/net/minecraft/server/Container.java
index abe26d7..cc292c0 100644
--- a/src/main/java/net/minecraft/server/Container.java
+++ b/src/main/java/net/minecraft/server/Container.java
@@ -9,6 +9,7 @@ import java.util.Set;
 import javax.annotation.Nullable;
 import java.util.Queue;
 import java.util.concurrent.ConcurrentLinkedQueue;
+import java.util.concurrent.ConcurrentHashMap;
 
 // CraftBukkit start
 import java.util.HashMap;
@@ -161,7 +162,7 @@ public abstract class Container {
                     k = playerinventory.getCarried().count;
                     Iterator iterator = this.h.iterator();
 
-                    Map<Integer, ItemStack> draggedSlots = new HashMap<Integer, ItemStack>(); // CraftBukkit - Store slots from drag in map (raw slot id -> new stack)
+                    Map<Integer, ItemStack> draggedSlots = new ConcurrentHashMap<Integer, ItemStack>(); // CraftBukkit - Store slots from drag in map (raw slot id -> new stack)
                     while (iterator.hasNext()) {
                         Slot slot1 = (Slot) iterator.next();
 
@@ -188,7 +189,7 @@ public abstract class Container {
                     InventoryView view = getBukkitView();
                     org.bukkit.inventory.ItemStack newcursor = CraftItemStack.asCraftMirror(itemstack1);
                     newcursor.setAmount(k);
-                    Map<Integer, org.bukkit.inventory.ItemStack> eventmap = new HashMap<Integer, org.bukkit.inventory.ItemStack>();
+                    Map<Integer, org.bukkit.inventory.ItemStack> eventmap = new ConcurrentHashMap<Integer, org.bukkit.inventory.ItemStack>();
                     for (Map.Entry<Integer, ItemStack> ditem : draggedSlots.entrySet()) {
                         eventmap.put(ditem.getKey(), CraftItemStack.asBukkitCopy(ditem.getValue()));
                     }
diff --git a/src/main/java/net/minecraft/server/CrashReport.java b/src/main/java/net/minecraft/server/CrashReport.java
index 07e8bb9..92dc3c7 100644
--- a/src/main/java/net/minecraft/server/CrashReport.java
+++ b/src/main/java/net/minecraft/server/CrashReport.java
@@ -22,7 +22,7 @@ public class CrashReport {
     private final String b;
     private final Throwable c;
     private final CrashReportSystemDetails d = new CrashReportSystemDetails(this, "System Details");
-    private final List<CrashReportSystemDetails> e = Lists.newArrayList();
+    private final List<CrashReportSystemDetails> e = new java.util.concurrent.CopyOnWriteArrayList<CrashReportSystemDetails>();
     private File f;
     private boolean g = true;
     private StackTraceElement[] h = new StackTraceElement[0];
diff --git a/src/main/java/net/minecraft/server/EnderDragonBattle.java b/src/main/java/net/minecraft/server/EnderDragonBattle.java
index e97070b..b913de3 100644
--- a/src/main/java/net/minecraft/server/EnderDragonBattle.java
+++ b/src/main/java/net/minecraft/server/EnderDragonBattle.java
@@ -7,9 +7,9 @@ import com.google.common.collect.DiscreteDomain;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Range;
 import com.google.common.collect.Sets;
+import java.util.Set;
 import java.util.ArrayList;
 import java.util.Collections;
-import java.util.HashSet;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Random;
@@ -41,7 +41,7 @@ public class EnderDragonBattle {
 
     public EnderDragonBattle(WorldServer worldserver, NBTTagCompound nbttagcompound) {
         this.c = (BossBattleServer) (new BossBattleServer(new ChatMessage("entity.EnderDragon.name", new Object[0]), BossBattle.BarColor.PINK, BossBattle.BarStyle.PROGRESS)).setPlayMusic(true).c(true);
-        this.e = Lists.newArrayList();
+        this.e = new java.util.concurrent.CopyOnWriteArrayList<Integer>();
         this.g = 0;
         this.h = 0;
         this.i = 0;
@@ -289,7 +289,7 @@ public class EnderDragonBattle {
     }
 
     private void j() {
-        HashSet hashset = Sets.newHashSet();
+        Set hashset = Sets.newConcurrentHashSet();
         Iterator iterator = this.d.b(EntityPlayer.class, EnderDragonBattle.b).iterator();
 
         while (iterator.hasNext()) {
@@ -299,7 +299,7 @@ public class EnderDragonBattle {
             hashset.add(entityplayer);
         }
 
-        HashSet hashset1 = Sets.newHashSet(this.c.getPlayers());
+        Set hashset1 = Sets.newConcurrentHashSet(this.c.getPlayers());
 
         hashset1.removeAll(hashset);
         Iterator iterator1 = hashset1.iterator();
diff --git a/src/main/java/net/minecraft/server/Entity.java b/src/main/java/net/minecraft/server/Entity.java
index 8da127f..71e4154 100644
--- a/src/main/java/net/minecraft/server/Entity.java
+++ b/src/main/java/net/minecraft/server/Entity.java
@@ -5,7 +5,6 @@ import com.google.common.collect.Lists;
 import com.google.common.collect.Sets;
 import java.util.Collection;
 import java.util.Collections;
-import java.util.HashSet;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Random;
@@ -194,7 +193,7 @@ public abstract class Entity implements ICommandListener, org.spigotmc.Optimized
 
     public Entity(World world) {
         this.id = Entity.entityCount++;
-        this.passengers = Lists.newArrayList();
+        this.passengers = new java.util.concurrent.CopyOnWriteArrayList<Entity>();
         this.boundingBox = Entity.b;
         this.width = 0.6F;
         this.length = 1.8F;
@@ -206,7 +205,7 @@ public abstract class Entity implements ICommandListener, org.spigotmc.Optimized
         this.ar = this.uniqueID.toString();
         this.aE = new CommandObjectiveExecutor();
         this.aF = Lists.newArrayList();
-        this.aG = Sets.newHashSet();
+        this.aG = Sets.newConcurrentHashSet();
         this.world = world;
         this.setPosition(0.0D, 0.0D, 0.0D);
         if (world != null) {
@@ -406,7 +405,7 @@ public abstract class Entity implements ICommandListener, org.spigotmc.Optimized
             this.world.methodProfiler.b();
         }
 
-		// us_task = new U_sub(); // Torch - removed to the head
+		U_sub us_task = new U_sub(); // Torch - removed to the head
         us_task.fork();
 		// Hose start
 		/*
@@ -455,9 +454,8 @@ public abstract class Entity implements ICommandListener, org.spigotmc.Optimized
     }
 	
 	// Hose start
-	U_sub us_task = new U_sub(); // Hose - fork // Torch - fix leak
-	U u_task = new U(); // Hose - fork // Torch - fix leak
 	public void U() {
+		U u_task = new U();
         u_task.fork();
     }
 	// Hose end
@@ -878,14 +876,7 @@ public abstract class Entity implements ICommandListener, org.spigotmc.Optimized
         // org.bukkit.craftbukkit.SpigotTimings.entityMoveTimer.stopTiming(); // Spigot
     }
     
-    TE_Pool te_task;
     public void move(double d0, double d1, double d2) {
-        /*double[] pos = {d0, d1, d2};
-        SpigotWorldConfig.entity_move.put(this, pos);*/
-        /*
-        m_task = new move(d0, d1, d2);
-        SpigotWorldConfig.move_forks.add(m_task);*/
-        //m_task.fork();
 
         // org.bukkit.craftbukkit.SpigotTimings.entityMoveTimer.startTiming(); // Spigot
         if (this.noclip) {
@@ -973,9 +964,6 @@ public abstract class Entity implements ICommandListener, org.spigotmc.Optimized
             }
 
             List list = this.world.getCubes(this, this.getBoundingBox().a(d0, d1, d2));
-            /*te_task = new TE_Pool(this, d0, d1, d2);
-            te_task.fork();
-            List list = te_task.join(); */
             
             AxisAlignedBB axisalignedbb = this.getBoundingBox();
             int i = 0;
@@ -1016,9 +1004,7 @@ public abstract class Entity implements ICommandListener, org.spigotmc.Optimized
                 this.a(axisalignedbb);
                 d1 = (double) this.P;
                 List list1 = this.world.getCubes(this, this.getBoundingBox().a(d6, d1, d8));
-                /*te_task = new TE_Pool(this, d6, d1, d8);
-                te_task.fork();
-                List list1 = te_task.join();*/ 
+
                 AxisAlignedBB axisalignedbb2 = this.getBoundingBox();
                 AxisAlignedBB axisalignedbb3 = axisalignedbb2.a(d6, 0.0D, d8);
 
@@ -1646,9 +1632,8 @@ public abstract class Entity implements ICommandListener, org.spigotmc.Optimized
         }
     }
 	
-    collide c_task;
     public void collide(Entity entity) { // Hose - fork it
-        c_task = new collide(entity);
+		collide c_task = new collide(entity);
         c_task.fork();
     }
 
@@ -2980,14 +2965,14 @@ public abstract class Entity implements ICommandListener, org.spigotmc.Optimized
     }
 
     public Collection<Entity> bw() {
-        HashSet hashset = Sets.newHashSet();
+        Set hashset = Sets.newConcurrentHashSet();
 
         this.a(Entity.class, (Set) hashset);
         return hashset;
     }
 
     public <T extends Entity> Collection<T> b(Class<T> oclass) {
-        HashSet hashset = Sets.newHashSet();
+        Set hashset = Sets.newConcurrentHashSet();
 
         this.a(oclass, (Set) hashset);
         return hashset;
diff --git a/src/main/java/net/minecraft/server/EntityPlayer.java b/src/main/java/net/minecraft/server/EntityPlayer.java
index 9db9d68..76e5188 100644
--- a/src/main/java/net/minecraft/server/EntityPlayer.java
+++ b/src/main/java/net/minecraft/server/EntityPlayer.java
@@ -5,12 +5,13 @@ import com.google.common.collect.Sets;
 import com.mojang.authlib.GameProfile;
 import io.netty.buffer.Unpooled;
 import java.util.Collection;
-import java.util.HashSet;
 import java.util.Iterator;
 import java.util.List;
+import java.util.Set;
 import javax.annotation.Nullable;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import com.google.common.collect.Sets;
 
 // CraftBukkit start
 import org.bukkit.Bukkit;
@@ -358,7 +359,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
 
         achievementset.add(s);
         if (this.getStatisticManager().b(AchievementList.L) && achievementset.size() >= BiomeBase.i.size()) {
-            HashSet hashset = Sets.newHashSet(BiomeBase.i);
+            Set hashset = Sets.newConcurrentHashSet(BiomeBase.i);
             Iterator iterator = achievementset.iterator();
 
             while (iterator.hasNext()) {
diff --git a/src/main/java/net/minecraft/server/EntityPotion.java b/src/main/java/net/minecraft/server/EntityPotion.java
index f04857c..8011a23 100644
--- a/src/main/java/net/minecraft/server/EntityPotion.java
+++ b/src/main/java/net/minecraft/server/EntityPotion.java
@@ -6,6 +6,7 @@ import java.util.List;
 import javax.annotation.Nullable;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import java.util.concurrent.ConcurrentHashMap;
 
 // CraftBukkit start
 import java.util.HashMap;
@@ -117,7 +118,7 @@ public class EntityPotion extends EntityProjectile {
                         List list1 = this.world.a(EntityLiving.class, axisalignedbb);
 
                         // CraftBukkit
-                        HashMap<LivingEntity, Double> affected = new HashMap<LivingEntity, Double>();
+                        ConcurrentHashMap<LivingEntity, Double> affected = new ConcurrentHashMap<LivingEntity, Double>();
 
                         if (!list1.isEmpty()) {
                             Iterator iterator1 = list1.iterator();
diff --git a/src/main/java/net/minecraft/server/EntitySlice.java b/src/main/java/net/minecraft/server/EntitySlice.java
index ae6c52f..1c3688b 100644
--- a/src/main/java/net/minecraft/server/EntitySlice.java
+++ b/src/main/java/net/minecraft/server/EntitySlice.java
@@ -16,7 +16,7 @@ public class EntitySlice<T> extends AbstractSet<T> {
     private final Map<Class<?>, List<T>> b = Maps.newHashMap();
     private final Set<Class<?>> c = Sets.newIdentityHashSet();
     private final Class<T> d;
-    private final List<T> e = Lists.newArrayList();
+    private final List<T> e = new java.util.concurrent.CopyOnWriteArrayList<T>();
 
     public EntitySlice(Class<T> oclass) {
         this.d = oclass;
diff --git a/src/main/java/net/minecraft/server/EntityTippedArrow.java b/src/main/java/net/minecraft/server/EntityTippedArrow.java
index 88257e6..19e996d 100644
--- a/src/main/java/net/minecraft/server/EntityTippedArrow.java
+++ b/src/main/java/net/minecraft/server/EntityTippedArrow.java
@@ -15,19 +15,19 @@ public class EntityTippedArrow extends EntityArrow {
     public EntityTippedArrow(World world) {
         super(world);
         this.g = Potions.a;
-        this.h = Sets.newHashSet();
+        this.h = Sets.newConcurrentHashSet();
     }
 
     public EntityTippedArrow(World world, double d0, double d1, double d2) {
         super(world, d0, d1, d2);
         this.g = Potions.a;
-        this.h = Sets.newHashSet();
+        this.h = Sets.newConcurrentHashSet();
     }
 
     public EntityTippedArrow(World world, EntityLiving entityliving) {
         super(world, entityliving);
         this.g = Potions.a;
-        this.h = Sets.newHashSet();
+        this.h = Sets.newConcurrentHashSet();
     }
 
     public void a(ItemStack itemstack) {
diff --git a/src/main/java/net/minecraft/server/Explosion.java b/src/main/java/net/minecraft/server/Explosion.java
index 7fc49cb..143fcdb 100644
--- a/src/main/java/net/minecraft/server/Explosion.java
+++ b/src/main/java/net/minecraft/server/Explosion.java
@@ -3,7 +3,6 @@ package net.minecraft.server;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
-import java.util.HashSet;
 import java.util.Set;
 import java.util.Iterator;
 import java.util.List;
@@ -49,24 +48,20 @@ public class Explosion {
         this.b = flag1;
     }
 	
-	/*
-	// Torch start - Fork/Join
-	public void a() {
-		ExplosionTask et_task = new ExplosionTask(this.size);
-		et_task.fork();
-		// this.aI(); // Fire original-method
-		// et_task = null; // Clear leaked
+	// Torch start - add get size method
+	public float getSize() {
+		return this.size;
 	}
 	// Torch end
-	*/
-
-    // public void aI() {
+	
 	public void a() {
+		/* // Torch start - removed to the head
         // CraftBukkit start
         if (this.size < 0.1F) {
             return;
         }
         // CraftBukkit end
+		*/ // Torch end
         Set hashset = Sets.newConcurrentHashSet(); // Torch
         boolean flag = true;
 
@@ -185,18 +180,6 @@ public class Explosion {
 
     }
 	
-	/*
-	// Torch start - Fork/Join
-	public void a(boolean flag) {
-		ExplosionTaskI eti_task = new ExplosionTaskI(flag);
-		eti_task.fork();
-		// this.aI(flag); // Fire orininal-method
-		// eti_task = null; // Clear leaked
-	}
-	// Torch end
-	*/
-
-    // public void aI(boolean flag) {
 	public void a(boolean flag) {
         this.world.a((EntityHuman) null, this.posX, this.posY, this.posZ, SoundEffects.bE, SoundCategory.BLOCKS, 4.0F, (1.0F + (this.world.random.nextFloat() - this.world.random.nextFloat()) * 0.2F) * 0.7F);
         if (this.size >= 2.0F && this.b) {
@@ -411,40 +394,4 @@ public class Explosion {
     }
     // Paper end
 	
-	/*
-    class ExplosionTask extends RecursiveAction {
-		float size;
-
-        ExplosionTask(float size) {
-			// System.out.println("Debug aI method -> ExplosionTask(float size)");
-			this.size = size;
-        }
-		
-        @Override
-        protected void compute() {
-			// System.out.println("Debug aI method -> compute()");
-			if (size < 0.1F) {
-				System.out.println("Debug aI method -> size -> return");
-				return;
-			}
-            aI();
-        }
-    }
-	
-	class ExplosionTaskI extends RecursiveAction {
-		boolean flag;
-                
-        ExplosionTaskI(boolean flag) {
-			// System.out.println("Debug aI method with flag -> ExplosionTaskI(boolean flag)");
-			this.flag = flag;
-        }
-		
-        @Override
-        protected void compute() {
-			// System.out.println("Debug aI method with flag -> compute()");
-            aI(flag);
-        }
-    }
-	*/
-	
 }
diff --git a/src/main/java/net/minecraft/server/HandshakeListener.java b/src/main/java/net/minecraft/server/HandshakeListener.java
index 0ad8a93..903ce05 100644
--- a/src/main/java/net/minecraft/server/HandshakeListener.java
+++ b/src/main/java/net/minecraft/server/HandshakeListener.java
@@ -2,14 +2,14 @@ package net.minecraft.server;
 
 // CraftBukkit start
 import java.net.InetAddress;
-import java.util.HashMap;
+import java.util.concurrent.ConcurrentHashMap;
 // CraftBukkit end
 
 public class HandshakeListener implements PacketHandshakingInListener {
 
     private static final com.google.gson.Gson gson = new com.google.gson.Gson(); // Spigot // Torch - Use FastJson but keeping legacy name
     // CraftBukkit start - add fields
-    private static final HashMap<InetAddress, Long> throttleTracker = new HashMap<InetAddress, Long>();
+    private static final ConcurrentHashMap<InetAddress, Long> throttleTracker = new ConcurrentHashMap<InetAddress, Long>();
     private static int throttleCounter = 0;
     // CraftBukkit end
 
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index f884925..284ecf9 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -388,7 +388,7 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
 
         // CraftBukkit start - fire WorldLoadEvent and handle whether or not to keep the spawn in memory
         for (WorldServer worldserver : worlds) {
-            MinecraftServer.LOGGER.info("Preparing start region for world: " + worldserver.getWorldData().getName() + "(Seed: " + worldserver.getSeed() + ")");
+            MinecraftServer.LOGGER.info("Preparing start region for world: " + worldserver.getWorldData().getName() + " (Seed: " + worldserver.getSeed() + ")");
 
             if (!worldserver.getWorld().getKeepSpawnInMemory()) {
                 continue;
diff --git a/src/main/java/net/minecraft/server/NameReferencingFileConverter.java b/src/main/java/net/minecraft/server/NameReferencingFileConverter.java
index ede5112..e015242 100644
--- a/src/main/java/net/minecraft/server/NameReferencingFileConverter.java
+++ b/src/main/java/net/minecraft/server/NameReferencingFileConverter.java
@@ -284,7 +284,7 @@ public class NameReferencingFileConverter {
             if (gameprofile != null && gameprofile.getId() != null) {
                 return gameprofile.getId().toString();
             } else if (!minecraftserver.R() && minecraftserver.getOnlineMode()) {
-                final ArrayList arraylist = Lists.newArrayList();
+                final List arraylist = new java.util.concurrent.CopyOnWriteArrayList();
                 ProfileLookupCallback profilelookupcallback = new ProfileLookupCallback() {
                     public void onProfileLookupSucceeded(GameProfile gameprofile) {
                         minecraftserver.getUserCache().a(gameprofile);
diff --git a/src/main/java/net/minecraft/server/NavigationListener.java b/src/main/java/net/minecraft/server/NavigationListener.java
index 5adffb9..fea9ea7 100644
--- a/src/main/java/net/minecraft/server/NavigationListener.java
+++ b/src/main/java/net/minecraft/server/NavigationListener.java
@@ -9,7 +9,7 @@ import java.util.Map.Entry;
 
 public class NavigationListener implements IWorldAccess {
 
-    private final List<NavigationAbstract> a = Lists.newArrayList();
+    private final List<NavigationAbstract> a = new java.util.concurrent.CopyOnWriteArrayList<NavigationAbstract>();
 
     public NavigationListener() {}
 	
diff --git a/src/main/java/net/minecraft/server/Pathfinder.java b/src/main/java/net/minecraft/server/Pathfinder.java
index 25de357..4be7b6a 100644
--- a/src/main/java/net/minecraft/server/Pathfinder.java
+++ b/src/main/java/net/minecraft/server/Pathfinder.java
@@ -1,13 +1,13 @@
 package net.minecraft.server;
 
-import java.util.HashSet;
 import java.util.Set;
 import javax.annotation.Nullable;
+import com.google.common.collect.Sets;
 
 public class Pathfinder {
 
     private final Path a = new Path();
-    private final Set<PathPoint> b = new HashSet();
+    private final Set<PathPoint> b = Sets.newConcurrentHashSet();
     private final PathPoint[] c = new PathPoint[32];
     private final PathfinderAbstract d;
 
@@ -36,18 +36,6 @@ public class Pathfinder {
         this.d.a();
         return pathentity;
     }
-	
-	@Nullable
-    private PathEntity a(IBlockAccess iblockaccess, Entity entity, double d0, double d1, double d2, float f) {
-        this.a.a();
-        this.d.a(iblockaccess, entity);
-        PathPoint pathpoint = this.d.b();
-        PathPoint pathpoint1 = this.d.a(d0, d1, d2);
-        PathEntity pathentity = this.a(pathpoint, pathpoint1, f);
-
-        this.d.a();
-        return pathentity;
-    }
 
     @Nullable
     private PathEntity a(PathPoint pathpoint, PathPoint pathpoint1, float f) {
diff --git a/src/main/java/net/minecraft/server/PathfinderNormal.java b/src/main/java/net/minecraft/server/PathfinderNormal.java
index fa7f8a4..e38b236 100644
--- a/src/main/java/net/minecraft/server/PathfinderNormal.java
+++ b/src/main/java/net/minecraft/server/PathfinderNormal.java
@@ -1,9 +1,10 @@
 package net.minecraft.server;
 
 import java.util.EnumSet;
-import java.util.HashSet;
 import java.util.Iterator;
 import javax.annotation.Nullable;
+import com.google.common.collect.Sets;
+import java.util.Set;
 
 public class PathfinderNormal extends PathfinderAbstract {
 
@@ -48,7 +49,7 @@ public class PathfinderNormal extends PathfinderAbstract {
         PathType pathtype = this.a(this.b, blockposition.getX(), i, blockposition.getZ());
 
         if (this.b.a(pathtype) < 0.0F) {
-            HashSet hashset = new HashSet();
+            Set hashset = Sets.newConcurrentHashSet();
 
             hashset.add(new BlockPosition(this.b.getBoundingBox().a, (double) i, this.b.getBoundingBox().c));
             hashset.add(new BlockPosition(this.b.getBoundingBox().a, (double) i, this.b.getBoundingBox().f));
diff --git a/src/main/java/net/minecraft/server/PersistentVillage.java b/src/main/java/net/minecraft/server/PersistentVillage.java
index 22ee682..96f82de 100644
--- a/src/main/java/net/minecraft/server/PersistentVillage.java
+++ b/src/main/java/net/minecraft/server/PersistentVillage.java
@@ -3,13 +3,14 @@ package net.minecraft.server;
 import com.google.common.collect.Lists;
 import java.util.Iterator;
 import java.util.List;
+import java.util.concurrent.CopyOnWriteArrayList;
 
 public class PersistentVillage extends PersistentBase {
 
     private World world;
-    private final List<BlockPosition> c = Lists.newArrayList();
-    private final List<VillageDoor> d = Lists.newArrayList();
-    private final List<Village> villages = Lists.newArrayList();
+    private final List<BlockPosition> c = new CopyOnWriteArrayList<BlockPosition>();
+    private final List<VillageDoor> d = new CopyOnWriteArrayList<VillageDoor>();
+    private final List<Village> villages = new CopyOnWriteArrayList<Village>();
     private int time;
 
     public PersistentVillage(String s) {
diff --git a/src/main/java/net/minecraft/server/PlayerChunk.java b/src/main/java/net/minecraft/server/PlayerChunk.java
index 36aad24..d51a0e3 100644
--- a/src/main/java/net/minecraft/server/PlayerChunk.java
+++ b/src/main/java/net/minecraft/server/PlayerChunk.java
@@ -16,7 +16,7 @@ public class PlayerChunk {
 
     private static final Logger a = LogManager.getLogger();
     private final PlayerChunkMap playerChunkMap;
-    public final List<EntityPlayer> c = Lists.newArrayList(); // CraftBukkit - public
+    public final List<EntityPlayer> c = new java.util.concurrent.CopyOnWriteArrayList<EntityPlayer>(); // CraftBukkit - public
     private final ChunkCoordIntPair location;
     private final short[] dirtyBlocks = new short[64];
     @Nullable
diff --git a/src/main/java/net/minecraft/server/PlayerChunkMap.java b/src/main/java/net/minecraft/server/PlayerChunkMap.java
index b7e9ef1..210a9ea 100644
--- a/src/main/java/net/minecraft/server/PlayerChunkMap.java
+++ b/src/main/java/net/minecraft/server/PlayerChunkMap.java
@@ -52,7 +52,7 @@ public class PlayerChunkMap {
 	
     private final WorldServer world;
     // TacoSpigot start - catch async access
-    private final List<EntityPlayer> managedPlayers = AsyncCatcher.catchAsyncUsage(Lists.newArrayList(), "list access PlayerChunkMap.managedPlayers");
+    private final List<EntityPlayer> managedPlayers = AsyncCatcher.catchAsyncUsage(new java.util.concurrent.CopyOnWriteArrayList(), "list access PlayerChunkMap.managedPlayers");
     private final Long2ObjectMap<PlayerChunk> e = new Long2ObjectOpenHashMap(4096);
 	// private final Map<Long, PlayerChunk> e = Maps.newConcurrentMap();
     // private final Set<PlayerChunk> f = AsyncCatcher.catchAsyncUsage(Sets.newHashSet(), "set access PlayerChunkMap.f");
diff --git a/src/main/java/net/minecraft/server/PlayerConnection.java b/src/main/java/net/minecraft/server/PlayerConnection.java
index 81fcee5..5ea8b9d 100644
--- a/src/main/java/net/minecraft/server/PlayerConnection.java
+++ b/src/main/java/net/minecraft/server/PlayerConnection.java
@@ -20,8 +20,10 @@ import net.md_5.bungee.api.chat.BaseComponent;
 import net.md_5.bungee.api.chat.TextComponent;
 import io.netty.util.AttributeKey; // Torch
 
-// CraftBukkit start
+import com.google.common.collect.Sets;
 import java.util.HashSet;
+
+// CraftBukkit start
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
 import org.bukkit.Location;
@@ -144,7 +146,7 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
     public CraftPlayer getPlayer() {
         return (this.player == null) ? null : (CraftPlayer) this.player.getBukkitEntity();
     }
-    private final static HashSet<Integer> invalidItems = new HashSet<Integer>(java.util.Arrays.asList(8, 9, 10, 11, 26, 34, 36, 43, 51, 52, 55, 59, 60, 62, 63, 64, 68, 71, 74, 75, 83, 90, 92, 93, 94, 104, 105, 115, 117, 118, 119, 125, 127, 132, 140, 141, 142, 144)); // TODO: Check after every update.
+    private final static Set<Integer> invalidItems = new HashSet<Integer>(java.util.Arrays.asList(8, 9, 10, 11, 26, 34, 36, 43, 51, 52, 55, 59, 60, 62, 63, 64, 68, 71, 74, 75, 83, 90, 92, 93, 94, 104, 105, 115, 117, 118, 119, 125, 127, 132, 140, 141, 142, 144)); // TODO: Check after every update.
     // CraftBukkit end
 
     public void c() {
diff --git a/src/main/java/net/minecraft/server/PlayerList.java b/src/main/java/net/minecraft/server/PlayerList.java
index 2d0c633..36fc983 100644
--- a/src/main/java/net/minecraft/server/PlayerList.java
+++ b/src/main/java/net/minecraft/server/PlayerList.java
@@ -10,14 +10,15 @@ import java.net.SocketAddress;
 import java.text.SimpleDateFormat;
 import java.util.ArrayList;
 import java.util.Collection;
-import java.util.HashSet;
 import java.util.Iterator;
 import java.util.List;
+import java.util.Set;
 import java.util.Map;
 import java.util.UUID;
 import javax.annotation.Nullable;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import com.google.common.collect.Sets;
 
 // CraftBukkit start
 import org.bukkit.craftbukkit.CraftServer;
@@ -241,7 +242,7 @@ public abstract class PlayerList {
     }
 
     public void sendScoreboard(ScoreboardServer scoreboardserver, EntityPlayer entityplayer) {
-        HashSet hashset = Sets.newHashSet();
+        Set hashset = Sets.newConcurrentHashSet();
         Iterator iterator = scoreboardserver.getTeams().iterator();
 
         while (iterator.hasNext()) {
@@ -531,45 +532,8 @@ public abstract class PlayerList {
         return entity;
     }
 
-    public EntityPlayer processLogin(GameProfile gameprofile, EntityPlayer player) { // CraftBukkit - added EntityPlayer
-        /* CraftBukkit startMoved up
-        UUID uuid = EntityHuman.a(gameprofile);
-        ArrayList arraylist = Lists.newArrayList();
-
-        for (int i = 0; i < this.players.size(); ++i) {
-            EntityPlayer entityplayer = (EntityPlayer) this.players.get(i);
-
-            if (entityplayer.getUniqueID().equals(uuid)) {
-                arraylist.add(entityplayer);
-            }
-        }
-
-        EntityPlayer entityplayer1 = (EntityPlayer) this.j.get(gameprofile.getId());
-
-        if (entityplayer1 != null && !arraylist.contains(entityplayer1)) {
-            arraylist.add(entityplayer1);
-        }
-
-        Iterator iterator = arraylist.iterator();
-
-        while (iterator.hasNext()) {
-            EntityPlayer entityplayer2 = (EntityPlayer) iterator.next();
-
-            entityplayer2.playerConnection.disconnect("You logged in from another location");
-        }
-
-        Object object;
-
-        if (this.server.V()) {
-            object = new DemoPlayerInteractManager(this.server.getWorldServer(0));
-        } else {
-            object = new PlayerInteractManager(this.server.getWorldServer(0));
-        }
-
-        return new EntityPlayer(this.server, this.server.getWorldServer(0), gameprofile, (PlayerInteractManager) object);
-        */
+    public EntityPlayer processLogin(GameProfile gameprofile, EntityPlayer player) {
         return player;
-        // CraftBukkit end 
     }
 
     // CraftBukkit start
diff --git a/src/main/java/net/minecraft/server/ScoreboardServer.java b/src/main/java/net/minecraft/server/ScoreboardServer.java
index aa17180..0167ff3 100644
--- a/src/main/java/net/minecraft/server/ScoreboardServer.java
+++ b/src/main/java/net/minecraft/server/ScoreboardServer.java
@@ -11,7 +11,7 @@ import java.util.Set;
 public class ScoreboardServer extends Scoreboard {
 
     private final MinecraftServer a;
-    private final Set<ScoreboardObjective> b = Sets.newHashSet();
+    private final Set<ScoreboardObjective> b = Sets.newConcurrentHashSet();
     private Runnable[] c = new Runnable[0];
 
     public ScoreboardServer(MinecraftServer minecraftserver) {
diff --git a/src/main/java/net/minecraft/server/ServerStatisticManager.java b/src/main/java/net/minecraft/server/ServerStatisticManager.java
index a08eb77..14d79af 100644
--- a/src/main/java/net/minecraft/server/ServerStatisticManager.java
+++ b/src/main/java/net/minecraft/server/ServerStatisticManager.java
@@ -10,7 +10,6 @@ import java.io.File;
 import java.io.IOException;
 import java.lang.reflect.Constructor;
 import java.util.HashMap;
-import java.util.HashSet;
 import java.util.Iterator;
 import java.util.Map;
 import java.util.Set;
@@ -24,7 +23,7 @@ public class ServerStatisticManager extends StatisticManager {
     private static final Logger b = LogManager.getLogger();
     private final MinecraftServer c;
     private final File d;
-    private final Set<Statistic> e = Sets.newHashSet();
+    private final Set<Statistic> e = Sets.newConcurrentHashSet();
     private int f = -300;
     private boolean g = false;
 
@@ -88,7 +87,7 @@ public class ServerStatisticManager extends StatisticManager {
     }
 
     public Set<Statistic> c() {
-        HashSet hashset = Sets.newHashSet(this.e);
+        Set hashset = Sets.newConcurrentHashSet(this.e);
 
         this.e.clear();
         this.g = false;
diff --git a/src/main/java/net/minecraft/server/TileEntityBeacon.java b/src/main/java/net/minecraft/server/TileEntityBeacon.java
index caf42ed..b53940a 100644
--- a/src/main/java/net/minecraft/server/TileEntityBeacon.java
+++ b/src/main/java/net/minecraft/server/TileEntityBeacon.java
@@ -32,8 +32,8 @@ import org.torch.usercache.GameProfileLookup;
 public class TileEntityBeacon extends TileEntityContainer implements ITickable, IWorldInventory {
 
     public static final MobEffectList[][] a = new MobEffectList[][] { { MobEffects.FASTER_MOVEMENT, MobEffects.FASTER_DIG}, { MobEffects.RESISTANCE, MobEffects.JUMP}, { MobEffects.INCREASE_DAMAGE}, { MobEffects.REGENERATION}};
-    private static final Set<MobEffectList> f = Sets.newHashSet();
-    private final List<TileEntityBeacon.BeaconColorTracker> g = Lists.newArrayList();
+    private static final Set<MobEffectList> f = Sets.newConcurrentHashSet();
+    private final List<TileEntityBeacon.BeaconColorTracker> g = new java.util.concurrent.CopyOnWriteArrayList<TileEntityBeacon.BeaconColorTracker>();
     private boolean j;
     private int k = -1;
 	private int levels = 0;
diff --git a/src/main/java/net/minecraft/server/Village.java b/src/main/java/net/minecraft/server/Village.java
index a6b252b..6a4fd0d 100644
--- a/src/main/java/net/minecraft/server/Village.java
+++ b/src/main/java/net/minecraft/server/Village.java
@@ -4,13 +4,13 @@ import com.google.common.collect.Lists;
 import com.mojang.authlib.GameProfile;
 import java.util.Iterator;
 import java.util.List;
-import java.util.TreeMap;
 import java.util.UUID;
+import java.util.concurrent.ConcurrentSkipListMap;
 
 public class Village {
 
     private World a;
-    private final List<VillageDoor> b = Lists.newArrayList();
+    private final List<VillageDoor> b = new java.util.concurrent.CopyOnWriteArrayList<VillageDoor>();
     private BlockPosition c;
     private BlockPosition d;
     private int e;
@@ -18,21 +18,21 @@ public class Village {
     private int g;
     private int h;
     private int i;
-    private TreeMap<String, Integer> j;
+    private ConcurrentSkipListMap<String, Integer> j;
     private List<Village.Aggressor> k;
     private int l;
 
     private Village() { // Paper - Nothing should call this - world needs to be set.
         this.c = BlockPosition.ZERO;
         this.d = BlockPosition.ZERO;
-        this.j = new TreeMap();
+        this.j = new ConcurrentSkipListMap();
         this.k = Lists.newArrayList();
     }
 
     public Village(World world) {
         this.c = BlockPosition.ZERO;
         this.d = BlockPosition.ZERO;
-        this.j = new TreeMap();
+        this.j = new ConcurrentSkipListMap();
         this.k = Lists.newArrayList();
         this.a = world;
     }
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index 85a7962..643540b 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -16,6 +16,8 @@ import java.util.Random;
 import java.util.UUID;
 import javax.annotation.Nullable;
 import java.util.concurrent.RecursiveTask;
+import java.util.concurrent.ConcurrentHashMap;
+import com.google.common.collect.Sets;
 
 import com.destroystokyo.paper.IOStatCommand;
 import com.destroystokyo.paper.PaperConfig;
@@ -40,10 +42,12 @@ import org.bukkit.generator.ChunkGenerator;
 import com.google.common.collect.Queues;
 import java.util.Queue;
 import java.util.concurrent.RecursiveAction;
+import com.google.common.collect.Sets;
 
 // Paper start
 import java.util.Set;
 import com.google.common.collect.Sets;
+import java.util.concurrent.CopyOnWriteArrayList;
 // Paper end
 
 public abstract class World implements IBlockAccess {
@@ -83,10 +87,10 @@ public abstract class World implements IBlockAccess {
     // Spigot end
     protected final Queue<Entity> f = Queues.newConcurrentLinkedQueue();
     //public final List<TileEntity> tileEntityList = Lists.newArrayList(); // Paper - remove unused list
-    public final List<TileEntity> tileEntityListTick = Lists.newArrayList();
+    public final List<TileEntity> tileEntityListTick = new CopyOnWriteArrayList<TileEntity>();
     private final Queue<TileEntity> b = Queues.newConcurrentLinkedQueue();
-    private final Set<TileEntity> tileEntityListUnload = Sets.newHashSet(); // Paper
-    public final List<EntityHuman> players = Lists.newArrayList();
+    private final Set<TileEntity> tileEntityListUnload = Sets.newConcurrentHashSet(); // Paper
+    public final List<EntityHuman> players = new CopyOnWriteArrayList<EntityHuman>();
     public final Queue<Entity> j = Queues.newConcurrentLinkedQueue();
     protected final Map<Integer, Entity> entitiesById = Maps.newConcurrentMap();
     private long I = 16777215L;
@@ -157,7 +161,7 @@ public abstract class World implements IBlockAccess {
     private org.spigotmc.TickLimiter entityLimiter;
     private org.spigotmc.TickLimiter tileLimiter;
     private int tileTickPosition;
-    public final Map<Explosion.CacheKey, Float> explosionDensityCache = new HashMap<>(); // Paper - Optimize explosions
+    public final Map<Explosion.CacheKey, Float> explosionDensityCache = new ConcurrentHashMap<>(); // Paper - Optimize explosions
 	
 	// Paper - Start Peristence counters.
     private long nextPersistenceCountersTick = System.nanoTime();
@@ -1059,10 +1063,9 @@ public abstract class World implements IBlockAccess {
 
     }
 
-	addparticle ap_task; // Hose
     public void addParticle(EnumParticle enumparticle, double d0, double d1, double d2, double d3, double d4, double d5, int... aint) {
         // this.a(enumparticle.c(), enumparticle.e(), d0, d1, d2, d3, d4, d5, aint);
-		ap_task = new addparticle(enumparticle, d0, d1, d2, d3, d4, d5, aint);
+		addparticle ap_task = new addparticle(enumparticle, d0, d1, d2, d3, d4, d5, aint);
         ap_task.fork();
     }
 
@@ -2181,9 +2184,16 @@ public abstract class World implements IBlockAccess {
 
         // explosion.a();
         // explosion.a(true);
-		ExplosionTask et_task = new ExplosionTask(explosion);
-		et_task.fork();
-        return explosion;
+		if (explosion.getSize() < 0.1F) { // First checking size to speedup it
+			IExplosionTask eta_task = new IExplosionTask(explosion);
+			eta_task.fork();
+			return explosion;
+		} else {
+			ExplosionTask et_task = new ExplosionTask(explosion);
+			et_task.fork();
+			return explosion;
+		}
+		
     }
 	
 	class ExplosionTask extends RecursiveAction {
@@ -2199,6 +2209,19 @@ public abstract class World implements IBlockAccess {
             explosion.a(true);
         }
     }
+	
+	class IExplosionTask extends RecursiveAction {
+		Explosion explosion;
+
+        IExplosionTask(Explosion explosion) {
+			this.explosion = explosion;
+        }
+		
+        @Override
+        protected void compute() {
+            explosion.a(true);
+        }
+    }
 
     public float a(Vec3D vec3d, AxisAlignedBB axisalignedbb) {
         double d0 = 1.0D / ((axisalignedbb.d - axisalignedbb.a) * 2.0D + 1.0D);
diff --git a/src/main/java/net/minecraft/server/WorldBorder.java b/src/main/java/net/minecraft/server/WorldBorder.java
index 7ea4046..3b931cc 100644
--- a/src/main/java/net/minecraft/server/WorldBorder.java
+++ b/src/main/java/net/minecraft/server/WorldBorder.java
@@ -6,7 +6,7 @@ import java.util.List;
 
 public class WorldBorder {
 
-    private final List<IWorldBorderListener> a = Lists.newArrayList();
+    private final List<IWorldBorderListener> a = new java.util.concurrent.CopyOnWriteArrayList<IWorldBorderListener>();
     private double b = 0.0D;
     private double c = 0.0D;
     private double d = 6.0E7D;
diff --git a/src/main/java/net/minecraft/server/WorldServer.java b/src/main/java/net/minecraft/server/WorldServer.java
index 8088316..45d2c54 100644
--- a/src/main/java/net/minecraft/server/WorldServer.java
+++ b/src/main/java/net/minecraft/server/WorldServer.java
@@ -13,7 +13,6 @@ import java.util.List;
 import java.util.Map;
 import java.util.Random;
 import java.util.Set;
-import java.util.TreeSet;
 import java.util.UUID;
 import javax.annotation.Nullable;
 import org.apache.logging.log4j.LogManager;
-- 
2.8.2.windows.1

