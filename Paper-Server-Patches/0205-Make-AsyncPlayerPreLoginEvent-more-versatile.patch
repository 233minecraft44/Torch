From fa735113f5eb161afd6c7c18f52705e9610c6aac Mon Sep 17 00:00:00 2001
From: SotrForgotten <i@omc.hk>
Date: Sat, 16 Jul 2016 00:28:18 +0800
Subject: [PATCH] Make AsyncPlayerPreLoginEvent more versatile


diff --git a/src/main/java/net/minecraft/server/LoginListener.java b/src/main/java/net/minecraft/server/LoginListener.java
index efa785f..d448466 100644
--- a/src/main/java/net/minecraft/server/LoginListener.java
+++ b/src/main/java/net/minecraft/server/LoginListener.java
@@ -69,6 +69,12 @@ public class LoginListener implements PacketLoginInListener, ITickable {
     }
 
     public void disconnect(String s) {
+		// Torch start - postpone disconnect until after pre-login event
+        if(!this.preLoginEventFired) {
+            this.disconnectReason = s;
+            return;
+        }
+        // Torch end
         try {
             LoginListener.c.info("Disconnecting " + this.d() + ": " + s);
             ChatComponentText chatcomponenttext = new ChatComponentText(s);
@@ -202,15 +208,13 @@ public class LoginListener implements PacketLoginInListener, ITickable {
                         LoginListener.this.i = LoginListener.this.server.ay().hasJoinedServer(new GameProfile((UUID) null, gameprofile.getName()), s);
                         if (LoginListener.this.i != null) {
                             // CraftBukkit start - fire PlayerPreLoginEvent
-                            if (!networkManager.isConnected()) {
-                                return;
-                            }
-
-                            new LoginHandler().fireEvents();
+                            if (!networkManager.isConnected()) return; // Ensure player is still connected
+							LoginListener.c.info("UUID of player " + LoginListener.this.i.getName() + " is " + LoginListener.this.i.getId());
+                            // new LoginHandler().fireEvents(); // Torch - use our call event
                         } else if (LoginListener.this.server.R()) {
                             LoginListener.c.warn("Failed to verify username but will let them in anyway!");
                             LoginListener.this.i = LoginListener.this.a(gameprofile);
-                            LoginListener.this.g = LoginListener.EnumProtocolState.READY_TO_ACCEPT;
+                            // LoginListener.this.g = LoginListener.EnumProtocolState.READY_TO_ACCEPT;
                         } else {
                             LoginListener.this.disconnect("Failed to verify username!");
                             LoginListener.c.error("Username \'" + gameprofile.getName() + "\' tried to join with an invalid session"); // CraftBukkit - fix null pointer
@@ -219,7 +223,7 @@ public class LoginListener implements PacketLoginInListener, ITickable {
                         if (LoginListener.this.server.R()) {
                             LoginListener.c.warn("Authentication servers are down but will let them in anyway!");
                             LoginListener.this.i = LoginListener.this.a(gameprofile);
-                            LoginListener.this.g = LoginListener.EnumProtocolState.READY_TO_ACCEPT;
+                            // LoginListener.this.g = LoginListener.EnumProtocolState.READY_TO_ACCEPT;
                         } else {
                             LoginListener.this.disconnect("Authentication servers are down. Please try again later, sorry!");
                             LoginListener.c.error("Couldn\'t verify username because servers are unavailable");
@@ -230,10 +234,62 @@ public class LoginListener implements PacketLoginInListener, ITickable {
                         server.server.getLogger().log(java.util.logging.Level.WARNING, "Exception verifying " + gameprofile.getName(), exception);
                         // CraftBukkit end
                     }
+					
+					callPreLoginEvent(); // Torch
                 }
             }).start();
         }
     }
+	
+    private volatile String disconnectReason;
+    private volatile boolean preLoginEventFired;
+
+    void callPreLoginEvent() {
+        String playerName = i.getName();
+        java.net.InetAddress address = ((java.net.InetSocketAddress) networkManager.getSocketAddress()).getAddress();
+        java.util.UUID uniqueId = i.getId();
+        final org.bukkit.craftbukkit.CraftServer server = LoginListener.this.server.server;
+        AsyncPlayerPreLoginEvent asyncEvent = new AsyncPlayerPreLoginEvent(playerName, address, uniqueId);
+
+        if(this.disconnectReason != null) {
+            asyncEvent.disallow(AsyncPlayerPreLoginEvent.Result.KICK_VERIFY, this.disconnectReason);
+        }
+
+        server.getPluginManager().callEvent(asyncEvent);
+        this.preLoginEventFired = true;
+
+        if (PlayerPreLoginEvent.getHandlerList().getRegisteredListeners().length != 0) {
+            final PlayerPreLoginEvent event = new PlayerPreLoginEvent(playerName, address, uniqueId);
+            if (asyncEvent.getResult() != PlayerPreLoginEvent.Result.ALLOWED) {
+                event.disallow(asyncEvent.getResult(), asyncEvent.getKickMessage());
+            }
+            Waitable<PlayerPreLoginEvent.Result> waitable = new Waitable<PlayerPreLoginEvent.Result>() {
+                @Override
+                protected PlayerPreLoginEvent.Result evaluate() {
+                    server.getPluginManager().callEvent(event);
+                    return event.getResult();
+                }};
+
+            LoginListener.this.server.processQueue.add(waitable);
+            try {
+                if (waitable.get() != PlayerPreLoginEvent.Result.ALLOWED) {
+                    disconnect(event.getKickMessage());
+                    return;
+                }
+            } catch(Exception e) {
+                disconnect("Internal server error");
+                server.getLogger().log(java.util.logging.Level.SEVERE, "Exception waiting for PlayerPreLoginEvent while verifying " + playerName, e);
+                return;
+            }
+        } else {
+            if (asyncEvent.getLoginResult() != AsyncPlayerPreLoginEvent.Result.ALLOWED) {
+                disconnect(asyncEvent.getKickMessage());
+                return;
+            }
+        }
+
+        this.g = LoginListener.EnumProtocolState.READY_TO_ACCEPT;
+    }
 
     // Spigot start
     public class LoginHandler {
@@ -272,7 +328,7 @@ public class LoginListener implements PacketLoginInListener, ITickable {
                             }
                             // CraftBukkit end
                             LoginListener.c.info("UUID of player " + LoginListener.this.i.getName() + " is " + LoginListener.this.i.getId());
-                            LoginListener.this.g = LoginListener.EnumProtocolState.READY_TO_ACCEPT;
+                            // LoginListener.this.g = LoginListener.EnumProtocolState.READY_TO_ACCEPT;
                 }
         }
     // Spigot end
diff --git a/src/main/java/org/bukkit/event/player/AsyncPlayerPreLoginEvent.java b/src/main/java/org/bukkit/event/player/AsyncPlayerPreLoginEvent.java
new file mode 100644
index 0000000..1e30736
--- /dev/null
+++ b/src/main/java/org/bukkit/event/player/AsyncPlayerPreLoginEvent.java
@@ -0,0 +1,205 @@
+package org.bukkit.event.player;
+
+import java.net.InetAddress;
+import java.util.UUID;
+
+import org.bukkit.event.Event;
+import org.bukkit.event.HandlerList;
+
+/**
+ * Stores details for players attempting to log in.
+ * <p>
+ * This event is asynchronous, and not run using main thread.
+ */
+public class AsyncPlayerPreLoginEvent extends Event {
+    private static final HandlerList handlers = new HandlerList();
+    private Result result;
+    private String message;
+    private final String name;
+    private final InetAddress ipAddress;
+    private final UUID uniqueId;
+
+    @Deprecated
+    public AsyncPlayerPreLoginEvent(final String name, final InetAddress ipAddress) {
+        this(name, ipAddress, null);
+    }
+
+    public AsyncPlayerPreLoginEvent(final String name, final InetAddress ipAddress, final UUID uniqueId) {
+        super(true);
+        this.result = Result.ALLOWED;
+        this.message = "";
+        this.name = name;
+        this.ipAddress = ipAddress;
+        this.uniqueId = uniqueId;
+    }
+
+    /**
+     * Gets the current result of the login, as an enum
+     *
+     * @return Current Result of the login
+     */
+    public Result getLoginResult() {
+        return result;
+    }
+
+    /**
+     * Gets the current result of the login, as an enum
+     *
+     * @return Current Result of the login
+     * @deprecated This method uses a deprecated enum from {@link
+     *     PlayerPreLoginEvent}
+     * @see #getLoginResult()
+     */
+    @Deprecated
+    public PlayerPreLoginEvent.Result getResult() {
+        return result == null ? null : result.old();
+    }
+
+    /**
+     * Sets the new result of the login, as an enum
+     *
+     * @param result New result to set
+     */
+    public void setLoginResult(final Result result) {
+        this.result = result;
+    }
+
+    /**
+     * Sets the new result of the login, as an enum
+     *
+     * @param result New result to set
+     * @deprecated This method uses a deprecated enum from {@link
+     *     PlayerPreLoginEvent}
+     * @see #setLoginResult(Result)
+     */
+    @Deprecated
+    public void setResult(final PlayerPreLoginEvent.Result result) {
+        this.result = result == null ? null : Result.valueOf(result.name());
+    }
+
+    /**
+     * Gets the current kick message that will be used if getResult() !=
+     * Result.ALLOWED
+     *
+     * @return Current kick message
+     */
+    public String getKickMessage() {
+        return message;
+    }
+
+    /**
+     * Sets the kick message to display if getResult() != Result.ALLOWED
+     *
+     * @param message New kick message
+     */
+    public void setKickMessage(final String message) {
+        this.message = message;
+    }
+
+    /**
+     * Allows the player to log in
+     */
+    public void allow() {
+        result = Result.ALLOWED;
+        message = "";
+    }
+
+    /**
+     * Disallows the player from logging in, with the given reason
+     *
+     * @param result New result for disallowing the player
+     * @param message Kick message to display to the user
+     */
+    public void disallow(final Result result, final String message) {
+        this.result = result;
+        this.message = message;
+    }
+
+    /**
+     * Disallows the player from logging in, with the given reason
+     *
+     * @param result New result for disallowing the player
+     * @param message Kick message to display to the user
+     * @deprecated This method uses a deprecated enum from {@link
+     *     PlayerPreLoginEvent}
+     * @see #disallow(Result, String)
+     */
+    @Deprecated
+    public void disallow(final PlayerPreLoginEvent.Result result, final String message) {
+        this.result = result == null ? null : Result.valueOf(result.name());
+        this.message = message;
+    }
+
+    /**
+     * Gets the player's name.
+     *
+     * @return the player's name
+     */
+    public String getName() {
+        return name;
+    }
+
+    /**
+     * Gets the player IP address.
+     *
+     * @return The IP address
+     */
+    public InetAddress getAddress() {
+        return ipAddress;
+    }
+
+    /**
+     * Gets the player's unique ID.
+     *
+     * @return The unique ID
+     */
+    public UUID getUniqueId() {
+        return uniqueId;
+    }
+
+    @Override
+    public HandlerList getHandlers() {
+        return handlers;
+    }
+
+    public static HandlerList getHandlerList() {
+        return handlers;
+    }
+
+    /**
+     * Basic kick reasons for communicating to plugins
+     */
+    public enum Result {
+
+        /**
+         * The player is allowed to log in
+         */
+        ALLOWED,
+        /**
+         * The player is not allowed to log in, due to the server being full
+         */
+        KICK_FULL,
+        /**
+         * The player is not allowed to log in, due to them being banned
+         */
+        KICK_BANNED,
+        /**
+         * The player is not allowed to log in, due to them not being on the
+         * white list
+         */
+        KICK_WHITELIST,
+        /**
+		* The player's username was not verified with Mojang
+         */
+        KICK_VERIFY,
+        /**
+         * The player is not allowed to log in, for reasons undefined
+         */
+        KICK_OTHER;
+
+        @Deprecated
+        private PlayerPreLoginEvent.Result old() {
+            return PlayerPreLoginEvent.Result.valueOf(name());
+        }
+    }
+}
diff --git a/src/main/java/org/bukkit/event/player/PlayerPreLoginEvent.java b/src/main/java/org/bukkit/event/player/PlayerPreLoginEvent.java
new file mode 100644
index 0000000..71aec72
--- /dev/null
+++ b/src/main/java/org/bukkit/event/player/PlayerPreLoginEvent.java
@@ -0,0 +1,163 @@
+package org.bukkit.event.player;
+
+import java.net.InetAddress;
+import java.util.UUID;
+
+import org.bukkit.Warning;
+import org.bukkit.event.Event;
+import org.bukkit.event.HandlerList;
+
+/**
+ * Stores details for players attempting to log in
+ *
+ * @deprecated This event causes synchronization from the login thread; {@link
+ *     AsyncPlayerPreLoginEvent} is preferred to keep the secondary threads
+ *     asynchronous.
+ */
+@Deprecated
+@Warning(reason="This event causes a login thread to synchronize with the main thread")
+public class PlayerPreLoginEvent extends Event {
+    private static final HandlerList handlers = new HandlerList();
+    private Result result;
+    private String message;
+    private final String name;
+    private final InetAddress ipAddress;
+    private final UUID uniqueId;
+
+    @Deprecated
+    public PlayerPreLoginEvent(final String name, final InetAddress ipAddress) {
+        this(name, ipAddress, null);
+    }
+
+    public PlayerPreLoginEvent(final String name, final InetAddress ipAddress, final UUID uniqueId) {
+        this.result = Result.ALLOWED;
+        this.message = "";
+        this.name = name;
+        this.ipAddress = ipAddress;
+        this.uniqueId = uniqueId;
+    }
+
+    /**
+     * Gets the current result of the login, as an enum
+     *
+     * @return Current Result of the login
+     */
+    public Result getResult() {
+        return result;
+    }
+
+    /**
+     * Sets the new result of the login, as an enum
+     *
+     * @param result New result to set
+     */
+    public void setResult(final Result result) {
+        this.result = result;
+    }
+
+    /**
+     * Gets the current kick message that will be used if getResult() !=
+     * Result.ALLOWED
+     *
+     * @return Current kick message
+     */
+    public String getKickMessage() {
+        return message;
+    }
+
+    /**
+     * Sets the kick message to display if getResult() != Result.ALLOWED
+     *
+     * @param message New kick message
+     */
+    public void setKickMessage(final String message) {
+        this.message = message;
+    }
+
+    /**
+     * Allows the player to log in
+     */
+    public void allow() {
+        result = Result.ALLOWED;
+        message = "";
+    }
+
+    /**
+     * Disallows the player from logging in, with the given reason
+     *
+     * @param result New result for disallowing the player
+     * @param message Kick message to display to the user
+     */
+    public void disallow(final Result result, final String message) {
+        this.result = result;
+        this.message = message;
+    }
+
+    /**
+     * Gets the player's name.
+     *
+     * @return the player's name
+     */
+    public String getName() {
+        return name;
+    }
+
+    /**
+     * Gets the player IP address.
+     *
+     * @return The IP address
+     */
+    public InetAddress getAddress() {
+        return ipAddress;
+    }
+
+    @Override
+    public HandlerList getHandlers() {
+        return handlers;
+    }
+
+    /**
+     * Gets the player's unique ID.
+     *
+     * @return The unique ID
+     */
+    public UUID getUniqueId() {
+        return uniqueId;
+    }
+
+    public static HandlerList getHandlerList() {
+        return handlers;
+    }
+
+    /**
+     * Basic kick reasons for communicating to plugins
+     */
+    public enum Result {
+
+        /**
+         * The player is allowed to log in
+         */
+        ALLOWED,
+        /**
+         * The player is not allowed to log in, due to the server being full
+         */
+        KICK_FULL,
+        /**
+         * The player is not allowed to log in, due to them being banned
+         */
+        KICK_BANNED,
+        /**
+         * The player is not allowed to log in, due to them not being on the
+         * white list
+         */
+        KICK_WHITELIST,
+        /**
+		* The player's username was not verified with Mojang
+         */
+        KICK_VERIFY,
+        /**
+         * The player is not allowed to log in, for reasons undefined
+         */
+        KICK_OTHER
+    }
+}
-- 
2.8.2.windows.1

