From 6824169bfd46d2f96a261e248b97516dd6c97070 Mon Sep 17 00:00:00 2001
From: SotrForgotten <i@omc.hk>
Date: Thu, 4 Aug 2016 03:28:00 +0800
Subject: [PATCH] Lite optimization for redstone, also fixes anti-xray


diff --git a/src/main/java/com/destroystokyo/paper/ItemFilter.java b/src/main/java/com/destroystokyo/paper/ItemFilter.java
deleted file mode 100644
index 33f69ef..0000000
--- a/src/main/java/com/destroystokyo/paper/ItemFilter.java
+++ /dev/null
@@ -1,84 +0,0 @@
-package com.destroystokyo.paper;
-
-import net.minecraft.server.*;
-
-import javax.annotation.Nullable;
-
-public class ItemFilter {
-
-    /**
-     * Checks if the ItemStack passed could be a sketchy head item or block
-     * @param itemStackIn the ItemStack to check
-     * @return whether the item is safe or sketchy
-     */
-    public static boolean isHeadSketchy(@Nullable ItemStack itemStackIn) {
-        if (itemStackIn != null && itemStackIn.getTag() != null) {
-            NBTTagCompound itemTag = itemStackIn.getTag();
-            if (Item.getId(itemStackIn.getItem()) == Item.getId(Items.SKULL) && itemStackIn.getData() == 3) {
-                return isHeadItemSketchy(itemTag);
-            } else if (Item.getId(itemStackIn.getItem()) == Block.getId(Blocks.SKULL)) {
-                return isHeadBlockSketchy(itemTag);
-            }
-
-            // If we can't figure out which is which just run it through both
-            return isHeadItemSketchy(itemTag) || isHeadBlockSketchy(itemTag);
-        }
-        return false;
-    }
-
-    /**
-     * Checks the NBTTagCompound for sketchy data, from the perspective of an Item
-     * @param nbtTagCompound NBTTagCompound from an Item
-     * @return whether the data is safe or sketchy
-     */
-    private static boolean isHeadItemSketchy(NBTTagCompound nbtTagCompound) {
-        if (nbtTagCompound.hasKey("SkullOwner")) {
-            NBTTagCompound skullOwner = nbtTagCompound.getCompound("SkullOwner");
-            if (skullOwner.hasKey("Properties")) {
-                return isHeadNBTSketchy(skullOwner.getCompound("Properties"));
-            }
-        }
-        return false;
-    }
-
-    /**
-     * Checks the NBTTagCompound for sketchy data, from the perspective of a Block
-     * @param nbtTagCompound NBTTagCompound from a Block
-     * @return whether the data is safe or sketchy
-     */
-    private static boolean isHeadBlockSketchy(NBTTagCompound nbtTagCompound) {
-        if (nbtTagCompound.hasKey("Owner")) {
-            NBTTagCompound skullOwner = nbtTagCompound.getCompound("Owner");
-            if (skullOwner.hasKey("Properties")) {
-                return isHeadNBTSketchy(skullOwner.getCompound("Properties"));
-            }
-        }
-        return false;
-    }
-
-    /**
-     * Generified checker for use in both Items and Blocks after some semantics
-     * are done above in the calling methods.
-     * @param properties The generified properties compound from a parent-compound
-     * @return whether the data is safe or sketchy
-     */
-    private static boolean isHeadNBTSketchy(NBTTagCompound properties) {
-        if (properties.hasKey("textures")) {
-            NBTTagList textures = properties.getList("textures", 10);
-            for (NBTBase texture : textures.list) {
-                if (texture instanceof NBTTagCompound) {
-                    if (!((NBTTagCompound) texture).hasKey("Signature")) {
-                        // Check
-                        if (((NBTTagCompound) texture).hasKey("Value")) {
-                            if (((NBTTagCompound) texture).getString("Value").trim().length() > 0) {
-                                return false;
-                            }
-                        }
-                        return true;
-                    }
-                }
-            }
-        }
-        return false;
-    }
-}
\ No newline at end of file
diff --git a/src/main/java/com/destroystokyo/paper/antixray/AntiXray.java b/src/main/java/com/destroystokyo/paper/antixray/AntiXray.java
index 4f6b4d9..45f2427 100644
--- a/src/main/java/com/destroystokyo/paper/antixray/AntiXray.java
+++ b/src/main/java/com/destroystokyo/paper/antixray/AntiXray.java
@@ -135,13 +135,17 @@ public class AntiXray {
             long currentData = dataBitsArray[0];
             // Write the length of the dataBits-array to the packet as it is in vanilla
             packetDataSerializer.d(dataBitsArray.length);
-            int xMin = nearbyChunks[0] == null ? 1 : 0;
-            int xMax = nearbyChunks[1] == null ? 15 : 16;
-            int zMin = nearbyChunks[2] == null ? 1 : 0;
-            int zMax = nearbyChunks[3] == null ? 15 : 16;
+            // Optimization: Don't try to obfuscate edge blocks of this section if neighbor sections are not loaded or don't exist
+            // We can also add a check for ChunkSection#nonEmptyBlockCount == 0 here
+            int xMin = nearbyChunks[0] == null || nearbyChunks[0].getSections()[chunkY] == Chunk.a ? 1 : 0;
+            int xMax = nearbyChunks[1] == null || nearbyChunks[1].getSections()[chunkY] == Chunk.a ? 15 : 16;
+            int zMin = nearbyChunks[2] == null || nearbyChunks[2].getSections()[chunkY] == Chunk.a ? 1 : 0;
+            int zMax = nearbyChunks[3] == null || nearbyChunks[3].getSections()[chunkY] == Chunk.a ? 15 : 16;
+            int yMin = chunkY == 0 || chunk.getSections()[chunkY - 1] == Chunk.a ? 1 : 0;
+            int yMax = chunkY == chunk.getSections().length - 1 || chunk.getSections()[chunkY + 1] == Chunk.a ? 15 : 16;
             // Write the dataBits-array to the packet
             // Work through all blocks in the chunkSection
-            for (int y = 0; y < 16; y++) {
+            for (int y = yMin; y < yMax; y++) {
                 for (int z = zMin; z < zMax; z++) {
                     // Shift the initial value of x and increment by 3 in engine mode 3
                     int x;
diff --git a/src/main/java/net/minecraft/server/BlockButtonAbstract.java b/src/main/java/net/minecraft/server/BlockButtonAbstract.java
index 04cff3d..f7b3cce 100644
--- a/src/main/java/net/minecraft/server/BlockButtonAbstract.java
+++ b/src/main/java/net/minecraft/server/BlockButtonAbstract.java
@@ -373,35 +373,10 @@ public abstract class BlockButtonAbstract extends BlockDirectional {
         static {
             try {
                 BlockButtonAbstract.SyntheticClass_1.a[EnumDirection.EAST.ordinal()] = 1;
-            } catch (NoSuchFieldError nosuchfielderror) {
-                ;
-            }
-
-            try {
                 BlockButtonAbstract.SyntheticClass_1.a[EnumDirection.WEST.ordinal()] = 2;
-            } catch (NoSuchFieldError nosuchfielderror1) {
-                ;
-            }
-
-            try {
                 BlockButtonAbstract.SyntheticClass_1.a[EnumDirection.SOUTH.ordinal()] = 3;
-            } catch (NoSuchFieldError nosuchfielderror2) {
-                ;
-            }
-
-            try {
                 BlockButtonAbstract.SyntheticClass_1.a[EnumDirection.NORTH.ordinal()] = 4;
-            } catch (NoSuchFieldError nosuchfielderror3) {
-                ;
-            }
-
-            try {
                 BlockButtonAbstract.SyntheticClass_1.a[EnumDirection.UP.ordinal()] = 5;
-            } catch (NoSuchFieldError nosuchfielderror4) {
-                ;
-            }
-
-            try {
                 BlockButtonAbstract.SyntheticClass_1.a[EnumDirection.DOWN.ordinal()] = 6;
             } catch (NoSuchFieldError nosuchfielderror5) {
                 ;
diff --git a/src/main/java/net/minecraft/server/BlockDoor.java b/src/main/java/net/minecraft/server/BlockDoor.java
index a6e99a8..1af454b 100644
--- a/src/main/java/net/minecraft/server/BlockDoor.java
+++ b/src/main/java/net/minecraft/server/BlockDoor.java
@@ -312,23 +312,8 @@ public class BlockDoor extends Block {
         static {
             try {
                 BlockDoor.SyntheticClass_1.a[EnumDirection.EAST.ordinal()] = 1;
-            } catch (NoSuchFieldError nosuchfielderror) {
-                ;
-            }
-
-            try {
                 BlockDoor.SyntheticClass_1.a[EnumDirection.SOUTH.ordinal()] = 2;
-            } catch (NoSuchFieldError nosuchfielderror1) {
-                ;
-            }
-
-            try {
                 BlockDoor.SyntheticClass_1.a[EnumDirection.WEST.ordinal()] = 3;
-            } catch (NoSuchFieldError nosuchfielderror2) {
-                ;
-            }
-
-            try {
                 BlockDoor.SyntheticClass_1.a[EnumDirection.NORTH.ordinal()] = 4;
             } catch (NoSuchFieldError nosuchfielderror3) {
                 ;
diff --git a/src/main/java/net/minecraft/server/BlockLever.java b/src/main/java/net/minecraft/server/BlockLever.java
index 8e597b4..d29bd65 100644
--- a/src/main/java/net/minecraft/server/BlockLever.java
+++ b/src/main/java/net/minecraft/server/BlockLever.java
@@ -285,127 +285,31 @@ public class BlockLever extends Block {
 
     static class SyntheticClass_1 {
 
-        static final int[] a;
-        static final int[] b;
-        static final int[] c;
+        static final int[] a = new int[EnumDirection.values().length];
+        static final int[] b = new int[BlockLever.EnumLeverPosition.values().length];
+        static final int[] c = new int[EnumBlockRotation.values().length];
         static final int[] d = new int[EnumDirection.EnumAxis.values().length];
 
         static {
             try {
                 BlockLever.SyntheticClass_1.d[EnumDirection.EnumAxis.X.ordinal()] = 1;
-            } catch (NoSuchFieldError nosuchfielderror) {
-                ;
-            }
-
-            try {
                 BlockLever.SyntheticClass_1.d[EnumDirection.EnumAxis.Z.ordinal()] = 2;
-            } catch (NoSuchFieldError nosuchfielderror1) {
-                ;
-            }
-
-            c = new int[EnumBlockRotation.values().length];
-
-            try {
                 BlockLever.SyntheticClass_1.c[EnumBlockRotation.CLOCKWISE_180.ordinal()] = 1;
-            } catch (NoSuchFieldError nosuchfielderror2) {
-                ;
-            }
-
-            try {
                 BlockLever.SyntheticClass_1.c[EnumBlockRotation.COUNTERCLOCKWISE_90.ordinal()] = 2;
-            } catch (NoSuchFieldError nosuchfielderror3) {
-                ;
-            }
-
-            try {
                 BlockLever.SyntheticClass_1.c[EnumBlockRotation.CLOCKWISE_90.ordinal()] = 3;
-            } catch (NoSuchFieldError nosuchfielderror4) {
-                ;
-            }
-
-            b = new int[BlockLever.EnumLeverPosition.values().length];
-
-            try {
                 BlockLever.SyntheticClass_1.b[BlockLever.EnumLeverPosition.EAST.ordinal()] = 1;
-            } catch (NoSuchFieldError nosuchfielderror5) {
-                ;
-            }
-
-            try {
                 BlockLever.SyntheticClass_1.b[BlockLever.EnumLeverPosition.WEST.ordinal()] = 2;
-            } catch (NoSuchFieldError nosuchfielderror6) {
-                ;
-            }
-
-            try {
                 BlockLever.SyntheticClass_1.b[BlockLever.EnumLeverPosition.SOUTH.ordinal()] = 3;
-            } catch (NoSuchFieldError nosuchfielderror7) {
-                ;
-            }
-
-            try {
                 BlockLever.SyntheticClass_1.b[BlockLever.EnumLeverPosition.NORTH.ordinal()] = 4;
-            } catch (NoSuchFieldError nosuchfielderror8) {
-                ;
-            }
-
-            try {
                 BlockLever.SyntheticClass_1.b[BlockLever.EnumLeverPosition.UP_Z.ordinal()] = 5;
-            } catch (NoSuchFieldError nosuchfielderror9) {
-                ;
-            }
-
-            try {
                 BlockLever.SyntheticClass_1.b[BlockLever.EnumLeverPosition.UP_X.ordinal()] = 6;
-            } catch (NoSuchFieldError nosuchfielderror10) {
-                ;
-            }
-
-            try {
                 BlockLever.SyntheticClass_1.b[BlockLever.EnumLeverPosition.DOWN_X.ordinal()] = 7;
-            } catch (NoSuchFieldError nosuchfielderror11) {
-                ;
-            }
-
-            try {
                 BlockLever.SyntheticClass_1.b[BlockLever.EnumLeverPosition.DOWN_Z.ordinal()] = 8;
-            } catch (NoSuchFieldError nosuchfielderror12) {
-                ;
-            }
-
-            a = new int[EnumDirection.values().length];
-
-            try {
                 BlockLever.SyntheticClass_1.a[EnumDirection.DOWN.ordinal()] = 1;
-            } catch (NoSuchFieldError nosuchfielderror13) {
-                ;
-            }
-
-            try {
                 BlockLever.SyntheticClass_1.a[EnumDirection.UP.ordinal()] = 2;
-            } catch (NoSuchFieldError nosuchfielderror14) {
-                ;
-            }
-
-            try {
                 BlockLever.SyntheticClass_1.a[EnumDirection.NORTH.ordinal()] = 3;
-            } catch (NoSuchFieldError nosuchfielderror15) {
-                ;
-            }
-
-            try {
                 BlockLever.SyntheticClass_1.a[EnumDirection.SOUTH.ordinal()] = 4;
-            } catch (NoSuchFieldError nosuchfielderror16) {
-                ;
-            }
-
-            try {
                 BlockLever.SyntheticClass_1.a[EnumDirection.WEST.ordinal()] = 5;
-            } catch (NoSuchFieldError nosuchfielderror17) {
-                ;
-            }
-
-            try {
                 BlockLever.SyntheticClass_1.a[EnumDirection.EAST.ordinal()] = 6;
             } catch (NoSuchFieldError nosuchfielderror18) {
                 ;
@@ -498,11 +402,8 @@ public class BlockLever extends Block {
 
         static {
             BlockLever.EnumLeverPosition[] ablocklever_enumleverposition = values();
-            int i = ablocklever_enumleverposition.length;
-
-            for (int j = 0; j < i; ++j) {
-                BlockLever.EnumLeverPosition blocklever_enumleverposition = ablocklever_enumleverposition[j];
 
+            for (BlockLever.EnumLeverPosition blocklever_enumleverposition : ablocklever_enumleverposition) {
                 BlockLever.EnumLeverPosition.i[blocklever_enumleverposition.a()] = blocklever_enumleverposition;
             }
 
diff --git a/src/main/java/net/minecraft/server/BlockMinecartDetector.java b/src/main/java/net/minecraft/server/BlockMinecartDetector.java
index 1c25171..1319db0 100644
--- a/src/main/java/net/minecraft/server/BlockMinecartDetector.java
+++ b/src/main/java/net/minecraft/server/BlockMinecartDetector.java
@@ -344,102 +344,28 @@ public class BlockMinecartDetector extends BlockMinecartTrackAbstract {
 
     static class SyntheticClass_1 {
 
-        static final int[] a;
-        static final int[] b;
+        static final int[] a = new int[BlockMinecartTrackAbstract.EnumTrackPosition.values().length];
+        static final int[] b = new int[EnumBlockRotation.values().length];
         static final int[] c = new int[EnumBlockMirror.values().length];
 
         static {
             try {
                 BlockMinecartDetector.SyntheticClass_1.c[EnumBlockMirror.LEFT_RIGHT.ordinal()] = 1;
-            } catch (NoSuchFieldError nosuchfielderror) {
-                ;
-            }
-
-            try {
                 BlockMinecartDetector.SyntheticClass_1.c[EnumBlockMirror.FRONT_BACK.ordinal()] = 2;
-            } catch (NoSuchFieldError nosuchfielderror1) {
-                ;
-            }
-
-            b = new int[EnumBlockRotation.values().length];
-
-            try {
                 BlockMinecartDetector.SyntheticClass_1.b[EnumBlockRotation.CLOCKWISE_180.ordinal()] = 1;
-            } catch (NoSuchFieldError nosuchfielderror2) {
-                ;
-            }
-
-            try {
                 BlockMinecartDetector.SyntheticClass_1.b[EnumBlockRotation.COUNTERCLOCKWISE_90.ordinal()] = 2;
-            } catch (NoSuchFieldError nosuchfielderror3) {
-                ;
-            }
-
-            try {
                 BlockMinecartDetector.SyntheticClass_1.b[EnumBlockRotation.CLOCKWISE_90.ordinal()] = 3;
-            } catch (NoSuchFieldError nosuchfielderror4) {
-                ;
-            }
-
-            a = new int[BlockMinecartTrackAbstract.EnumTrackPosition.values().length];
-
-            try {
                 BlockMinecartDetector.SyntheticClass_1.a[BlockMinecartTrackAbstract.EnumTrackPosition.ASCENDING_EAST.ordinal()] = 1;
-            } catch (NoSuchFieldError nosuchfielderror5) {
-                ;
-            }
-
-            try {
                 BlockMinecartDetector.SyntheticClass_1.a[BlockMinecartTrackAbstract.EnumTrackPosition.ASCENDING_WEST.ordinal()] = 2;
-            } catch (NoSuchFieldError nosuchfielderror6) {
-                ;
-            }
-
-            try {
                 BlockMinecartDetector.SyntheticClass_1.a[BlockMinecartTrackAbstract.EnumTrackPosition.ASCENDING_NORTH.ordinal()] = 3;
-            } catch (NoSuchFieldError nosuchfielderror7) {
-                ;
-            }
-
-            try {
                 BlockMinecartDetector.SyntheticClass_1.a[BlockMinecartTrackAbstract.EnumTrackPosition.ASCENDING_SOUTH.ordinal()] = 4;
-            } catch (NoSuchFieldError nosuchfielderror8) {
-                ;
-            }
-
-            try {
                 BlockMinecartDetector.SyntheticClass_1.a[BlockMinecartTrackAbstract.EnumTrackPosition.SOUTH_EAST.ordinal()] = 5;
-            } catch (NoSuchFieldError nosuchfielderror9) {
-                ;
-            }
-
-            try {
                 BlockMinecartDetector.SyntheticClass_1.a[BlockMinecartTrackAbstract.EnumTrackPosition.SOUTH_WEST.ordinal()] = 6;
-            } catch (NoSuchFieldError nosuchfielderror10) {
-                ;
-            }
-
-            try {
                 BlockMinecartDetector.SyntheticClass_1.a[BlockMinecartTrackAbstract.EnumTrackPosition.NORTH_WEST.ordinal()] = 7;
-            } catch (NoSuchFieldError nosuchfielderror11) {
-                ;
-            }
-
-            try {
                 BlockMinecartDetector.SyntheticClass_1.a[BlockMinecartTrackAbstract.EnumTrackPosition.NORTH_EAST.ordinal()] = 8;
-            } catch (NoSuchFieldError nosuchfielderror12) {
-                ;
-            }
-
-            try {
                 BlockMinecartDetector.SyntheticClass_1.a[BlockMinecartTrackAbstract.EnumTrackPosition.NORTH_SOUTH.ordinal()] = 9;
-            } catch (NoSuchFieldError nosuchfielderror13) {
-                ;
-            }
-
-            try {
                 BlockMinecartDetector.SyntheticClass_1.a[BlockMinecartTrackAbstract.EnumTrackPosition.EAST_WEST.ordinal()] = 10;
-            } catch (NoSuchFieldError nosuchfielderror14) {
+            } catch (NoSuchFieldError nosuchfielderror) {
                 ;
             }
 
diff --git a/src/main/java/net/minecraft/server/BlockRedstoneOre.java b/src/main/java/net/minecraft/server/BlockRedstoneOre.java
index 3117e58..bc8ac2d 100644
--- a/src/main/java/net/minecraft/server/BlockRedstoneOre.java
+++ b/src/main/java/net/minecraft/server/BlockRedstoneOre.java
@@ -97,14 +97,6 @@ public class BlockRedstoneOre extends Block {
 
     public void dropNaturally(World world, BlockPosition blockposition, IBlockData iblockdata, float f, int i) {
         super.dropNaturally(world, blockposition, iblockdata, f, i);
-        /* CraftBukkit start - Delegated to getExpDrop
-        if (this.getDropType(iblockdata, world.random, i) != Item.getItemOf(this)) {
-            int j = 1 + world.random.nextInt(5);
-
-            this.dropExperience(world, blockposition, j);
-        }
-        // */
-
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/server/BlockRedstoneTorch.java b/src/main/java/net/minecraft/server/BlockRedstoneTorch.java
index cf24c45..446b4b8 100644
--- a/src/main/java/net/minecraft/server/BlockRedstoneTorch.java
+++ b/src/main/java/net/minecraft/server/BlockRedstoneTorch.java
@@ -25,8 +25,7 @@ public class BlockRedstoneTorch extends BlockTorch {
             list.add(new BlockRedstoneTorch.RedstoneUpdateInfo(blockposition, world.getTime()));
         }
 
-        int i = 0;
-
+		int i = 0;
         for (int j = 0; j < list.size(); ++j) {
             BlockRedstoneTorch.RedstoneUpdateInfo blockredstonetorch_redstoneupdateinfo = (BlockRedstoneTorch.RedstoneUpdateInfo) list.get(j);
 
@@ -60,11 +59,8 @@ public class BlockRedstoneTorch extends BlockTorch {
             }
             // Paper end
             EnumDirection[] aenumdirection = EnumDirection.values();
-            int i = aenumdirection.length;
-
-            for (int j = 0; j < i; ++j) {
-                EnumDirection enumdirection = aenumdirection[j];
 
+            for (EnumDirection enumdirection : aenumdirection) {
                 world.applyPhysics(blockposition.shift(enumdirection), this);
             }
         }
@@ -80,11 +76,8 @@ public class BlockRedstoneTorch extends BlockTorch {
             }
             // Paper end
             EnumDirection[] aenumdirection = EnumDirection.values();
-            int i = aenumdirection.length;
-
-            for (int j = 0; j < i; ++j) {
-                EnumDirection enumdirection = aenumdirection[j];
 
+            for (EnumDirection enumdirection : aenumdirection) {
                 world.applyPhysics(blockposition.shift(enumdirection), this);
             }
         }
diff --git a/src/main/java/net/minecraft/server/BlockRedstoneWire.java b/src/main/java/net/minecraft/server/BlockRedstoneWire.java
index bc132b3..df04253 100644
--- a/src/main/java/net/minecraft/server/BlockRedstoneWire.java
+++ b/src/main/java/net/minecraft/server/BlockRedstoneWire.java
@@ -18,7 +18,26 @@ public class BlockRedstoneWire extends Block {
     public static final BlockStateEnum<BlockRedstoneWire.EnumRedstoneWireConnection> SOUTH = BlockStateEnum.of("south", BlockRedstoneWire.EnumRedstoneWireConnection.class);
     public static final BlockStateEnum<BlockRedstoneWire.EnumRedstoneWireConnection> WEST = BlockStateEnum.of("west", BlockRedstoneWire.EnumRedstoneWireConnection.class);
     public static final BlockStateInteger POWER = BlockStateInteger.of("power", 0, 15);
-    protected static final AxisAlignedBB[] f = new AxisAlignedBB[] { new AxisAlignedBB(0.1875D, 0.0D, 0.1875D, 0.8125D, 0.0625D, 0.8125D), new AxisAlignedBB(0.1875D, 0.0D, 0.1875D, 0.8125D, 0.0625D, 1.0D), new AxisAlignedBB(0.0D, 0.0D, 0.1875D, 0.8125D, 0.0625D, 0.8125D), new AxisAlignedBB(0.0D, 0.0D, 0.1875D, 0.8125D, 0.0625D, 1.0D), new AxisAlignedBB(0.1875D, 0.0D, 0.0D, 0.8125D, 0.0625D, 0.8125D), new AxisAlignedBB(0.1875D, 0.0D, 0.0D, 0.8125D, 0.0625D, 1.0D), new AxisAlignedBB(0.0D, 0.0D, 0.0D, 0.8125D, 0.0625D, 0.8125D), new AxisAlignedBB(0.0D, 0.0D, 0.0D, 0.8125D, 0.0625D, 1.0D), new AxisAlignedBB(0.1875D, 0.0D, 0.1875D, 1.0D, 0.0625D, 0.8125D), new AxisAlignedBB(0.1875D, 0.0D, 0.1875D, 1.0D, 0.0625D, 1.0D), new AxisAlignedBB(0.0D, 0.0D, 0.1875D, 1.0D, 0.0625D, 0.8125D), new AxisAlignedBB(0.0D, 0.0D, 0.1875D, 1.0D, 0.0625D, 1.0D), new AxisAlignedBB(0.1875D, 0.0D, 0.0D, 1.0D, 0.0625D, 0.8125D), new AxisAlignedBB(0.1875D, 0.0D, 0.0D, 1.0D, 0.0625D, 1.0D), new AxisAlignedBB(0.0D, 0.0D, 0.0D, 1.0D, 0.0625D, 0.8125D), new AxisAlignedBB(0.0D, 0.0D, 0.0D, 1.0D, 0.0625D, 1.0D)};
+	
+    protected static final AxisAlignedBB[] f = new AxisAlignedBB[] {
+		new AxisAlignedBB(0.1875D, 0.0D, 0.1875D, 0.8125D, 0.0625D, 0.8125D), 
+		new AxisAlignedBB(0.1875D, 0.0D, 0.1875D, 0.8125D, 0.0625D, 1.0D), 
+		new AxisAlignedBB(0.0D, 0.0D, 0.1875D, 0.8125D, 0.0625D, 0.8125D), 
+		new AxisAlignedBB(0.0D, 0.0D, 0.1875D, 0.8125D, 0.0625D, 1.0D), 
+		new AxisAlignedBB(0.1875D, 0.0D, 0.0D, 0.8125D, 0.0625D, 0.8125D), 
+		new AxisAlignedBB(0.1875D, 0.0D, 0.0D, 0.8125D, 0.0625D, 1.0D), 
+		new AxisAlignedBB(0.0D, 0.0D, 0.0D, 0.8125D, 0.0625D, 0.8125D), 
+		new AxisAlignedBB(0.0D, 0.0D, 0.0D, 0.8125D, 0.0625D, 1.0D), 
+		new AxisAlignedBB(0.1875D, 0.0D, 0.1875D, 1.0D, 0.0625D, 0.8125D), 
+		new AxisAlignedBB(0.1875D, 0.0D, 0.1875D, 1.0D, 0.0625D, 1.0D), 
+		new AxisAlignedBB(0.0D, 0.0D, 0.1875D, 1.0D, 0.0625D, 0.8125D), 
+		new AxisAlignedBB(0.0D, 0.0D, 0.1875D, 1.0D, 0.0625D, 1.0D), 
+		new AxisAlignedBB(0.1875D, 0.0D, 0.0D, 1.0D, 0.0625D, 0.8125D), 
+		new AxisAlignedBB(0.1875D, 0.0D, 0.0D, 1.0D, 0.0625D, 1.0D), 
+		new AxisAlignedBB(0.0D, 0.0D, 0.0D, 1.0D, 0.0625D, 0.8125D), 
+		new AxisAlignedBB(0.0D, 0.0D, 0.0D, 1.0D, 0.0625D, 1.0D)
+	};
+	
     private boolean g = true;
     private final Set<BlockPosition> B = Sets.newConcurrentHashSet(); private final Set<BlockPosition> blocksToUpdate = B; // Paper - OBFHELPER
 
@@ -206,11 +225,8 @@ public class BlockRedstoneWire extends Block {
 
 
             EnumDirection[] aenumdirection = EnumDirection.values();
-            int i1 = aenumdirection.length;
-
-            for (int j1 = 0; j1 < i1; ++j1) {
-                EnumDirection enumdirection1 = aenumdirection[j1];
 
+            for (EnumDirection enumdirection1 : aenumdirection) {
                 this.B.add(blockposition.shift(enumdirection1));
             }
         }
@@ -283,11 +299,8 @@ public class BlockRedstoneWire extends Block {
         super.remove(world, blockposition, iblockdata);
         if (!world.isClientSide) {
             EnumDirection[] aenumdirection = EnumDirection.values();
-            int i = aenumdirection.length;
-
-            for (int j = 0; j < i; ++j) {
-                EnumDirection enumdirection = aenumdirection[j];
 
+            for (EnumDirection enumdirection : aenumdirection) {
                 world.applyPhysics(blockposition.shift(enumdirection), this);
             }
 
@@ -463,39 +476,17 @@ public class BlockRedstoneWire extends Block {
 
     static class SyntheticClass_1 {
 
-        static final int[] a;
+        static final int[] a = new int[EnumBlockRotation.values().length];
         static final int[] b = new int[EnumBlockMirror.values().length];
 
         static {
             try {
                 BlockRedstoneWire.SyntheticClass_1.b[EnumBlockMirror.LEFT_RIGHT.ordinal()] = 1;
-            } catch (NoSuchFieldError nosuchfielderror) {
-                ;
-            }
-
-            try {
                 BlockRedstoneWire.SyntheticClass_1.b[EnumBlockMirror.FRONT_BACK.ordinal()] = 2;
-            } catch (NoSuchFieldError nosuchfielderror1) {
-                ;
-            }
-
-            a = new int[EnumBlockRotation.values().length];
-
-            try {
                 BlockRedstoneWire.SyntheticClass_1.a[EnumBlockRotation.CLOCKWISE_180.ordinal()] = 1;
-            } catch (NoSuchFieldError nosuchfielderror2) {
-                ;
-            }
-
-            try {
                 BlockRedstoneWire.SyntheticClass_1.a[EnumBlockRotation.COUNTERCLOCKWISE_90.ordinal()] = 2;
-            } catch (NoSuchFieldError nosuchfielderror3) {
-                ;
-            }
-
-            try {
                 BlockRedstoneWire.SyntheticClass_1.a[EnumBlockRotation.CLOCKWISE_90.ordinal()] = 3;
-            } catch (NoSuchFieldError nosuchfielderror4) {
+            } catch (NoSuchFieldError nosuchfielderror) {
                 ;
             }
 
diff --git a/src/main/java/net/minecraft/server/BlockTrapdoor.java b/src/main/java/net/minecraft/server/BlockTrapdoor.java
index 17adbb2..88065de 100644
--- a/src/main/java/net/minecraft/server/BlockTrapdoor.java
+++ b/src/main/java/net/minecraft/server/BlockTrapdoor.java
@@ -165,7 +165,6 @@ public class BlockTrapdoor extends Block {
         case 3:
             return 2;
 
-        case 4:
         default:
             return 3;
         }
@@ -209,28 +208,12 @@ public class BlockTrapdoor extends Block {
         static {
             try {
                 BlockTrapdoor.SyntheticClass_1.a[EnumDirection.NORTH.ordinal()] = 1;
-            } catch (NoSuchFieldError nosuchfielderror) {
-                ;
-            }
-
-            try {
                 BlockTrapdoor.SyntheticClass_1.a[EnumDirection.SOUTH.ordinal()] = 2;
-            } catch (NoSuchFieldError nosuchfielderror1) {
-                ;
-            }
-
-            try {
                 BlockTrapdoor.SyntheticClass_1.a[EnumDirection.WEST.ordinal()] = 3;
-            } catch (NoSuchFieldError nosuchfielderror2) {
-                ;
-            }
-
-            try {
                 BlockTrapdoor.SyntheticClass_1.a[EnumDirection.EAST.ordinal()] = 4;
-            } catch (NoSuchFieldError nosuchfielderror3) {
+            } catch (NoSuchFieldError nosuchfielderror) {
                 ;
             }
-
         }
     }
 
diff --git a/src/main/java/net/minecraft/server/BlockTripwireHook.java b/src/main/java/net/minecraft/server/BlockTripwireHook.java
index 6663b69..fdf0060 100644
--- a/src/main/java/net/minecraft/server/BlockTripwireHook.java
+++ b/src/main/java/net/minecraft/server/BlockTripwireHook.java
@@ -289,25 +289,10 @@ public class BlockTripwireHook extends Block {
         static {
             try {
                 BlockTripwireHook.SyntheticClass_1.a[EnumDirection.EAST.ordinal()] = 1;
-            } catch (NoSuchFieldError nosuchfielderror) {
-                ;
-            }
-
-            try {
                 BlockTripwireHook.SyntheticClass_1.a[EnumDirection.WEST.ordinal()] = 2;
-            } catch (NoSuchFieldError nosuchfielderror1) {
-                ;
-            }
-
-            try {
                 BlockTripwireHook.SyntheticClass_1.a[EnumDirection.SOUTH.ordinal()] = 3;
-            } catch (NoSuchFieldError nosuchfielderror2) {
-                ;
-            }
-
-            try {
                 BlockTripwireHook.SyntheticClass_1.a[EnumDirection.NORTH.ordinal()] = 4;
-            } catch (NoSuchFieldError nosuchfielderror3) {
+            } catch (NoSuchFieldError nosuchfielderror) {
                 ;
             }
 
diff --git a/src/main/java/net/minecraft/server/NetworkManager.java b/src/main/java/net/minecraft/server/NetworkManager.java
index 3d4be7f..5942a4c 100644
--- a/src/main/java/net/minecraft/server/NetworkManager.java
+++ b/src/main/java/net/minecraft/server/NetworkManager.java
@@ -221,11 +221,15 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet<?>> {
                 while (!this.i.isEmpty()) {
                     NetworkManager.QueuedPacket networkmanager_queuedpacket = (NetworkManager.QueuedPacket) this.i.peek(); // Paper - Async-Anti-Xray - poll() -> peek()
 
-                    if (networkmanager_queuedpacket.a instanceof PacketPlayOutMapChunk && !((PacketPlayOutMapChunk) networkmanager_queuedpacket.a).isReady()) { // Paper - Async-Anti-Xray - Return false if the queue contains a not ready chunk packet
-                        return false; // Paper - Aync-Anti-Xray
+					if (networkmanager_queuedpacket != null) { // Paper - Aync-Anti-Xray - Fix NPE (possible vanilla bug caused by handleDisconnection())
+                        if (networkmanager_queuedpacket.a instanceof PacketPlayOutMapChunk && !((PacketPlayOutMapChunk) networkmanager_queuedpacket.a).isReady()) { // Paper - Async-Anti-Xray - Return false if the queue contains a not ready chunk packet
+                            return false; // Paper - Aync-Anti-Xray
+                        } else {
+                            this.i.poll(); // Paper - Async-Anti-Xray - poll() here
+                            this.a(networkmanager_queuedpacket.a, networkmanager_queuedpacket.b);
+                        }
                     } else {
-                        this.i.poll(); // Paper - Async-Anti-Xray - poll() here
-                        this.a(networkmanager_queuedpacket.a, networkmanager_queuedpacket.b);
+                        this.i.poll(); // Paper - Aync-Anti-Xray - The queue is probably empty but if the queue really contains null, remove it to avoid an endless loop
                     }
                 }
             } finally {
diff --git a/src/main/java/net/minecraft/server/PlayerConnection.java b/src/main/java/net/minecraft/server/PlayerConnection.java
index cc95786..4d81044 100644
--- a/src/main/java/net/minecraft/server/PlayerConnection.java
+++ b/src/main/java/net/minecraft/server/PlayerConnection.java
@@ -2053,6 +2053,7 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
                 }
             }
 			
+			/*
 			// Paper start - Block sketchy heads
             if (itemstack != null && (Item.getId(itemstack.getItem()) == Item.getId(Items.SKULL) && itemstack.getData() == 3 || Item.getId(itemstack.getItem()) == Block.getId(Blocks.SKULL))) {
                 if (com.destroystokyo.paper.ItemFilter.isHeadSketchy(itemstack)) {
@@ -2061,6 +2062,7 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
                 }
             }
             // Paper end
+			*/
 
             boolean flag1 = packetplayinsetcreativeslot.a() >= 1 && packetplayinsetcreativeslot.a() <= 45;
             // CraftBukkit - Add invalidItems check
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index c401c50..0a3e6e4 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -561,6 +561,7 @@ public abstract class World implements IBlockAccess {
     }
 
     public void applyPhysics(BlockPosition blockposition, Block block) {
+		this.paperConfig.antiXrayInstance.updateNearbyBlocks(this, blockposition); // Paper - Anti-Xray
         if (captureBlockStates) { return; } // Paper - Cancel all physics during placement
         this.e(blockposition.west(), block);
         this.e(blockposition.east(), block);
@@ -568,7 +569,6 @@ public abstract class World implements IBlockAccess {
         this.e(blockposition.up(), block);
         this.e(blockposition.north(), block);
         this.e(blockposition.south(), block);
-		this.paperConfig.antiXrayInstance.updateNearbyBlocks(this, blockposition); // Paper - Anti-Xray
     }
 
     public void a(BlockPosition blockposition, Block block, EnumDirection enumdirection) {
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java b/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
index 807d6da..95b5e10 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
@@ -136,16 +136,6 @@ public class CraftBlock implements Block {
         IBlockData blockData = getNMSBlock(type).fromLegacyData(data);
         BlockPosition position = new BlockPosition(x, y, z);
 		
-		// Paper start - Unnecessary, root issue is CB TE's fixer getting too involved. Also potential data issues.
-        /*
-		// SPIGOT-611: need to do this to prevent glitchiness. Easier to handle this here (like /setblock) than to fix weirdness in tile entity cleanup
-        // Paper start - If we're setting air, we need to explicitly tell it to send to clients
-        int flag = (type == 0) ? 2 : 0;
-        chunk.getHandle().getWorld().setTypeAndData(position, Blocks.AIR.getBlockData(), flag);
-        // Paper end
-		*/
-        // Paper end
-		
         if (applyPhysics) {
             return chunk.getHandle().getWorld().setTypeAndData(position, blockData, 3);
         } else {
-- 
2.8.2.windows.1

