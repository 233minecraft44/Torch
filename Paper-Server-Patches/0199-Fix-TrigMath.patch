From dac5c8478671e8842986447bfb6b1714930d9b46 Mon Sep 17 00:00:00 2001
From: SotrForgotten <i@omc.hk>
Date: Fri, 29 Jul 2016 04:49:44 +0800
Subject: [PATCH] Fix TrigMath


diff --git a/src/main/java/org/bukkit/craftbukkit/TrigMath.java b/src/main/java/org/bukkit/craftbukkit/TrigMath.java
index 2e33296..ce2c128 100644
--- a/src/main/java/org/bukkit/craftbukkit/TrigMath.java
+++ b/src/main/java/org/bukkit/craftbukkit/TrigMath.java
@@ -1,3 +1,26 @@
+/*
+ * This file is part of Flow Math, licensed under the MIT License (MIT).
+ *
+ * Copyright (c) 2013 Flow Powered <https://flowpowered.com/>
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a copy
+ * of this software and associated documentation files (the "Software"), to deal
+ * in the Software without restriction, including without limitation the rights
+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+ * copies of the Software, and to permit persons to whom the Software is
+ * furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+ * THE SOFTWARE.
+ */
 package org.bukkit.craftbukkit;
 
 /**
@@ -5,51 +28,74 @@ package org.bukkit.craftbukkit;
  * Source: http://stackoverflow.com/questions/4454630/j2me-calculate-the-the-distance-between-2-latitude-and-longitude
  */
 public class TrigMath {
-
-    static final double sq2p1 = 2.414213562373095048802e0;
-    static final double sq2m1 = .414213562373095048802e0;
-    static final double p4 = .161536412982230228262e2;
-    static final double p3 = .26842548195503973794141e3;
-    static final double p2 = .11530293515404850115428136e4;
-    static final double p1 = .178040631643319697105464587e4;
-    static final double p0 = .89678597403663861959987488e3;
-    static final double q4 = .5895697050844462222791e2;
-    static final double q3 = .536265374031215315104235e3;
-    static final double q2 = .16667838148816337184521798e4;
-    static final double q1 = .207933497444540981287275926e4;
-    static final double q0 = .89678597403663861962481162e3;
-    static final double PIO2 = 1.5707963267948966135E0;
-	
-	private static double mxatan(double d) {
-		final double asq = d * d;
-		
-		double value = ((((p4 * asq + p3) * asq + p2) * asq + p1) * asq + p0);
-		value = value / (((((asq + q4) * asq + q3) * asq + q2) * asq + q1) * asq + q0);
-		return value * d;
-	}
+	// Constants
+    public static final double PI = Math.PI;
+    public static final double HALF_PI = PI / 2;
+    // Arc trig
+    private static final double sq2p1 = 2.414213562373095048802;
+    private static final double sq2m1 = 0.414213562373095048802;
+    private static final double p4 = 0.161536412982230228262E2;
+    private static final double p3 = 0.26842548195503973794141E3;
+    private static final double p2 = 0.11530293515404850115428136E4;
+    private static final double p1 = 0.178040631643319697105464587E4;
+    private static final double p0 = 0.89678597403663861959987488E3;
+    private static final double q4 = 0.5895697050844462222791E2;
+    private static final double q3 = 0.536265374031215315104235E3;
+    private static final double q2 = 0.16667838148816337184521798E4;
+    private static final double q1 = 0.207933497444540981287275926E4;
+    private static final double q0 = 0.89678597403663861962481162E3;
 	
+	private static double mxatan(double arg) {
+        final double argsq = arg * arg;
+        double value = ((((p4 * argsq + p3) * argsq + p2) * argsq + p1) * argsq + p0);
+        value /= ((((argsq + q4) * argsq + q3) * argsq + q2) * argsq + q1) * argsq + q0;
+        return value * arg;
+    }
+
     private static double msatan(double arg) {
-        return arg < sq2m1 ? mxatan(arg)
-             : arg > sq2p1 ? PIO2 - mxatan(1 / arg)
-             : PIO2 / 2 + mxatan((arg - 1) / (arg + 1));
+        if (arg < sq2m1) {
+            return mxatan(arg);
+        }
+        if (arg > sq2p1) {
+            return HALF_PI - mxatan(1 / arg);
+        }
+        return HALF_PI / 2 + mxatan((arg - 1) / (arg + 1));
     }
 	
-	public static double atan(double a) {
-		return a > 0 ? msatan(a) : -msatan(-a);
-	}
+	/**
+     * Calculates the arc tangent of the value specified
+     *
+     * @param value of the tangent
+     * @return tangent arc in radians
+     */
+    public static double atan(double value) {
+        if (value > 0) {
+            return msatan(value);
+        } else {
+            return -msatan(-value);
+        }
+    }
 
     /**
-	 * Fast arctangent2 calculation
-	 * 
-	 * @param y
-	 * @param x
-	 * @return rotation from 0,0 in radians
-	 */
-	public static double atan2(double y, double x) {
-		if (y + x == y)
-			return y >= 0 ? PIO2 : -PIO2;
-			y = atan(y / x);
-			return x < 0 ? y <= 0 ? y + Math.PI : y - Math.PI : y;
-	}
+     * Computes the phase theta by computing an arc tangent of y/x<br> Gets the yaw rotation component in radians when looking into the direction specified
+     *
+     * @param y direction
+     * @param x direction
+     * @return tangent arc in radians
+     */
+    public static double atan2(double y, double x) {
+        if (y + x == y) {
+            return y >= 0 ? HALF_PI : -HALF_PI;
+        }
+        y = atan(y / x);
+        if (x < 0) {
+            if (y <= 0) {
+                return y + PI;
+            } else {
+                return y - PI;
+            }
+        }
+        return y;
+    }
 
 }
\ No newline at end of file
-- 
2.8.2.windows.1

