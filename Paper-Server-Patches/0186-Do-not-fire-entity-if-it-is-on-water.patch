From 97e30ba1aeb2433e47343a62c269118366d82b08 Mon Sep 17 00:00:00 2001
From: SotrForgotten <i@omc.hk>
Date: Fri, 29 Jul 2016 07:51:23 +0800
Subject: [PATCH] Do not fire entity if it is on water.


diff --git a/src/main/java/net/minecraft/server/ChunkProviderServer.java b/src/main/java/net/minecraft/server/ChunkProviderServer.java
index b399f6a..67a5547 100644
--- a/src/main/java/net/minecraft/server/ChunkProviderServer.java
+++ b/src/main/java/net/minecraft/server/ChunkProviderServer.java
@@ -182,9 +182,7 @@ public class ChunkProviderServer implements IChunkProvider {
                 ChunkIOExecutor.queueChunkLoad(world, loader, this, i, j, runnable);
                 return null;
             } else {
-                synchronized(this) {
-					chunk = ChunkIOExecutor.syncChunkLoad(world, loader, this, i, j);
-				}
+				chunk = ChunkIOExecutor.syncChunkLoad(world, loader, this, i, j);
             }
         } else if (chunk == null && generate) {
             chunk = originalGetChunkAt(i, j);
diff --git a/src/main/java/net/minecraft/server/Entity.java b/src/main/java/net/minecraft/server/Entity.java
index 71e4154..ac329ce 100644
--- a/src/main/java/net/minecraft/server/Entity.java
+++ b/src/main/java/net/minecraft/server/Entity.java
@@ -850,12 +850,12 @@ public abstract class Entity implements ICommandListener, org.spigotmc.Optimized
                 if (!flag2) {
                     ++this.fireTicks;
                     // CraftBukkit start - Not on fire yet
-                    if (this.fireTicks <= 0) { // Only throw events on the first combust, otherwise it spams
+                    if (this.fireTicks <= 0 && !this.isInWater()) { // Only throw events on the first combust, otherwise it spams // Torch - do not fire entity if it is in water
                         EntityCombustEvent event = new org.bukkit.event.entity.EntityCombustByBlockEvent(null, getBukkitEntity(), 8);
                         world.getServer().getPluginManager().callEvent(event);
 
-                        if (!event.isCancelled()) {
-                            setOnFire(event.getDuration());
+						if (!event.isCancelled()) {
+                            this.setOnFire(event.getDuration());
                         }
                     } else {
                         // CraftBukkit end
@@ -1185,12 +1185,12 @@ public abstract class Entity implements ICommandListener, org.spigotmc.Optimized
                 if (!flag2) {
                     ++this.fireTicks;
                     // CraftBukkit start - Not on fire yet
-                    if (this.fireTicks <= 0) { // Only throw events on the first combust, otherwise it spams
+                    if (this.fireTicks <= 0 && !this.isInWater()) { // Only throw events on the first combust, otherwise it spams // Torch - do not fire entity if it is in water
                         EntityCombustEvent event = new org.bukkit.event.entity.EntityCombustByBlockEvent(null, getBukkitEntity(), 8); // Torch - SPIGOT-2405
                         world.getServer().getPluginManager().callEvent(event);
 
                         if (!event.isCancelled()) {
-                            setOnFire(event.getDuration());
+                            this.setOnFire(event.getDuration());
                         }
                     } else {
                         // CraftBukkit end
@@ -2396,11 +2396,11 @@ public abstract class Entity implements ICommandListener, org.spigotmc.Optimized
         }
         // CraftBukkit end
         ++this.fireTicks;
-        if (this.fireTicks == 0) {
+        if (this.fireTicks == 0 && !this.isInWater()) { // Torch - do not fire entity if it is in water
             // CraftBukkit start - Call a combust event when lightning strikes
             EntityCombustByEntityEvent entityCombustEvent = new EntityCombustByEntityEvent(stormBukkitEntity, thisBukkitEntity, 8);
             pluginManager.callEvent(entityCombustEvent);
-            if (!entityCombustEvent.isCancelled()) {
+			if (!entityCombustEvent.isCancelled()) {
                 this.setOnFire(entityCombustEvent.getDuration());
             }
             // CraftBukkit end
diff --git a/src/main/java/net/minecraft/server/EntityHuman.java b/src/main/java/net/minecraft/server/EntityHuman.java
index 860b1bd..9fd4fb7 100644
--- a/src/main/java/net/minecraft/server/EntityHuman.java
+++ b/src/main/java/net/minecraft/server/EntityHuman.java
@@ -1009,12 +1009,12 @@ public abstract class EntityHuman extends EntityLiving {
 
                     if (entity instanceof EntityLiving) {
                         f3 = ((EntityLiving) entity).getHealth();
-                        if (j > 0 && !entity.isBurning()) {
+                        if (j > 0 && !entity.isBurning() && !entity.isInWater()) { // Torch - do not fire entity if it is in water
                             // CraftBukkit start - Call a combust event when somebody hits with a fire enchanted item
                             EntityCombustByEntityEvent combustEvent = new EntityCombustByEntityEvent(this.getBukkitEntity(), entity.getBukkitEntity(), 1);
                             org.bukkit.Bukkit.getPluginManager().callEvent(combustEvent);
 
-                            if (!combustEvent.isCancelled()) {
+							if (!combustEvent.isCancelled()) {
                                 flag4 = true;
                                 entity.setOnFire(combustEvent.getDuration());
                             }
@@ -1154,12 +1154,12 @@ public abstract class EntityHuman extends EntityLiving {
                             float f5 = f3 - ((EntityLiving) entity).getHealth();
 
                             this.a(StatisticList.y, Math.round(f5 * 10.0F));
-                            if (j > 0) {
+                            if (j > 0 && !entity.isInWater()) { // Torch - do not fire entity if it is in water
                                 // CraftBukkit start - Call a combust event when somebody hits with a fire enchanted item
                                 EntityCombustByEntityEvent combustEvent = new EntityCombustByEntityEvent(this.getBukkitEntity(), entity.getBukkitEntity(), j * 4);
                                 org.bukkit.Bukkit.getPluginManager().callEvent(combustEvent);
 
-                                if (!combustEvent.isCancelled()) {
+								if (!combustEvent.isCancelled()) {
                                     entity.setOnFire(combustEvent.getDuration());
                                 }
                                 // CraftBukkit end
diff --git a/src/main/java/net/minecraft/server/EntityMonster.java b/src/main/java/net/minecraft/server/EntityMonster.java
index ec00edf..2a3ae05 100644
--- a/src/main/java/net/minecraft/server/EntityMonster.java
+++ b/src/main/java/net/minecraft/server/EntityMonster.java
@@ -76,7 +76,7 @@ public abstract class EntityMonster extends EntityCreature implements IMonster {
 
             int j = EnchantmentManager.getFireAspectEnchantmentLevel(this);
 
-            if (j > 0) {
+            if (j > 0 && !entity.isInWater()) { // Torch - do not fire entity if it is in water
                 // CraftBukkit start - Call a combust event when somebody hits with a fire enchanted item
                 EntityCombustByEntityEvent combustEvent = new EntityCombustByEntityEvent(this.getBukkitEntity(), entity.getBukkitEntity(), j * 4);
                 org.bukkit.Bukkit.getPluginManager().callEvent(combustEvent);
diff --git a/src/main/java/net/minecraft/server/EntitySkeleton.java b/src/main/java/net/minecraft/server/EntitySkeleton.java
index 8012877..7598a43 100644
--- a/src/main/java/net/minecraft/server/EntitySkeleton.java
+++ b/src/main/java/net/minecraft/server/EntitySkeleton.java
@@ -103,7 +103,7 @@ public class EntitySkeleton extends EntityMonster implements IRangedEntity {
                     flag = false;
                 }
 
-                if (flag) {
+                if (flag && !this.isInWater()) { // Torch - do not fire entity if it is in water
                     // CraftBukkit start
                     EntityCombustEvent event = new EntityCombustEvent(this.getBukkitEntity(), 8);
                     this.world.getServer().getPluginManager().callEvent(event);
diff --git a/src/main/java/net/minecraft/server/EntityZombie.java b/src/main/java/net/minecraft/server/EntityZombie.java
index 09b1902..ca56a02 100644
--- a/src/main/java/net/minecraft/server/EntityZombie.java
+++ b/src/main/java/net/minecraft/server/EntityZombie.java
@@ -163,7 +163,7 @@ public class EntityZombie extends EntityMonster {
                     flag = false;
                 }
 
-                if (flag) {
+                if (flag && !this.isInWater()) { // Torch - do not fire entity if it is in water
                     // CraftBukkit start
                     EntityCombustEvent event = new EntityCombustEvent(this.getBukkitEntity(), 8);
                     this.world.getServer().getPluginManager().callEvent(event);
@@ -242,7 +242,7 @@ public class EntityZombie extends EntityMonster {
         if (flag) {
             int i = this.world.getDifficulty().a();
 
-            if (this.getItemInMainHand() == null && this.isBurning() && this.random.nextFloat() < (float) i * 0.3F) {
+            if (this.getItemInMainHand() == null && this.isBurning() && this.random.nextFloat() < (float) i * 0.3F && !entity.isInWater()) { // Torch - do not fire entity if it is in water
                 // CraftBukkit start
                 EntityCombustByEntityEvent event = new EntityCombustByEntityEvent(this.getBukkitEntity(), entity.getBukkitEntity(), 2 * i);
                 this.world.getServer().getPluginManager().callEvent(event);
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index bf23f42..3f3feb5 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -828,7 +828,6 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
         if(this.autoSaveOrdered) {
             this.autoSaveNextWorld();
         }
-		 
 		long tickTime = System.nanoTime() - i;
         this.migot.checkTickTime(tickTime);
         // Migot end
@@ -900,14 +899,10 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
 
 		this.cancelHeavyCalculationsForAllWorlds(false); // Migot
 
-        int i;
-
-        for (i = 0; i < this.worlds.size(); ++i) { // CraftBukkit
+        for (WorldServer worldserver : this.worlds) { // CraftBukkit
             long j = System.nanoTime();
 
             // if (i == 0 || this.getAllowNether()) {
-                WorldServer worldserver = this.worlds.get(i);
-				
                 this.methodProfiler.a(worldserver.getWorldData().getName());
                 /* Drop global time updates
                 if (this.ticks % 20 == 0) {
@@ -925,9 +920,9 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
                 try {
                     worldserver.timings.doTick.startTiming(); // Spigot
 					// Torch start
-					Thread worldtick = new Thread(new WorldTickThread(worldserver), "World Ticking Thread");
-                    // worldserver.doTick();
-					worldtick.start(); // do server tick
+					// Thread worldtick = new Thread(new WorldTickThread(worldserver), "World Ticking Thread");
+                    worldserver.doTick();
+					// worldtick.start(); // do server tick
 					// Torch end
                     worldserver.timings.doTick.stopTiming(); // Spigot
                 } catch (Throwable throwable) {
@@ -976,15 +971,20 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
         }
 		
 		this.migot.cancelTimerTask(false); // Migot
-
         this.methodProfiler.c("connection");
+		
         MinecraftTimings.connectionTimer.startTiming(); // Spigot
         this.am().c();
         MinecraftTimings.connectionTimer.stopTiming(); // Spigot
+		
         this.methodProfiler.c("players");
+		
         MinecraftTimings.playerListTimer.startTiming(); // Spigot
-        this.v.tick();
+        // this.v.tick();
+		PlayerListTickTask playerlist_ticktask = new PlayerListTickTask(this.v);
+		playerlist_ticktask.fork();
         MinecraftTimings.playerListTimer.stopTiming(); // Spigot
+		
         this.methodProfiler.c("tickables");
 
         MinecraftTimings.tickablesTimer.startTiming(); // Spigot
@@ -997,8 +997,14 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
         this.methodProfiler.b();
 		processNetworkQueue(); // Paper
     }
-
+	
 	// Torch start
+	class PlayerListTickTask extends RecursiveAction {
+		PlayerList playerlist;
+		PlayerListTickTask(PlayerList playerlist) { this.playerlist = playerlist; }
+        public void compute() { playerlist.tick(); }
+    }
+	
 	class WorldTickThread extends Thread {
 		WorldServer worldserver;
 		WorldTickThread(WorldServer worldserver) {
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index 778d1ce..e08eaa7 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -1688,7 +1688,7 @@ public abstract class World implements IBlockAccess {
             // Paper end
             tickPosition = (tickPosition < entityList.size()) ? tickPosition : 0;
             entity = (Entity) this.entityList.get(this.tickPosition);
-			synchronized(this) { tick_hose(entity); }
+			tick_hose(entity);
             // CraftBukkit end
         }
         guardEntityList = false; // Spigot
@@ -3498,18 +3498,6 @@ public abstract class World implements IBlockAccess {
         return this.B;
     }
 	
-	public class WT_Pool extends RecursiveAction {
-
-        public WT_Pool(){
-            
-        }
-
-        @Override
-        protected void compute() {
-            t();
-        }
-    }
-	
 	class get_en extends RecursiveAction {
         World world;
         @Nullable Entity entity;
diff --git a/src/main/java/net/minecraft/server/WorldServer.java b/src/main/java/net/minecraft/server/WorldServer.java
index e4bf6f4..49812d9 100644
--- a/src/main/java/net/minecraft/server/WorldServer.java
+++ b/src/main/java/net/minecraft/server/WorldServer.java
@@ -251,7 +251,7 @@ public class WorldServer extends World implements IAsyncTaskHandler {
 
         timings.doChunkUnload.startTiming(); // Spigot
         this.methodProfiler.c("chunkSource");
-		synchronized(this) { this.chunkProvider.unloadChunks(); }
+		this.chunkProvider.unloadChunks();
         int j = this.a(1.0F);
 
         if (j != this.af()) {
-- 
2.8.2.windows.1

