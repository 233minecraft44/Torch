From a0fb6b7ff8d4de47a7ca67484d1f7b40eb047591 Mon Sep 17 00:00:00 2001
From: SotrForgotten <i@omc.hk>
Date: Tue, 12 Jul 2016 04:11:46 +0800
Subject: [PATCH] Non Blocking Auto Save


diff --git a/src/main/java/de/minetick/AutoSaveJob.java b/src/main/java/de/minetick/AutoSaveJob.java
new file mode 100644
index 0000000..5531183
--- /dev/null
+++ b/src/main/java/de/minetick/AutoSaveJob.java
@@ -0,0 +1,63 @@
+package de.minetick;
+
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.SpigotTimings;
+import org.bukkit.event.world.WorldSaveEvent;
+
+import net.minecraft.server.ExceptionWorldConflict;
+import net.minecraft.server.FileIOThread;
+import net.minecraft.server.IProgressUpdate;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.RegionFileCache;
+import net.minecraft.server.WorldServer;
+
+public class AutoSaveJob {
+
+    public enum JobDetail {
+        WORLD_SAVE,
+        WORLD_SAVEEVENT,
+    }
+
+    private WorldServer worldserver;
+    private JobDetail jobDetail;
+
+    public AutoSaveJob(JobDetail detail, WorldServer worldserver) {
+        this.jobDetail = detail;
+        this.worldserver = worldserver;
+    }
+
+    /**
+     * 
+     * @return true if the job shall be removed from the autosave queue
+     * @throws ExceptionWorldConflict
+     */
+
+    public boolean process() throws ExceptionWorldConflict {
+        if(this.isJob(JobDetail.WORLD_SAVE) && this.worldserver != null) {
+            SpigotTimings.worldSaveTimer.startTiming();
+            MinecraftServer.getServer().info("[AutoSave] Saving world " + this.worldserver.getWorld().getName());
+            this.worldserver.save(true, (IProgressUpdate) null);
+            FileIOThread.a().setNoDelay(true);
+            SpigotTimings.worldSaveTimer.stopTiming();
+        } else if(this.isJob(JobDetail.WORLD_SAVEEVENT) && this.worldserver != null) {
+            if(FileIOThread.a().isDone()) {
+                SpigotTimings.worldSaveTimer.startTiming();
+                FileIOThread.a().setNoDelay(false);
+                RegionFileCache.a();
+                Bukkit.getPluginManager().callEvent(new WorldSaveEvent(this.worldserver.getWorld()));
+                SpigotTimings.worldSaveTimer.stopTiming();
+            } else {
+                return false;
+            }
+        }
+        this.worldserver = null;
+        return true;
+    }
+
+    private boolean isJob(JobDetail detail) {
+        if(this.jobDetail != null) {
+            return this.jobDetail.equals(detail);
+        }
+        return false;
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/server/FileIOThread.java b/src/main/java/net/minecraft/server/FileIOThread.java
index 113aea2..6238b91 100644
--- a/src/main/java/net/minecraft/server/FileIOThread.java
+++ b/src/main/java/net/minecraft/server/FileIOThread.java
@@ -11,6 +11,16 @@ public class FileIOThread implements Runnable {
     private volatile long c;
     private volatile long d;
     private volatile boolean e;
+	
+	// Migot start
+    public boolean isDone() {
+        return this.c == this.d;
+    }
+
+    public void setNoDelay(boolean active) {
+        this.e = active;
+    }
+    // Migot end
 
     private FileIOThread() {
         Thread thread = new Thread(this, "File IO Thread");
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index b1adaa0..148db07 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -21,6 +21,12 @@ import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 import org.bukkit.craftbukkit.Main;
 
+// Migot start
+import de.minetick.AutoSaveJob;
+import de.minetick.AutoSaveJob.JobDetail;
+import java.util.LinkedList;
+// Migot end
+
 import java.util.Iterator;
 import java.util.LinkedList;
 import java.util.concurrent.RecursiveAction;
@@ -566,6 +572,43 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
     public final RollingAverage tps5 = new RollingAverage(60 * 5);
     public final RollingAverage tps15 = new RollingAverage(60 * 15);
     public double[] recentTps = new double[3]; // Paper - Fine have your darn compat with bad plugins
+	
+	// Migot start
+    private LinkedList<AutoSaveJob> autoSaveWorlds = new LinkedList<AutoSaveJob>();
+    private int autoSaveDelay = 0;
+    private boolean autoSaveOrdered = false;
+
+    private void queueWorldsForAutoSave() {
+        if (!this.N) {
+            this.autoSaveWorlds.clear();
+            for (int j = 0; j < this.worlds.size(); ++j) {
+                WorldServer worldserver = this.worlds.get(j);
+                if(worldserver != null) {
+                    this.autoSaveWorlds.add(new AutoSaveJob(JobDetail.WORLD_SAVE, worldserver));
+                    this.autoSaveWorlds.add(new AutoSaveJob(JobDetail.WORLD_SAVEEVENT, worldserver));
+                }
+            }
+            int queuesize = this.autoSaveWorlds.size() / 2;
+            this.autoSaveDelay = 0;
+            this.autoSaveOrdered = true;
+            this.info("[AutoSave] " + queuesize + " worlds - Starting ...");
+        }
+    }
+
+    private void autoSaveNextWorld() throws ExceptionWorldConflict {
+        if(!this.autoSaveWorlds.isEmpty()) {
+            if(this.autoSaveDelay++ > 20) { // delay of 1 seconds between checks of the auto-save job queue
+                this.autoSaveDelay = 0;
+                if(this.autoSaveWorlds.getFirst().process()) {
+                    this.autoSaveWorlds.removeFirst();
+                }
+            }
+        } else if(this.autoSaveOrdered){
+            this.info("[AutoSave] Done.");
+            this.autoSaveOrdered = false;
+        }
+    }
+    // Migot end
 
     public static class RollingAverage {
         private final int size;
@@ -773,13 +816,19 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
         }
 
         if (autosavePeriod > 0 && this.ticks % autosavePeriod == 0) { // CraftBukkit
-            MinecraftTimings.worldSaveTimer.startTiming(); // Spigot
+            // MinecraftTimings.worldSaveTimer.startTiming(); // Spigot
             this.methodProfiler.a("save");
             this.v.savePlayers();
-            this.saveChunks(true);
+            this.queueWorldsForAutoSave(); // Migot
             this.methodProfiler.b();
-            MinecraftTimings.worldSaveTimer.stopTiming(); // Spigot
+            // MinecraftTimings.worldSaveTimer.stopTiming(); // Spigot
         }
+		
+		// Migot start
+        if(this.autoSaveOrdered) {
+            this.autoSaveNextWorld();
+         }
+        // Migot end
 
         this.methodProfiler.a("tallying");
         this.h[this.ticks % 100] = System.nanoTime() - i;
-- 
2.8.2.windows.1

