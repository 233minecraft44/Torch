From 4696e8bea47b775fe089e3fa4e06643814478eed Mon Sep 17 00:00:00 2001
From: SotrForgotten <i@omc.hk>
Date: Sat, 2 Jul 2016 12:40:20 +0800
Subject: [PATCH] Multi threaded World, miscs


diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index 1321145..733e5eb 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -1,4 +1,4 @@
-	package net.minecraft.server;
+package net.minecraft.server;
 
 import com.destroystokyo.paper.event.server.ServerExceptionEvent;
 import com.destroystokyo.paper.exception.ServerInternalException;
@@ -33,6 +33,10 @@ import org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason;
 import org.bukkit.generator.ChunkGenerator;
 // CraftBukkit end
 
+import com.google.common.collect.Queues;
+import java.util.Queue;
+import java.util.concurrent.RecursiveAction;
+
 // Paper start
 import java.util.Set;
 import com.google.common.collect.Sets;
@@ -43,6 +47,8 @@ public abstract class World implements IBlockAccess {
     private int a = 63;
     protected boolean d;
     // Spigot start - guard entity list from removals
+	public final List<Entity> entityList = Lists.newCopyOnWriteArrayList(); // Hose
+	/*
     public final List<Entity> entityList = new java.util.ArrayList<Entity>()
     {
         @Override
@@ -67,15 +73,16 @@ public abstract class World implements IBlockAccess {
             }
         }
     };
+	*/
     // Spigot end
-    protected final Set<Entity> f = Sets.newHashSet(); // Paper
+    protected final Queue<Entity> f = Queues.newConcurrentLinkedQueue();
     //public final List<TileEntity> tileEntityList = Lists.newArrayList(); // Paper - remove unused list
     public final List<TileEntity> tileEntityListTick = Lists.newArrayList();
-    private final List<TileEntity> b = Lists.newArrayList();
+    private final Queue<TileEntity> b = Queues.newConcurrentLinkedQueue();
     private final Set<TileEntity> tileEntityListUnload = Sets.newHashSet(); // Paper
     public final List<EntityHuman> players = Lists.newArrayList();
-    public final List<Entity> j = Lists.newArrayList();
-    protected final IntHashMap<Entity> entitiesById = new IntHashMap();
+    public final Queue<Entity> j = Queues.newConcurrentLinkedQueue();
+    protected final Map<Integer, Entity> entitiesById = Maps.newConcurrentMap();
     private long I = 16777215L;
     private int J;
     protected int l = (new Random()).nextInt();
@@ -1036,7 +1043,7 @@ public abstract class World implements IBlockAccess {
     }
 
     public boolean addEntity(Entity entity, SpawnReason spawnReason) { // Changed signature, added SpawnReason
-        org.spigotmc.AsyncCatcher.catchOp( "entity add"); // Spigot
+        // org.spigotmc.AsyncCatcher.catchOp( "entity add"); // Spigot
         if (entity == null) return false;
 		if (entity.valid) { MinecraftServer.LOGGER.error("Attempted Double World add on " + entity, new Throwable()); return true; } // Paper
         // CraftBukkit end
@@ -1440,9 +1447,41 @@ public abstract class World implements IBlockAccess {
         this.methodProfiler.a("entities");
         this.methodProfiler.a("global");
 
-        int i;
+        // int i; // Hose
         Entity entity;
 
+		// Hose start
+		Iterator it_j = this.j.iterator();
+        while (it_j.hasNext()) {
+            entity = (Entity) it_j.next();
+            // CraftBukkit start - Fixed an NPE
+            if (entity == null) {
+                continue;
+            }
+            // CraftBukkit end
+
+            try {
+                ++entity.ticksLived;
+                entity.m();
+            } catch (Throwable throwable) {
+                CrashReport crashreport = CrashReport.a(throwable, "Ticking entity");
+                CrashReportSystemDetails crashreportsystemdetails = crashreport.a("Entity being ticked");
+
+                if (entity == null) {
+                    crashreportsystemdetails.a("Entity", (Object) "~~NULL~~");
+                } else {
+                    entity.appendEntityCrashDetails(crashreportsystemdetails);
+                }
+ 
+                throw new ReportedException(crashreport);
+            }
+
+            if (entity.dead) {
+                this.j.remove(entity);
+            }
+        }
+
+		/*
         for (i = 0; i < this.j.size(); ++i) {
             entity = (Entity) this.j.get(i);
             // CraftBukkit start - Fixed an NPE
@@ -1471,13 +1510,34 @@ public abstract class World implements IBlockAccess {
                 this.j.remove(i--);
             }
         }
+		*/
+		// Hose end
 
         this.methodProfiler.c("remove");
         timings.entityRemoval.startTiming(); // Paper
         this.entityList.removeAll(this.f);
 
         int j;
+		int k; // Torch
+		
+		// Hose start
+		// Torch start - Set based removal lists
+		Iterator it = this.f.iterator();
+        while (it.hasNext()) {
+            entity = (Entity) it.next();
+			
+            j = e.getChunkX();
+			k = e.getChunkZ();
+			
+            if (entity.aa && this.isChunkLoaded(j, k, true)) {
+				this.getChunkAt(k, j).b(entity);
+            }
+			
+			this.c(entity)
+        }
+		// Torch end
 
+		/*
         // Paper start - Set based removal lists
         for (Entity e : this.f) {
             j = e.getChunkX();
@@ -1492,6 +1552,8 @@ public abstract class World implements IBlockAccess {
             this.c(e);
         }
         // Paper end
+		*/
+		// Hose end
 
         this.f.clear();
         this.l();
@@ -1640,16 +1702,31 @@ public abstract class World implements IBlockAccess {
 
         this.methodProfiler.c("pendingBlockEntities");
         if (!this.b.isEmpty()) {
-            for (int i1 = 0; i1 < this.b.size(); ++i1) {
-                TileEntity tileentity1 = (TileEntity) this.b.get(i1);
+			// Hose start
+			Iterator itb = this.b.iterator();
+            while (itb.hasNext()) {
+                TileEntity tileentity1 = (TileEntity) itb.next();
 
                 if (!tileentity1.x()) {
-                    /* CraftBukkit start - Order matters, moved down
-                    if (!this.tileEntityList.contains(tileentity1)) {
-                        this.a(tileentity1);
+                    if (this.isLoaded(tileentity1.getPosition())) {
+                        Chunk chunk = this.getChunkAtWorldCoords(tileentity1.getPosition());
+                        IBlockData iblockdata = chunk.getBlockData(tileentity1.getPosition());
+
+                        chunk.a(tileentity1.getPosition(), tileentity1);
+                        // CraftBukkit start
+                        // From above, don't screw this up - SPIGOT-1746
+                        if (true) { // Paper - remove unused list
+                            this.a(tileentity1);
+                        }
+                        // CraftBukkit end
                     }
-                    // CraftBukkit end */
+                }
+            }
+			/*
+            for (int i1 = 0; i1 < this.b.size(); ++i1) {
+                TileEntity tileentity1 = (TileEntity) this.b.get(i1);
 
+                if (!tileentity1.x()) {
                     if (this.isLoaded(tileentity1.getPosition())) {
                         Chunk chunk = this.getChunkAtWorldCoords(tileentity1.getPosition());
                         IBlockData iblockdata = chunk.getBlockData(tileentity1.getPosition());
@@ -1665,6 +1742,8 @@ public abstract class World implements IBlockAccess {
                     }
                 }
             }
+			*/
+			// Hose end
 
             this.b.clear();
         }
@@ -2101,6 +2180,16 @@ public abstract class World implements IBlockAccess {
 
     @Nullable
     private TileEntity F(BlockPosition blockposition) {
+		// Hose start
+		Iterator it = this.b.iterator();
+        while (it.hasNext()) {
+            TileEntity tileentity = (TileEntity) it.next();
+
+            if (!tileentity.x() && tileentity.getPosition().equals(blockposition)) {
+                return tileentity;
+            }
+        }
+		/*
         for (int i = 0; i < this.b.size(); ++i) {
             TileEntity tileentity = (TileEntity) this.b.get(i);
 
@@ -2108,6 +2197,8 @@ public abstract class World implements IBlockAccess {
                 return tileentity;
             }
         }
+		*/
+		// Hose end
 
         return null;
     }
@@ -2205,8 +2296,11 @@ public abstract class World implements IBlockAccess {
         this.allowAnimals = flag1;
     }
 
+	WT_Pool wt_task; // Hose
     public void doTick() {
-        this.t();
+        // this.t();
+		wt_task = new WT_Pool();
+        wt_task.fork();
     }
 
     protected void I() {
@@ -2281,11 +2375,19 @@ public abstract class World implements IBlockAccess {
                 this.o = MathHelper.a(this.o, 0.0F, 1.0F);
 
                 // CraftBukkit start
+				Iterator it = this.players.iterator();
+                while (it.hasNext()) {
+                    if (((EntityPlayer) it.next()).world == this) {
+                        ((EntityPlayer) it.next()).tickWeather();
+                    }
+                }
+				/*
                 for (int idx = 0; idx < this.players.size(); ++idx) {
                     if (((EntityPlayer) this.players.get(idx)).world == this) {
                         ((EntityPlayer) this.players.get(idx)).tickWeather();
                     }
                 }
+				*/
                 // CraftBukkit end
             }
         }
@@ -2669,7 +2771,7 @@ public abstract class World implements IBlockAccess {
 
     public int a(Class<?> oclass) {
         int i = 0;
-        Iterator iterator = this.entityList.iterator();
+        Iterator iterator = Queues.newConcurrentLinkedQueue(this.entityList).iterator();
 
         while (iterator.hasNext()) {
             Entity entity = (Entity) iterator.next();
@@ -3263,4 +3365,17 @@ public abstract class World implements IBlockAccess {
     public LootTableRegistry ak() {
         return this.B;
     }
+	
+	public class WT_Pool extends RecursiveAction {
+
+        public WT_Pool(){
+            
+        }
+
+        @Override
+        protected void compute() {
+            t();
+        }
+    }
+	
 }
-- 
2.8.2.windows.1

