From 9e6df1fee8a82efab05ca85d84a9561508fd3bf2 Mon Sep 17 00:00:00 2001
From: SotrForgotten <i@omc.hk>
Date: Mon, 11 Jul 2016 17:53:30 +0800
Subject: [PATCH] SPIGOT-2376: Way to distinguish Zombie professions, and
 SPIGOT-2404: FALLING_DUST missing data


diff --git a/src/main/java/org/bukkit/Particle.java b/src/main/java/org/bukkit/Particle.java
new file mode 100644
index 0000000..e3fea7c
--- /dev/null
+++ b/src/main/java/org/bukkit/Particle.java
@@ -0,0 +1,72 @@
+package org.bukkit;
+
+import org.bukkit.inventory.ItemStack;
+import org.bukkit.material.MaterialData;
+
+public enum Particle {
+    EXPLOSION_NORMAL,
+    EXPLOSION_LARGE,
+    EXPLOSION_HUGE,
+    FIREWORKS_SPARK,
+    WATER_BUBBLE,
+    WATER_SPLASH,
+    WATER_WAKE,
+    SUSPENDED,
+    SUSPENDED_DEPTH,
+    CRIT,
+    CRIT_MAGIC,
+    SMOKE_NORMAL,
+    SMOKE_LARGE,
+    SPELL,
+    SPELL_INSTANT,
+    SPELL_MOB,
+    SPELL_MOB_AMBIENT,
+    SPELL_WITCH,
+    DRIP_WATER,
+    DRIP_LAVA,
+    VILLAGER_ANGRY,
+    VILLAGER_HAPPY,
+    TOWN_AURA,
+    NOTE,
+    PORTAL,
+    ENCHANTMENT_TABLE,
+    FLAME,
+    LAVA,
+    FOOTSTEP,
+    CLOUD,
+    REDSTONE,
+    SNOWBALL,
+    SNOW_SHOVEL,
+    SLIME,
+    HEART,
+    BARRIER,
+    ITEM_CRACK(ItemStack.class),
+    BLOCK_CRACK(MaterialData.class),
+    BLOCK_DUST(MaterialData.class),
+    WATER_DROP,
+    ITEM_TAKE,
+    MOB_APPEARANCE,
+    DRAGON_BREATH,
+    END_ROD,
+    DAMAGE_INDICATOR,
+    SWEEP_ATTACK,
+	FALLING_DUST(MaterialData.class);
+
+    private final Class<?> dataType;
+
+    Particle() {
+        dataType = Void.class;
+    }
+
+    Particle(Class<?> data) {
+        dataType = data;
+    }
+
+    /**
+     * Returns the required data type for the particle
+     * @return the required data type
+     */
+    public Class<?> getDataType() {
+        return dataType;
+    }
+}
diff --git a/src/main/java/org/bukkit/bukkit/entity/Villager.java b/src/main/java/org/bukkit/bukkit/entity/Villager.java
new file mode 100644
index 0000000..2be0cb0
--- /dev/null
+++ b/src/main/java/org/bukkit/bukkit/entity/Villager.java
@@ -0,0 +1,174 @@
+package org.bukkit.entity;
+
+import java.util.List;
+import org.bukkit.inventory.Inventory;
+import org.bukkit.inventory.InventoryHolder;
+import org.bukkit.inventory.MerchantRecipe;
+
+/**
+ * Represents a villager NPC
+ */
+public interface Villager extends Ageable, NPC, InventoryHolder {
+
+    /**
+     * Gets the current profession of this villager.
+     *
+     * @return Current profession.
+     */
+    public Profession getProfession();
+
+    /**
+     * Sets the new profession of this villager.
+     *
+     * @param profession New profession.
+     */
+    public void setProfession(Profession profession);
+
+    /**
+     * Get a list of trades currently available from this villager.
+     *
+     * @return an immutable list of trades
+     */
+    List<MerchantRecipe> getRecipes();
+
+    /**
+     * Set the list of trades currently available from this villager.
+     * <br>
+     * This will not change the selected trades of players currently trading
+     * with this villager.
+     *
+     * @param recipes a list of recipes
+     */
+    void setRecipes(List<MerchantRecipe> recipes);
+
+    /**
+     * Get the recipe at a certain index of this villager's trade list.
+     *
+     * @param i the index
+     * @return the recipe
+     * @throws IndexOutOfBoundsException
+     */
+    MerchantRecipe getRecipe(int i) throws IndexOutOfBoundsException;
+
+    /**
+     * Set the recipe at a certain index of this villager's trade list.
+     *
+     * @param i the index
+     * @param recipe the recipe
+     * @throws IndexOutOfBoundsException
+     */
+    void setRecipe(int i, MerchantRecipe recipe) throws IndexOutOfBoundsException;
+
+    /**
+     * Get the number of trades this villager currently has available.
+     *
+     * @return the recipe count
+     */
+    int getRecipeCount();
+
+    /**
+     * Gets this villager's inventory.
+     * <br>
+     * Note that this inventory is not the Merchant inventory, rather, it is the
+     * items that a villager might have collected (from harvesting crops, etc.)
+     *
+     * {@inheritDoc}
+     */
+    @Override
+    Inventory getInventory();
+
+    /**
+     * Gets whether this villager is currently trading.
+     *
+     * @return whether the villager is trading
+     */
+    boolean isTrading();
+
+    /**
+     * Gets the player this villager is trading with, or null if it is not
+     * currently trading.
+     *
+     * @return the trader, or null
+     */
+    HumanEntity getTrader();
+
+    /**
+     * Gets this villager's riches, the number of emeralds this villager has
+     * been given.
+     *
+     * @return the villager's riches
+     */
+    int getRiches();
+
+    /**
+     * Sets this villager's riches.
+     *
+     * @see Villager#getRiches()
+     *
+     * @param riches the new riches
+     */
+    void setRiches(int riches);
+
+    /**
+     * Represents the various different Villager professions there may be.
+     */
+    public enum Profession {
+        FARMER(0),
+        LIBRARIAN(1),
+        PRIEST(2),
+        BLACKSMITH(3),
+        BUTCHER(4),
+		HUSK(5);
+		
+		private final boolean zombie;
+
+        private Profession(boolean zombie) {
+            this.zombie = zombie;
+        }
+
+        /**
+         * Returns if this profession can only be used by zombies.
+         *
+         * @return zombie profession status
+         */
+        public boolean isZombie() {
+            return zombie;
+        }
+
+        private static final Profession[] professions = new Profession[Profession.values().length];
+        private final int id;
+
+        static {
+            for (Profession type : values()) {
+                professions[type.getId()] = type;
+            }
+        }
+
+        private Profession(int id) {
+            this.id = id;
+        }
+
+        /**
+         * Gets the ID of this profession.
+         *
+         * @return Profession ID.
+         * @deprecated Magic value
+         */
+        @Deprecated
+        public int getId() {
+            return id;
+        }
+
+        /**
+         * Gets a profession by its ID.
+         *
+         * @param id ID of the profession to get.
+         * @return Resulting profession, or null if not found.
+         * @deprecated Magic value
+         */
+        @Deprecated
+        public static Profession getProfession(int id) {
+            return (id >= professions.length) ? null : professions[id];
+        }
+    }
+}
-- 
2.8.2.windows.1

