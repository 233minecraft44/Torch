From 0d1c2a9b1bdc353ef9937f8c7e3983e2e1dde568 Mon Sep 17 00:00:00 2001
From: SotrForgotten <i@omc.hk>
Date: Sat, 16 Jul 2016 05:21:01 +0800
Subject: [PATCH] Legacy potion support


diff --git a/src/main/java/net/minecraft/server/ItemStack.java b/src/main/java/net/minecraft/server/ItemStack.java
index 04a16ff..2f68e74 100644
--- a/src/main/java/net/minecraft/server/ItemStack.java
+++ b/src/main/java/net/minecraft/server/ItemStack.java
@@ -5,6 +5,9 @@ import com.google.common.collect.Multimap;
 import java.text.DecimalFormat;
 import java.util.Random;
 import javax.annotation.Nullable;
+import org.bukkit.potion.Potion;
+import org.bukkit.potion.PotionType;
+import org.bukkit.registry.Key;
 
 // CraftBukkit start
 import java.util.List;
@@ -291,6 +294,34 @@ public final class ItemStack {
                 this.item.a(this.tag);
             }
         }
+		
+		// SportBukkit start - convert legacy potions
+        if(this.item == Items.POTION && this.damage != 0 && (tag == null || !tag.hasKey("Potion"))) {
+            // Calculate a Potion from the damage value, and then set it to 0
+            final Potion potion = Potion.fromDamage(this.damage);
+            final PotionType type = potion.getType();
+            this.damage = 0;
+            if(potion.isSplash()) this.item = Items.SPLASH_POTION;
+            if(tag == null) {
+                this.tag = new NBTTagCompound();
+            }
+            // Custom effects used to replace the defaults, so recreate that behavior
+            // by only setting a potion type if there are no custom effects.
+            final List<MobEffect> customEffects = new java.util.ArrayList<MobEffect>();
+            PotionUtil.a(this.tag, customEffects);
+            if(customEffects.isEmpty()) {
+                final Key key;
+                if(potion.hasExtendedDuration()) {
+                    key = type.longKey();
+                } else if(potion.getLevel() > 1) {
+                    key = type.strongKey();
+                } else {
+                    key = type.baseKey();
+                }
+                tag.setString("Potion", key.toString());
+            }
+        }
+        // SportBukkit end
 
     }
 
diff --git a/src/main/java/org/bukkit/potion/Potion.java b/src/main/java/org/bukkit/potion/Potion.java
index e9676d6..ffcccd0 100644
--- a/src/main/java/org/bukkit/potion/Potion.java
+++ b/src/main/java/org/bukkit/potion/Potion.java
@@ -7,6 +7,7 @@ import org.bukkit.Material;
 import org.bukkit.entity.LivingEntity;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.meta.PotionMeta;
+import org.bukkit.inventory.meta.ItemMeta;
 
 /**
  * Potion Adapter for pre-1.9 data values
@@ -18,6 +19,7 @@ public class Potion {
     private boolean splash = false;
     private int level = 1;
     private PotionType type;
+	private static final int NAME_MASK = 0x10;
 
     /**
      * Construct a new potion of the given type. Unless the type is {@link
@@ -321,7 +323,7 @@ public class Potion {
         }
         ItemStack itemStack = new ItemStack(material, amount);
         PotionMeta meta = (PotionMeta) itemStack.getItemMeta();
-        meta.setBasePotionData(new PotionData(type, level == 2, extended));
+        meta.setBasePotionData(new PotionData(type, extended, level == 2));
         itemStack.setItemMeta(meta);
         return itemStack;
     }
@@ -364,10 +366,22 @@ public class Potion {
      * @return the produced potion
      */
     public static Potion fromDamage(int damage) {
+		final int level = ((damage & TIER_BIT) >> TIER_SHIFT) + 1;
+		
         PotionType type;
         switch (damage & POTION_BIT) {
             case 0:
-                type = PotionType.WATER;
+                switch(damage & NAME_MASK) {
+                    default:
+                        type = damage == 0 ? PotionType.WATER : PotionType.MUNDANE;
+                        break;
+                    case 16:
+                        type = PotionType.AWKWARD;
+                        break;
+                    case 32:
+                        type = PotionType.THICK;
+                        break;
+                }
                 break;
             case 1:
                 type = PotionType.REGEN;
@@ -411,28 +425,29 @@ public class Potion {
             default:
                 type = PotionType.WATER;
         }
-        Potion potion;
-        if (type == null || type == PotionType.WATER) {
-            potion = new Potion(PotionType.WATER);
-        } else {
-            int level = (damage & TIER_BIT) >> TIER_SHIFT;
-            level++;
-            potion = new Potion(type, level);
-        }
+		
+		Potion potion = new Potion(type, type.isUpgradeable() ? level : 1);
+
         if ((damage & SPLASH_BIT) > 0) {
             potion = potion.splash();
         }
-        if ((damage & EXTENDED_BIT) > 0) {
+        if ((damage & EXTENDED_BIT) > 0 && type.isExtendable()) {
             potion = potion.extend();
         }
         return potion;
     }
 
+	@Deprecated
     public static Potion fromItemStack(ItemStack item) {
         Validate.notNull(item, "item cannot be null");
-        if (item.getType() != Material.POTION)
-            throw new IllegalArgumentException("item is not a potion");
-        return fromDamage(item.getDurability());
+        if(item.getType() != Material.POTION && item.getType() != Material.SPLASH_POTION) {
+            throw new IllegalArgumentException("item cannot be converted to a legacy potion");
+        }
+
+        final PotionData potionData = ((PotionMeta) item.getItemMeta()).getBasePotionData();
+        final Potion potion = new Potion(potionData.getType(), potionData.isUpgraded() ? 2 : 1, potionData.isExtended());
+        if(item.getType() == Material.SPLASH_POTION) potion.splash();
+        return potion;
     }
 
     /**
-- 
2.8.2.windows.1

