From c447592067074326b05f4499ae1e4ff6d2687192 Mon Sep 17 00:00:00 2001
From: SotrForgotten <i@omc.hk>
Date: Mon, 15 Aug 2016 03:51:21 +0800
Subject: [PATCH] Configurable mob spawner modify


diff --git a/src/main/java/com/destroystokyo/paper/loottable/CraftLootableInventoryData.java b/src/main/java/com/destroystokyo/paper/loottable/CraftLootableInventoryData.java
index 61376c0..158aa55 100644
--- a/src/main/java/com/destroystokyo/paper/loottable/CraftLootableInventoryData.java
+++ b/src/main/java/com/destroystokyo/paper/loottable/CraftLootableInventoryData.java
@@ -18,7 +18,7 @@ import net.minecraft.server.NBTTagList;
 
 public class CraftLootableInventoryData {
 
-	private static final LightRandom RANDOM = new LightRandom();
+	private static final LightRandom RANDOM = com.mrpowergamerbr.parappatown.utils.LightStatic.random;
 
 	private long lastFill = -1;
 	private long nextRefill = -1;
diff --git a/src/main/java/com/mrpowergamerbr/parappatown/utils/LightStatic.java b/src/main/java/com/mrpowergamerbr/parappatown/utils/LightStatic.java
new file mode 100644
index 0000000..8c14690
--- /dev/null
+++ b/src/main/java/com/mrpowergamerbr/parappatown/utils/LightStatic.java
@@ -0,0 +1,11 @@
+package com.mrpowergamerbr.parappatown.utils;
+
+import java.util.Random;
+
+import com.mrpowergamerbr.utils.LightRandom;
+
+public class LightStatic {
+	
+	public static LightRandom random = new LightRandom();
+	public static Random RNG = new Random();
+}
\ No newline at end of file
diff --git a/src/main/java/de/minetick/MigotConfig.java b/src/main/java/de/minetick/MigotConfig.java
index 91866d3..b34c583 100644
--- a/src/main/java/de/minetick/MigotConfig.java
+++ b/src/main/java/de/minetick/MigotConfig.java
@@ -56,6 +56,7 @@ public class MigotConfig {
 		requisiteMods = configuration.getStringList("fml.requisite-mods");
 		kickInfo = configuration.getString("fml.kick-info", "Mod {MOD} is not allwoed in the server!");
 		enableVelocityWarning = configuration.getBoolean("settings.enable-velocity-warn", true);
+		disableSpawnerModify = configuration.getBoolean("world-settings.disable-mob-spanwer-modify", false);
 	}
 
 	private FileConfiguration loadConfig(File file) throws IOException, InvalidConfigurationException {
@@ -93,5 +94,7 @@ public class MigotConfig {
 	public static boolean disableSleepChecking;
 	// Velocity warnings
 	public static boolean enableVelocityWarning;
+	// Spawner modify
+	public static boolean disableSpawnerModify;
 
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/server/BlockDispenser.java b/src/main/java/net/minecraft/server/BlockDispenser.java
index 84c0eb1..252fabc 100644
--- a/src/main/java/net/minecraft/server/BlockDispenser.java
+++ b/src/main/java/net/minecraft/server/BlockDispenser.java
@@ -12,7 +12,7 @@ public class BlockDispenser extends BlockTileEntity {
 	public static final BlockStateBoolean TRIGGERED = BlockStateBoolean.of("triggered");
 	public static final RegistryDefault<Item, IDispenseBehavior> REGISTRY = new RegistryDefault(
 			new DispenseBehaviorItem());
-	protected LightRandom d = new LightRandom();
+	protected LightRandom d = com.mrpowergamerbr.parappatown.utils.LightStatic.random;
 	public static boolean eventFired = false; // CraftBukkit
 
 	protected BlockDispenser() {
diff --git a/src/main/java/net/minecraft/server/Chunk.java b/src/main/java/net/minecraft/server/Chunk.java
index 255e831..c573276 100644
--- a/src/main/java/net/minecraft/server/Chunk.java
+++ b/src/main/java/net/minecraft/server/Chunk.java
@@ -1213,7 +1213,9 @@ public class Chunk {
 			 * the World constructor. We can't reliably alter that, so we have
 			 * no way of creating a CraftWorld/CraftServer at that point.
 			 */
-			synchronized(this) { server.getPluginManager().callEvent(new org.bukkit.event.world.ChunkLoadEvent(bukkitChunk, newChunk)); }
+			synchronized (this) {
+				server.getPluginManager().callEvent(new org.bukkit.event.world.ChunkLoadEvent(bukkitChunk, newChunk));
+			}
 		}
 
 		// Update neighbor counts
@@ -1274,7 +1276,7 @@ public class Chunk {
 
 			// CraftBukkit start
 			// BlockSand.instaFall = true;
-			LightRandom random = new LightRandom();
+			LightRandom random = com.mrpowergamerbr.parappatown.utils.LightStatic.random;
 			random.setSeed(world.getSeed());
 			long xRand = random.nextLong() / 2L * 2L + 1L;
 			long zRand = random.nextLong() / 2L * 2L + 1L;
diff --git a/src/main/java/net/minecraft/server/CommandHelp.java b/src/main/java/net/minecraft/server/CommandHelp.java
new file mode 100644
index 0000000..e2371d1
--- /dev/null
+++ b/src/main/java/net/minecraft/server/CommandHelp.java
@@ -0,0 +1,117 @@
+package net.minecraft.server;
+
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
+import javax.annotation.Nullable;
+
+import com.mrpowergamerbr.utils.LightRandom;
+
+public class CommandHelp extends CommandAbstract {
+
+	private static String[] a = new String[] { "Yolo", "/achievement take achievement.understandCommands @p",
+			"Ask for help on twitter", "/deop @p", "Scoreboard deleted, commands blocked", "Contact helpdesk for help",
+			"/testfornoob @p", "/trigger warning", "Oh my god, it\'s full of stats", "/kill @p[name=!Searge]",
+			"Have you tried turning it off and on again?", "Sorry, no help today" };
+	private LightRandom b = com.mrpowergamerbr.parappatown.utils.LightStatic.random;
+
+	public CommandHelp() {
+	}
+
+	public String getCommand() {
+		return "help";
+	}
+
+	public int a() {
+		return 0;
+	}
+
+	public String getUsage(ICommandListener icommandlistener) {
+		return "commands.help.usage";
+	}
+
+	public List<String> b() {
+		return Arrays.asList(new String[] { "?" });
+	}
+
+	public void execute(MinecraftServer minecraftserver, ICommandListener icommandlistener, String[] astring)
+			throws CommandException {
+		if (icommandlistener instanceof CommandBlockListenerAbstract) {
+			icommandlistener.sendMessage((new ChatComponentText("Searge says: "))
+					.a(CommandHelp.a[this.b.nextInt(CommandHelp.a.length) % CommandHelp.a.length]));
+		} else {
+			List list = this.a(icommandlistener, minecraftserver);
+			boolean flag = true;
+			int i = (list.size() - 1) / 7;
+			boolean flag1 = false;
+
+			int j;
+
+			try {
+				j = astring.length == 0 ? 0 : a(astring[0], 1, i + 1) - 1;
+			} catch (ExceptionInvalidNumber exceptioninvalidnumber) {
+				Map map = this.a(minecraftserver);
+				ICommand icommand = (ICommand) map.get(astring[0]);
+
+				if (icommand != null) {
+					throw new ExceptionUsage(icommand.getUsage(icommandlistener), new Object[0]);
+				}
+
+				if (MathHelper.a(astring[0], -1) != -1) {
+					throw exceptioninvalidnumber;
+				}
+
+				throw new ExceptionUnknownCommand();
+			}
+
+			int k = Math.min((j + 1) * 7, list.size());
+			ChatMessage chatmessage = new ChatMessage("commands.help.header",
+					new Object[] { Integer.valueOf(j + 1), Integer.valueOf(i + 1) });
+
+			chatmessage.getChatModifier().setColor(EnumChatFormat.DARK_GREEN);
+			icommandlistener.sendMessage(chatmessage);
+
+			for (int l = j * 7; l < k; ++l) {
+				ICommand icommand1 = (ICommand) list.get(l);
+				ChatMessage chatmessage1 = new ChatMessage(icommand1.getUsage(icommandlistener), new Object[0]);
+
+				chatmessage1.getChatModifier().setChatClickable(new ChatClickable(
+						ChatClickable.EnumClickAction.SUGGEST_COMMAND, "/" + icommand1.getCommand() + " "));
+				icommandlistener.sendMessage(chatmessage1);
+			}
+
+			if (j == 0 && icommandlistener instanceof EntityHuman) {
+				ChatMessage chatmessage2 = new ChatMessage("commands.help.footer", new Object[0]);
+
+				chatmessage2.getChatModifier().setColor(EnumChatFormat.GREEN);
+				icommandlistener.sendMessage(chatmessage2);
+			}
+
+		}
+	}
+
+	protected List<ICommand> a(ICommandListener icommandlistener, MinecraftServer minecraftserver) {
+		List list = minecraftserver.getCommandHandler().a(icommandlistener);
+
+		Collections.sort(list);
+		return list;
+	}
+
+	protected Map<String, ICommand> a(MinecraftServer minecraftserver) {
+		return minecraftserver.getCommandHandler().getCommands();
+	}
+
+	public List<String> tabComplete(MinecraftServer minecraftserver, ICommandListener icommandlistener,
+			String[] astring, @Nullable BlockPosition blockposition) {
+		if (astring.length == 1) {
+			Set set = this.a(minecraftserver).keySet();
+
+			return a(astring, (String[]) set.toArray(new String[set.size()]));
+		} else {
+			return Collections.emptyList();
+		}
+	}
+}
diff --git a/src/main/java/net/minecraft/server/CommandSpreadPlayers.java b/src/main/java/net/minecraft/server/CommandSpreadPlayers.java
index 3fbb65c..2c64a67 100644
--- a/src/main/java/net/minecraft/server/CommandSpreadPlayers.java
+++ b/src/main/java/net/minecraft/server/CommandSpreadPlayers.java
@@ -91,7 +91,7 @@ public class CommandSpreadPlayers extends CommandAbstract {
 	private void a(ICommandListener icommandlistener, List<Entity> list,
 			CommandSpreadPlayers.Location2D commandspreadplayers_location2d, double d0, double d1, World world,
 			boolean flag) throws CommandException {
-		LightRandom random = new LightRandom();
+		LightRandom random = com.mrpowergamerbr.parappatown.utils.LightStatic.random;
 		double d2 = commandspreadplayers_location2d.a - d1;
 		double d3 = commandspreadplayers_location2d.b - d1;
 		double d4 = commandspreadplayers_location2d.a + d1;
diff --git a/src/main/java/net/minecraft/server/ContainerEnchantTable.java b/src/main/java/net/minecraft/server/ContainerEnchantTable.java
index d3a95da..c49b13f 100644
--- a/src/main/java/net/minecraft/server/ContainerEnchantTable.java
+++ b/src/main/java/net/minecraft/server/ContainerEnchantTable.java
@@ -3,7 +3,6 @@ package net.minecraft.server;
 import java.util.List;
 // CraftBukkit start
 import java.util.Map;
-import java.util.Random;
 
 import javax.annotation.Nullable;
 
@@ -40,7 +39,7 @@ public class ContainerEnchantTable extends Container {
 	};
 	private World world;
 	private BlockPosition position;
-	private LightRandom l = new LightRandom();
+	private LightRandom l = com.mrpowergamerbr.parappatown.utils.LightStatic.random;
 	public int f;
 	public int[] costs = new int[3];
 	public int[] h = new int[] { -1, -1, -1 };
diff --git a/src/main/java/net/minecraft/server/EnchantmentManager.java b/src/main/java/net/minecraft/server/EnchantmentManager.java
index 8814546..39ce6f7 100644
--- a/src/main/java/net/minecraft/server/EnchantmentManager.java
+++ b/src/main/java/net/minecraft/server/EnchantmentManager.java
@@ -12,12 +12,11 @@ import javax.annotation.Nullable;
 
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
-
 import com.mrpowergamerbr.utils.LightRandom;
 
 public class EnchantmentManager {
 
-	private static final LightRandom a = new LightRandom();
+	private static final LightRandom a = com.mrpowergamerbr.parappatown.utils.LightStatic.random;
 	private static final EnchantmentManager.EnchantmentModifierProtection b = new EnchantmentManager.EnchantmentModifierProtection(
 			(EnchantmentManager.SyntheticClass_1) null);
 	private static final EnchantmentManager.EnchantmentModifierDamage c = new EnchantmentManager.EnchantmentModifierDamage(
diff --git a/src/main/java/net/minecraft/server/EnderDragonBattle.java b/src/main/java/net/minecraft/server/EnderDragonBattle.java
index e23b0e8..8727302 100644
--- a/src/main/java/net/minecraft/server/EnderDragonBattle.java
+++ b/src/main/java/net/minecraft/server/EnderDragonBattle.java
@@ -373,7 +373,8 @@ public class EnderDragonBattle {
 
 	private void a(BlockPosition blockposition) {
 		this.d.triggerEffect(3000, blockposition, 0);
-		(new WorldGenEndGateway()).generate(this.d, new Random(), blockposition);
+		(new WorldGenEndGateway()).generate(this.d, com.mrpowergamerbr.parappatown.utils.LightStatic.random,
+				blockposition);
 	}
 
 	private void a(boolean flag) {
@@ -386,7 +387,7 @@ public class EnderDragonBattle {
 			}
 		}
 
-		worldgenendtrophy.generate(this.d, new Random(), this.o);
+		worldgenendtrophy.generate(this.d, com.mrpowergamerbr.parappatown.utils.LightStatic.random, this.o);
 	}
 
 	private void m() {
diff --git a/src/main/java/net/minecraft/server/Entity.java b/src/main/java/net/minecraft/server/Entity.java
index 77d4ea5..5f9b9e8 100644
--- a/src/main/java/net/minecraft/server/Entity.java
+++ b/src/main/java/net/minecraft/server/Entity.java
@@ -60,12 +60,13 @@ public abstract class Entity implements ICommandListener, org.spigotmc.Optimized
 
 	// CraftBukkit start
 	private static final int CURRENT_LEVEL = 2;
-	public static LightRandom SHARED_RANDOM = new LightRandom(); // Torch -
-																	// LightRandom
-																	// is a
-																	// LightRNG
-																	// masked as
-																	// a Random
+	public static LightRandom SHARED_RANDOM = com.mrpowergamerbr.parappatown.utils.LightStatic.random; // Torch
+																										// -
+	// LightRandom
+	// is a
+	// LightRNG
+	// masked as
+	// a Random
 	// public static Random SHARED_RANDOM = new Random(); // Paper
 
 	static boolean isLevelAtLeast(NBTTagCompound tag, int level) {
diff --git a/src/main/java/net/minecraft/server/EntityMinecartContainer.java b/src/main/java/net/minecraft/server/EntityMinecartContainer.java
index 5a3f7d4..143b639 100644
--- a/src/main/java/net/minecraft/server/EntityMinecartContainer.java
+++ b/src/main/java/net/minecraft/server/EntityMinecartContainer.java
@@ -309,7 +309,7 @@ public abstract class EntityMinecartContainer extends EntityMinecartAbstract
 			Random random;
 
 			if (this.d == 0L) {
-				random = new Random();
+				random = com.mrpowergamerbr.parappatown.utils.LightStatic.RNG;
 			} else {
 				random = new Random(this.d);
 			}
diff --git a/src/main/java/net/minecraft/server/EntityPlayer.java b/src/main/java/net/minecraft/server/EntityPlayer.java
index 0e6bcfd..a1ff6a0 100644
--- a/src/main/java/net/minecraft/server/EntityPlayer.java
+++ b/src/main/java/net/minecraft/server/EntityPlayer.java
@@ -611,7 +611,11 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
 	@Override
 	@Nullable
 	public Entity c(int i) {
-		if(this.isProgress) { return this; } else { this.isProgress = true; }
+		if (this.isProgress) {
+			return this;
+		} else {
+			this.isProgress = true;
+		}
 		// this.ck = true; // CraftBukkit - Moved down and into
 		// PlayerList#changeDimension
 		if (this.dimension == 1 && i == 1) {
@@ -643,10 +647,10 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
 			TeleportCause cause = (this.dimension == 1 || i == 1) ? TeleportCause.END_PORTAL
 					: TeleportCause.NETHER_PORTAL;
 			this.server.getPlayerList().changeDimension(this, i, cause);
-																			// PAIL:
-																			// check
-																			// all
-																			// this
+			// PAIL:
+			// check
+			// all
+			// this
 			// CraftBukkit end
 			this.playerConnection.sendPacket(new PacketPlayOutWorldEvent(1032, BlockPosition.ZERO, 0, false));
 			this.lastSentExp = -1;
@@ -1280,13 +1284,17 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
 		if (entity instanceof EntityHuman) {
 			this.playerConnection.sendPacket(new PacketPlayOutEntityDestroy(new int[] { entity.getId() }));
 		} else {
-			synchronized(this) { this.removeQueue.add(Integer.valueOf(entity.getId())); }
+			synchronized (this) {
+				this.removeQueue.add(Integer.valueOf(entity.getId()));
+			}
 		}
 
 	}
 
 	public void d(Entity entity) {
-		synchronized(this) { this.removeQueue.remove(Integer.valueOf(entity.getId())); }
+		synchronized (this) {
+			this.removeQueue.remove(Integer.valueOf(entity.getId()));
+		}
 	}
 
 	@Override
diff --git a/src/main/java/net/minecraft/server/EnumDirection.java b/src/main/java/net/minecraft/server/EnumDirection.java
index a464c3e..eab8ace 100644
--- a/src/main/java/net/minecraft/server/EnumDirection.java
+++ b/src/main/java/net/minecraft/server/EnumDirection.java
@@ -1,312 +1,331 @@
 package net.minecraft.server;
 
-import com.google.common.base.Predicate;
-import com.google.common.collect.Iterators;
-import com.google.common.collect.Maps;
 import java.util.Iterator;
 import java.util.Map;
 import java.util.Random;
-import javax.annotation.Nullable;
-
-public enum EnumDirection implements INamable {
-
-    DOWN(0, 1, -1, "down", EnumDirection.EnumAxisDirection.NEGATIVE, EnumDirection.EnumAxis.Y, new BaseBlockPosition(0, -1, 0)), UP(1, 0, -1, "up", EnumDirection.EnumAxisDirection.POSITIVE, EnumDirection.EnumAxis.Y, new BaseBlockPosition(0, 1, 0)), NORTH(2, 3, 2, "north", EnumDirection.EnumAxisDirection.NEGATIVE, EnumDirection.EnumAxis.Z, new BaseBlockPosition(0, 0, -1)), SOUTH(3, 2, 0, "south", EnumDirection.EnumAxisDirection.POSITIVE, EnumDirection.EnumAxis.Z, new BaseBlockPosition(0, 0, 1)), WEST(4, 5, 1, "west", EnumDirection.EnumAxisDirection.NEGATIVE, EnumDirection.EnumAxis.X, new BaseBlockPosition(-1, 0, 0)), EAST(5, 4, 3, "east", EnumDirection.EnumAxisDirection.POSITIVE, EnumDirection.EnumAxis.X, new BaseBlockPosition(1, 0, 0));
-
-    private final int g;
-    private final int h;
-    private final int i;
-    private final String j;
-    private final EnumDirection.EnumAxis k;
-    private final EnumDirection.EnumAxisDirection l;
-    protected final BaseBlockPosition m; // Torch - private -> protected
-    private static final EnumDirection[] n = new EnumDirection[6];
-    private static final EnumDirection[] o = new EnumDirection[4];
-    private static final Map<String, EnumDirection> p = Maps.newHashMap();
-
-    private EnumDirection(int i, int j, int k, String s, EnumDirection.EnumAxisDirection enumdirection_enumaxisdirection, EnumDirection.EnumAxis enumdirection_enumaxis, BaseBlockPosition baseblockposition) {
-        this.g = i;
-        this.i = k;
-        this.h = j;
-        this.j = s;
-        this.k = enumdirection_enumaxis;
-        this.l = enumdirection_enumaxisdirection;
-        this.m = baseblockposition;
-    }
-
-    public int a() {
-        return this.g;
-    }
-
-    public int get2DRotationValue() {
-        return this.i;
-    }
-
-    public EnumDirection.EnumAxisDirection c() {
-        return this.l;
-    }
-
-    public EnumDirection opposite() {
-        return fromType1(this.h);
-    }
-
-    public EnumDirection e() {
-        switch (EnumDirection.SyntheticClass_1.b[this.ordinal()]) {
-        case 1:
-            return EnumDirection.EAST;
-
-        case 2:
-            return EnumDirection.SOUTH;
-
-        case 3:
-            return EnumDirection.WEST;
-
-        case 4:
-            return EnumDirection.NORTH;
-
-        default:
-            throw new IllegalStateException("Unable to get Y-rotated facing of " + this);
-        }
-    }
 
-    public EnumDirection f() {
-        switch (EnumDirection.SyntheticClass_1.b[this.ordinal()]) {
-        case 1:
-            return EnumDirection.WEST;
-
-        case 2:
-            return EnumDirection.NORTH;
+import javax.annotation.Nullable;
 
-        case 3:
-            return EnumDirection.EAST;
-
-        case 4:
-            return EnumDirection.SOUTH;
-
-        default:
-            throw new IllegalStateException("Unable to get CCW facing of " + this);
-        }
-    }
-
-    public int getAdjacentX() {
-        return this.k == EnumDirection.EnumAxis.X ? this.l.a() : 0;
-    }
-
-    public int getAdjacentY() {
-        return this.k == EnumDirection.EnumAxis.Y ? this.l.a() : 0;
-    }
-
-    public int getAdjacentZ() {
-        return this.k == EnumDirection.EnumAxis.Z ? this.l.a() : 0;
-    }
-
-    public String j() {
-        return this.j;
-    }
-
-    public EnumDirection.EnumAxis k() {
-        return this.k;
-    }
-
-    public static EnumDirection fromType1(int i) {
-        return EnumDirection.n[MathHelper.a(i % EnumDirection.n.length)];
-    }
-
-    public static EnumDirection fromType2(int i) {
-        return EnumDirection.o[MathHelper.a(i % EnumDirection.o.length)];
-    }
-
-    public static EnumDirection fromAngle(double d0) {
-        return fromType2(MathHelper.floor(d0 / 90.0D + 0.5D) & 3);
-    }
-
-    public float l() {
-        return (float) ((this.i & 3) * 90);
-    }
+import com.google.common.base.Predicate;
+import com.google.common.collect.Iterators;
+import com.google.common.collect.Maps;
 
-    public static EnumDirection a(Random random) {
-        return values()[random.nextInt(values().length)];
-    }
+public enum EnumDirection implements INamable {
 
-    public String toString() {
-        return this.j;
-    }
+	DOWN(0, 1, -1, "down", EnumDirection.EnumAxisDirection.NEGATIVE, EnumDirection.EnumAxis.Y,
+			new BaseBlockPosition(0, -1, 0)), UP(1, 0, -1, "up", EnumDirection.EnumAxisDirection.POSITIVE,
+					EnumDirection.EnumAxis.Y, new BaseBlockPosition(0, 1, 0)), NORTH(2, 3, 2, "north",
+							EnumDirection.EnumAxisDirection.NEGATIVE, EnumDirection.EnumAxis.Z,
+							new BaseBlockPosition(0, 0, -1)), SOUTH(3, 2, 0, "south",
+									EnumDirection.EnumAxisDirection.POSITIVE, EnumDirection.EnumAxis.Z,
+									new BaseBlockPosition(0, 0, 1)), WEST(4, 5, 1, "west",
+											EnumDirection.EnumAxisDirection.NEGATIVE, EnumDirection.EnumAxis.X,
+											new BaseBlockPosition(-1, 0, 0)), EAST(5, 4, 3, "east",
+													EnumDirection.EnumAxisDirection.POSITIVE, EnumDirection.EnumAxis.X,
+													new BaseBlockPosition(1, 0, 0));
+
+	private final int g;
+	private final int h;
+	private final int i;
+	private final String j;
+	private final EnumDirection.EnumAxis k;
+	private final EnumDirection.EnumAxisDirection l;
+	protected final BaseBlockPosition m; // Torch - private -> protected
+	private static final EnumDirection[] n = new EnumDirection[6];
+	private static final EnumDirection[] o = new EnumDirection[4];
+	private static final Map<String, EnumDirection> p = Maps.newHashMap();
+
+	private EnumDirection(int i, int j, int k, String s,
+			EnumDirection.EnumAxisDirection enumdirection_enumaxisdirection,
+			EnumDirection.EnumAxis enumdirection_enumaxis, BaseBlockPosition baseblockposition) {
+		this.g = i;
+		this.i = k;
+		this.h = j;
+		this.j = s;
+		this.k = enumdirection_enumaxis;
+		this.l = enumdirection_enumaxisdirection;
+		this.m = baseblockposition;
+	}
+
+	public int a() {
+		return this.g;
+	}
+
+	public int get2DRotationValue() {
+		return this.i;
+	}
+
+	public EnumDirection.EnumAxisDirection c() {
+		return this.l;
+	}
+
+	public EnumDirection opposite() {
+		return fromType1(this.h);
+	}
+
+	public EnumDirection e() {
+		switch (EnumDirection.SyntheticClass_1.b[this.ordinal()]) {
+		case 1:
+			return EnumDirection.EAST;
+
+		case 2:
+			return EnumDirection.SOUTH;
+
+		case 3:
+			return EnumDirection.WEST;
+
+		case 4:
+			return EnumDirection.NORTH;
+
+		default:
+			throw new IllegalStateException("Unable to get Y-rotated facing of " + this);
+		}
+	}
+
+	public EnumDirection f() {
+		switch (EnumDirection.SyntheticClass_1.b[this.ordinal()]) {
+		case 1:
+			return EnumDirection.WEST;
+
+		case 2:
+			return EnumDirection.NORTH;
+
+		case 3:
+			return EnumDirection.EAST;
+
+		case 4:
+			return EnumDirection.SOUTH;
+
+		default:
+			throw new IllegalStateException("Unable to get CCW facing of " + this);
+		}
+	}
+
+	public int getAdjacentX() {
+		return this.k == EnumDirection.EnumAxis.X ? this.l.a() : 0;
+	}
+
+	public int getAdjacentY() {
+		return this.k == EnumDirection.EnumAxis.Y ? this.l.a() : 0;
+	}
+
+	public int getAdjacentZ() {
+		return this.k == EnumDirection.EnumAxis.Z ? this.l.a() : 0;
+	}
+
+	public String j() {
+		return this.j;
+	}
+
+	public EnumDirection.EnumAxis k() {
+		return this.k;
+	}
+
+	public static EnumDirection fromType1(int i) {
+		return EnumDirection.n[MathHelper.a(i % EnumDirection.n.length)];
+	}
+
+	public static EnumDirection fromType2(int i) {
+		return EnumDirection.o[MathHelper.a(i % EnumDirection.o.length)];
+	}
+
+	public static EnumDirection fromAngle(double d0) {
+		return fromType2(MathHelper.floor(d0 / 90.0D + 0.5D) & 3);
+	}
+
+	public float l() {
+		return (float) ((this.i & 3) * 90);
+	}
+
+	public static EnumDirection a(Random random) {
+		return values()[random.nextInt(values().length)];
+	}
+
+	public String toString() {
+		return this.j;
+	}
 
-    public String getName() {
-        return this.j;
-    }
+	public String getName() {
+		return this.j;
+	}
 
-    public static EnumDirection a(EnumDirection.EnumAxisDirection enumdirection_enumaxisdirection, EnumDirection.EnumAxis enumdirection_enumaxis) {
-        EnumDirection[] aenumdirection = values();
-        int i = aenumdirection.length;
+	public static EnumDirection a(EnumDirection.EnumAxisDirection enumdirection_enumaxisdirection,
+			EnumDirection.EnumAxis enumdirection_enumaxis) {
+		EnumDirection[] aenumdirection = values();
+		int i = aenumdirection.length;
 
-        for (int j = 0; j < i; ++j) {
-            EnumDirection enumdirection = aenumdirection[j];
+		for (int j = 0; j < i; ++j) {
+			EnumDirection enumdirection = aenumdirection[j];
 
-            if (enumdirection.c() == enumdirection_enumaxisdirection && enumdirection.k() == enumdirection_enumaxis) {
-                return enumdirection;
-            }
-        }
+			if (enumdirection.c() == enumdirection_enumaxisdirection && enumdirection.k() == enumdirection_enumaxis) {
+				return enumdirection;
+			}
+		}
 
-        throw new IllegalArgumentException("No such direction: " + enumdirection_enumaxisdirection + " " + enumdirection_enumaxis);
-    }
+		throw new IllegalArgumentException(
+				"No such direction: " + enumdirection_enumaxisdirection + " " + enumdirection_enumaxis);
+	}
 
-    static {
-        EnumDirection[] aenumdirection = values();
-        int i = aenumdirection.length;
+	static {
+		EnumDirection[] aenumdirection = values();
+		int i = aenumdirection.length;
 
-        for (int j = 0; j < i; ++j) {
-            EnumDirection enumdirection = aenumdirection[j];
+		for (int j = 0; j < i; ++j) {
+			EnumDirection enumdirection = aenumdirection[j];
 
-            EnumDirection.n[enumdirection.g] = enumdirection;
-            if (enumdirection.k().c()) {
-                EnumDirection.o[enumdirection.i] = enumdirection;
-            }
+			EnumDirection.n[enumdirection.g] = enumdirection;
+			if (enumdirection.k().c()) {
+				EnumDirection.o[enumdirection.i] = enumdirection;
+			}
 
-            EnumDirection.p.put(enumdirection.j().toLowerCase(), enumdirection);
-        }
+			EnumDirection.p.put(enumdirection.j().toLowerCase(), enumdirection);
+		}
 
-    }
+	}
 
-    static class SyntheticClass_1 {
+	static class SyntheticClass_1 {
 
-        static final int[] a = new int[EnumDirection.EnumAxis.values().length];
-        static final int[] b = new int[EnumDirection.values().length];
-        static final int[] c = new int[EnumDirection.EnumDirectionLimit.values().length];
+		static final int[] a = new int[EnumDirection.EnumAxis.values().length];
+		static final int[] b = new int[EnumDirection.values().length];
+		static final int[] c = new int[EnumDirection.EnumDirectionLimit.values().length];
 
-        static {
-            try {
-                EnumDirection.SyntheticClass_1.c[EnumDirection.EnumDirectionLimit.HORIZONTAL.ordinal()] = 1;
-                EnumDirection.SyntheticClass_1.c[EnumDirection.EnumDirectionLimit.VERTICAL.ordinal()] = 2;
-                EnumDirection.SyntheticClass_1.b[EnumDirection.NORTH.ordinal()] = 1;
-                EnumDirection.SyntheticClass_1.b[EnumDirection.EAST.ordinal()] = 2;
-                EnumDirection.SyntheticClass_1.b[EnumDirection.SOUTH.ordinal()] = 3;
-                EnumDirection.SyntheticClass_1.b[EnumDirection.WEST.ordinal()] = 4;
-                EnumDirection.SyntheticClass_1.b[EnumDirection.UP.ordinal()] = 5;
-                EnumDirection.SyntheticClass_1.b[EnumDirection.DOWN.ordinal()] = 6;
-                EnumDirection.SyntheticClass_1.a[EnumDirection.EnumAxis.X.ordinal()] = 1;
-                EnumDirection.SyntheticClass_1.a[EnumDirection.EnumAxis.Y.ordinal()] = 2;
-                EnumDirection.SyntheticClass_1.a[EnumDirection.EnumAxis.Z.ordinal()] = 3;
-            } catch (NoSuchFieldError nosuchfielderror) {
-                ;
-            }
+		static {
+			try {
+				EnumDirection.SyntheticClass_1.c[EnumDirection.EnumDirectionLimit.HORIZONTAL.ordinal()] = 1;
+				EnumDirection.SyntheticClass_1.c[EnumDirection.EnumDirectionLimit.VERTICAL.ordinal()] = 2;
+				EnumDirection.SyntheticClass_1.b[EnumDirection.NORTH.ordinal()] = 1;
+				EnumDirection.SyntheticClass_1.b[EnumDirection.EAST.ordinal()] = 2;
+				EnumDirection.SyntheticClass_1.b[EnumDirection.SOUTH.ordinal()] = 3;
+				EnumDirection.SyntheticClass_1.b[EnumDirection.WEST.ordinal()] = 4;
+				EnumDirection.SyntheticClass_1.b[EnumDirection.UP.ordinal()] = 5;
+				EnumDirection.SyntheticClass_1.b[EnumDirection.DOWN.ordinal()] = 6;
+				EnumDirection.SyntheticClass_1.a[EnumDirection.EnumAxis.X.ordinal()] = 1;
+				EnumDirection.SyntheticClass_1.a[EnumDirection.EnumAxis.Y.ordinal()] = 2;
+				EnumDirection.SyntheticClass_1.a[EnumDirection.EnumAxis.Z.ordinal()] = 3;
+			} catch (NoSuchFieldError nosuchfielderror) {
+				;
+			}
 
-        }
-    }
+		}
+	}
 
-    public static enum EnumDirectionLimit implements Predicate<EnumDirection>, Iterable<EnumDirection> {
+	public static enum EnumDirectionLimit implements Predicate<EnumDirection>, Iterable<EnumDirection> {
 
-        HORIZONTAL, VERTICAL;
+		HORIZONTAL, VERTICAL;
 
-        private EnumDirectionLimit() {}
+		private EnumDirectionLimit() {
+		}
 
-        public EnumDirection[] a() {
-            switch (EnumDirection.SyntheticClass_1.c[this.ordinal()]) {
-            case 1:
-                return new EnumDirection[] { EnumDirection.NORTH, EnumDirection.EAST, EnumDirection.SOUTH, EnumDirection.WEST};
+		public EnumDirection[] a() {
+			switch (EnumDirection.SyntheticClass_1.c[this.ordinal()]) {
+			case 1:
+				return new EnumDirection[] { EnumDirection.NORTH, EnumDirection.EAST, EnumDirection.SOUTH,
+						EnumDirection.WEST };
 
-            case 2:
-                return new EnumDirection[] { EnumDirection.UP, EnumDirection.DOWN};
+			case 2:
+				return new EnumDirection[] { EnumDirection.UP, EnumDirection.DOWN };
 
-            default:
-                throw new Error("Someone\'s been tampering with the universe!");
-            }
-        }
+			default:
+				throw new Error("Someone\'s been tampering with the universe!");
+			}
+		}
 
-        public EnumDirection a(Random random) {
-            EnumDirection[] aenumdirection = this.a();
+		public EnumDirection a(Random random) {
+			EnumDirection[] aenumdirection = this.a();
 
-            return aenumdirection[random.nextInt(aenumdirection.length)];
-        }
+			return aenumdirection[random.nextInt(aenumdirection.length)];
+		}
 
-        public boolean a(@Nullable EnumDirection enumdirection) {
-            return enumdirection != null && enumdirection.k().d() == this;
-        }
+		public boolean a(@Nullable EnumDirection enumdirection) {
+			return enumdirection != null && enumdirection.k().d() == this;
+		}
 
-        public Iterator<EnumDirection> iterator() {
-            return Iterators.forArray(this.a());
-        }
+		public Iterator<EnumDirection> iterator() {
+			return Iterators.forArray(this.a());
+		}
 
-        public boolean apply(EnumDirection enumdirection) {
-            return this.a(enumdirection);
-        }
-    }
+		public boolean apply(EnumDirection enumdirection) {
+			return this.a(enumdirection);
+		}
+	}
 
-    public static enum EnumAxisDirection {
+	public static enum EnumAxisDirection {
 
-        POSITIVE(1, "Towards positive"), NEGATIVE(-1, "Towards negative");
+		POSITIVE(1, "Towards positive"), NEGATIVE(-1, "Towards negative");
 
-        private final int c;
-        private final String d;
+		private final int c;
+		private final String d;
 
-        private EnumAxisDirection(int i, String s) {
-            this.c = i;
-            this.d = s;
-        }
+		private EnumAxisDirection(int i, String s) {
+			this.c = i;
+			this.d = s;
+		}
 
-        public int a() {
-            return this.c;
-        }
+		public int a() {
+			return this.c;
+		}
 
-        public String toString() {
-            return this.d;
-        }
-    }
+		public String toString() {
+			return this.d;
+		}
+	}
 
-    public static enum EnumAxis implements Predicate<EnumDirection>, INamable {
+	public static enum EnumAxis implements Predicate<EnumDirection>, INamable {
 
-        X("x", EnumDirection.EnumDirectionLimit.HORIZONTAL), Y("y", EnumDirection.EnumDirectionLimit.VERTICAL), Z("z", EnumDirection.EnumDirectionLimit.HORIZONTAL);
+		X("x", EnumDirection.EnumDirectionLimit.HORIZONTAL), Y("y", EnumDirection.EnumDirectionLimit.VERTICAL), Z("z",
+				EnumDirection.EnumDirectionLimit.HORIZONTAL);
 
-        private static final Map<String, EnumDirection.EnumAxis> d = Maps.newHashMap();
-        private final String e;
-        private final EnumDirection.EnumDirectionLimit f;
+		private static final Map<String, EnumDirection.EnumAxis> d = Maps.newHashMap();
+		private final String e;
+		private final EnumDirection.EnumDirectionLimit f;
 
-        private EnumAxis(String s, EnumDirection.EnumDirectionLimit enumdirection_enumdirectionlimit) {
-            this.e = s;
-            this.f = enumdirection_enumdirectionlimit;
-        }
+		private EnumAxis(String s, EnumDirection.EnumDirectionLimit enumdirection_enumdirectionlimit) {
+			this.e = s;
+			this.f = enumdirection_enumdirectionlimit;
+		}
 
-        public String a() {
-            return this.e;
-        }
+		public String a() {
+			return this.e;
+		}
 
-        public boolean b() {
-            return this.f == EnumDirection.EnumDirectionLimit.VERTICAL;
-        }
+		public boolean b() {
+			return this.f == EnumDirection.EnumDirectionLimit.VERTICAL;
+		}
 
-        public boolean c() {
-            return this.f == EnumDirection.EnumDirectionLimit.HORIZONTAL;
-        }
+		public boolean c() {
+			return this.f == EnumDirection.EnumDirectionLimit.HORIZONTAL;
+		}
 
-        public String toString() {
-            return this.e;
-        }
+		public String toString() {
+			return this.e;
+		}
 
-        public boolean a(@Nullable EnumDirection enumdirection) {
-            return enumdirection != null && enumdirection.k() == this;
-        }
+		public boolean a(@Nullable EnumDirection enumdirection) {
+			return enumdirection != null && enumdirection.k() == this;
+		}
 
-        public EnumDirection.EnumDirectionLimit d() {
-            return this.f;
-        }
+		public EnumDirection.EnumDirectionLimit d() {
+			return this.f;
+		}
 
-        public String getName() {
-            return this.e;
-        }
+		public String getName() {
+			return this.e;
+		}
 
-        public boolean apply(EnumDirection enumdirection) {
-            return this.a(enumdirection);
-        }
+		public boolean apply(EnumDirection enumdirection) {
+			return this.a(enumdirection);
+		}
 
-        static {
-            EnumDirection.EnumAxis[] aenumdirection_enumaxis = values();
-            int i = aenumdirection_enumaxis.length;
+		static {
+			EnumDirection.EnumAxis[] aenumdirection_enumaxis = values();
+			int i = aenumdirection_enumaxis.length;
 
-            for (int j = 0; j < i; ++j) {
-                EnumDirection.EnumAxis enumdirection_enumaxis = aenumdirection_enumaxis[j];
+			for (int j = 0; j < i; ++j) {
+				EnumDirection.EnumAxis enumdirection_enumaxis = aenumdirection_enumaxis[j];
 
-                EnumDirection.EnumAxis.d.put(enumdirection_enumaxis.a().toLowerCase(), enumdirection_enumaxis);
-            }
+				EnumDirection.EnumAxis.d.put(enumdirection_enumaxis.a().toLowerCase(), enumdirection_enumaxis);
+			}
 
-        }
-    }
+		}
+	}
 }
diff --git a/src/main/java/net/minecraft/server/Explosion.java b/src/main/java/net/minecraft/server/Explosion.java
index 7880911..105ee7c 100644
--- a/src/main/java/net/minecraft/server/Explosion.java
+++ b/src/main/java/net/minecraft/server/Explosion.java
@@ -2,7 +2,6 @@ package net.minecraft.server;
 
 import java.util.Iterator;
 import java.util.List;
-import java.util.Random;
 import java.util.Set;
 import java.util.concurrent.ConcurrentMap;
 import java.util.concurrent.CopyOnWriteArrayList;
@@ -22,7 +21,7 @@ public class Explosion {
 
 	private final boolean a;
 	private final boolean b;
-	private final LightRandom c = new LightRandom();
+	private final LightRandom c = com.mrpowergamerbr.parappatown.utils.LightStatic.random;
 	private final World world;
 	private final double posX;
 	private final double posY;
diff --git a/src/main/java/net/minecraft/server/GenericAttributes.java b/src/main/java/net/minecraft/server/GenericAttributes.java
index 2cda661..94e8535 100644
--- a/src/main/java/net/minecraft/server/GenericAttributes.java
+++ b/src/main/java/net/minecraft/server/GenericAttributes.java
@@ -27,7 +27,8 @@ public class GenericAttributes {
 			1024.0D)).a(true);
 	public static final IAttribute g = (new AttributeRanged((IAttribute) null, "generic.armor", 0.0D, 0.0D, 30.0D))
 			.a(true);
-	public static final IAttribute h = (new AttributeRanged((IAttribute) null, "generic.armorToughness", 0.0D, 0.0D, Double.POSITIVE_INFINITY)).a(true);
+	public static final IAttribute h = (new AttributeRanged((IAttribute) null, "generic.armorToughness", 0.0D, 0.0D,
+			Double.POSITIVE_INFINITY)).a(true);
 	public static final IAttribute i = (new AttributeRanged((IAttribute) null, "generic.luck", 0.0D, -1024.0D, 1024.0D))
 			.a(true);
 	// Spigot end
diff --git a/src/main/java/net/minecraft/server/InventoryUtils.java b/src/main/java/net/minecraft/server/InventoryUtils.java
new file mode 100644
index 0000000..8200d7a
--- /dev/null
+++ b/src/main/java/net/minecraft/server/InventoryUtils.java
@@ -0,0 +1,58 @@
+package net.minecraft.server;
+
+import com.mrpowergamerbr.utils.LightRandom;
+
+public class InventoryUtils {
+
+	private static final LightRandom a = com.mrpowergamerbr.parappatown.utils.LightStatic.random;
+
+	public static void dropInventory(World world, BlockPosition blockposition, IInventory iinventory) {
+		dropInventory(world, (double) blockposition.getX(), (double) blockposition.getY(),
+				(double) blockposition.getZ(), iinventory);
+	}
+
+	public static void dropEntity(World world, Entity entity, IInventory iinventory) {
+		dropInventory(world, entity.locX, entity.locY, entity.locZ, iinventory);
+	}
+
+	private static void dropInventory(World world, double d0, double d1, double d2, IInventory iinventory) {
+		for (int i = 0; i < iinventory.getSize(); ++i) {
+			ItemStack itemstack = iinventory.getItem(i);
+
+			if (itemstack != null) {
+				dropItem(world, d0, d1, d2, itemstack);
+			}
+		}
+
+	}
+
+	public static void dropItem(World world, double d0, double d1, double d2, ItemStack itemstack) {
+		float f = InventoryUtils.a.nextFloat() * 0.8F + 0.1F;
+		float f1 = InventoryUtils.a.nextFloat() * 0.8F + 0.1F;
+		float f2 = InventoryUtils.a.nextFloat() * 0.8F + 0.1F;
+
+		while (itemstack.count > 0) {
+			int i = InventoryUtils.a.nextInt(21) + 10;
+
+			if (i > itemstack.count) {
+				i = itemstack.count;
+			}
+
+			itemstack.count -= i;
+			EntityItem entityitem = new EntityItem(world, d0 + (double) f, d1 + (double) f1, d2 + (double) f2,
+					new ItemStack(itemstack.getItem(), i, itemstack.getData()));
+
+			if (itemstack.hasTag()) {
+				entityitem.getItemStack().setTag((NBTTagCompound) itemstack.getTag().clone());
+			}
+
+			float f3 = 0.05F;
+
+			entityitem.motX = InventoryUtils.a.nextGaussian() * (double) f3;
+			entityitem.motY = InventoryUtils.a.nextGaussian() * (double) f3 + 0.20000000298023224D;
+			entityitem.motZ = InventoryUtils.a.nextGaussian() * (double) f3;
+			world.addEntity(entityitem);
+		}
+
+	}
+}
diff --git a/src/main/java/net/minecraft/server/Item.java b/src/main/java/net/minecraft/server/Item.java
new file mode 100644
index 0000000..63ba5f6
--- /dev/null
+++ b/src/main/java/net/minecraft/server/Item.java
@@ -0,0 +1,894 @@
+package net.minecraft.server;
+
+import java.util.Map;
+import java.util.UUID;
+
+import javax.annotation.Nullable;
+
+import com.google.common.base.Function;
+import com.google.common.collect.HashMultimap;
+import com.google.common.collect.Maps;
+import com.google.common.collect.Multimap;
+import java.util.Random;
+
+public class Item {
+
+	public static final RegistryMaterials<MinecraftKey, Item> REGISTRY = new RegistryMaterials();
+	private static final Map<Block, Item> a = Maps.newHashMap();
+	private static final IDynamicTexture b = new IDynamicTexture() {
+	};
+	private static final IDynamicTexture c = new IDynamicTexture() {
+	};
+	private static final IDynamicTexture d = new IDynamicTexture() {
+	};
+	private static final IDynamicTexture e = new IDynamicTexture() {
+	};
+	private final IRegistry<MinecraftKey, IDynamicTexture> f = new RegistrySimple();
+	protected static final UUID h = UUID.fromString("CB3F55D3-645C-4F38-A497-9C13A33DB5CF");
+	protected static final UUID i = UUID.fromString("FA233E1C-4180-4865-B01B-BCCE9785ACA3");
+	private CreativeModeTab n;
+	protected static Random j = com.mrpowergamerbr.parappatown.utils.LightStatic.RNG;
+	protected int maxStackSize = 64;
+	private int durability;
+	protected boolean l;
+	protected boolean m;
+	private Item craftingResult;
+	private String name;
+
+	public static int getId(Item item) {
+		return item == null ? 0 : Item.REGISTRY.a(item);
+	}
+
+	public static Item getById(int i) {
+		return (Item) Item.REGISTRY.getId(i);
+	}
+
+	@Nullable
+	public static Item getItemOf(Block block) {
+		return (Item) Item.a.get(block);
+	}
+
+	public static Item d(String s) {
+		Item item = (Item) Item.REGISTRY.get(new MinecraftKey(s));
+
+		if (item == null) {
+			try {
+				return getById(Integer.parseInt(s));
+			} catch (NumberFormatException numberformatexception) {
+				;
+			}
+		}
+
+		return item;
+	}
+
+	public final void a(MinecraftKey minecraftkey, IDynamicTexture idynamictexture) {
+		this.f.a(minecraftkey, idynamictexture);
+	}
+
+	public boolean a(NBTTagCompound nbttagcompound) {
+		return false;
+	}
+
+	public Item() {
+		this.a(new MinecraftKey("lefthanded"), Item.d);
+		this.a(new MinecraftKey("cooldown"), Item.e);
+	}
+
+	public Item d(int i) {
+		this.maxStackSize = i;
+		return this;
+	}
+
+	public EnumInteractionResult a(ItemStack itemstack, EntityHuman entityhuman, World world,
+			BlockPosition blockposition, EnumHand enumhand, EnumDirection enumdirection, float f, float f1, float f2) {
+		return EnumInteractionResult.PASS;
+	}
+
+	public float getDestroySpeed(ItemStack itemstack, IBlockData iblockdata) {
+		return 1.0F;
+	}
+
+	public InteractionResultWrapper<ItemStack> a(ItemStack itemstack, World world, EntityHuman entityhuman,
+			EnumHand enumhand) {
+		return new InteractionResultWrapper(EnumInteractionResult.PASS, itemstack);
+	}
+
+	@Nullable
+	public ItemStack a(ItemStack itemstack, World world, EntityLiving entityliving) {
+		return itemstack;
+	}
+
+	public int getMaxStackSize() {
+		return this.maxStackSize;
+	}
+
+	public int filterData(int i) {
+		return 0;
+	}
+
+	public boolean k() {
+		return this.m;
+	}
+
+	protected Item a(boolean flag) {
+		this.m = flag;
+		return this;
+	}
+
+	public int getMaxDurability() {
+		return this.durability;
+	}
+
+	protected Item setMaxDurability(int i) {
+		this.durability = i;
+		if (i > 0) {
+			this.a(new MinecraftKey("damaged"), Item.b);
+			this.a(new MinecraftKey("damage"), Item.c);
+		}
+
+		return this;
+	}
+
+	public boolean usesDurability() {
+		return this.durability > 0 && (!this.m || this.maxStackSize == 1);
+	}
+
+	public boolean a(ItemStack itemstack, EntityLiving entityliving, EntityLiving entityliving1) {
+		return false;
+	}
+
+	public boolean a(ItemStack itemstack, World world, IBlockData iblockdata, BlockPosition blockposition,
+			EntityLiving entityliving) {
+		return false;
+	}
+
+	public boolean canDestroySpecialBlock(IBlockData iblockdata) {
+		return false;
+	}
+
+	public boolean a(ItemStack itemstack, EntityHuman entityhuman, EntityLiving entityliving, EnumHand enumhand) {
+		return false;
+	}
+
+	public Item n() {
+		this.l = true;
+		return this;
+	}
+
+	public Item c(String s) {
+		this.name = s;
+		return this;
+	}
+
+	public String j(ItemStack itemstack) {
+		String s = this.f_(itemstack);
+
+		return s == null ? "" : LocaleI18n.get(s);
+	}
+
+	public String getName() {
+		return "item." + this.name;
+	}
+
+	public String f_(ItemStack itemstack) {
+		return "item." + this.name;
+	}
+
+	public Item b(Item item) {
+		this.craftingResult = item;
+		return this;
+	}
+
+	public boolean p() {
+		return true;
+	}
+
+	public Item q() {
+		return this.craftingResult;
+	}
+
+	public boolean r() {
+		return this.craftingResult != null;
+	}
+
+	public void a(ItemStack itemstack, World world, Entity entity, int i, boolean flag) {
+	}
+
+	public void b(ItemStack itemstack, World world, EntityHuman entityhuman) {
+	}
+
+	public boolean f() {
+		return false;
+	}
+
+	public EnumAnimation f(ItemStack itemstack) {
+		return EnumAnimation.NONE;
+	}
+
+	public int e(ItemStack itemstack) {
+		return 0;
+	}
+
+	public void a(ItemStack itemstack, World world, EntityLiving entityliving, int i) {
+	}
+
+	public String a(ItemStack itemstack) {
+		return ("" + LocaleI18n.get(this.j(itemstack) + ".name")).trim();
+	}
+
+	public EnumItemRarity g(ItemStack itemstack) {
+		return itemstack.hasEnchantments() ? EnumItemRarity.RARE : EnumItemRarity.COMMON;
+	}
+
+	public boolean g_(ItemStack itemstack) {
+		return this.getMaxStackSize() == 1 && this.usesDurability();
+	}
+
+	protected MovingObjectPosition a(World world, EntityHuman entityhuman, boolean flag) {
+		float f = entityhuman.pitch;
+		float f1 = entityhuman.yaw;
+		double d0 = entityhuman.locX;
+		double d1 = entityhuman.locY + (double) entityhuman.getHeadHeight();
+		double d2 = entityhuman.locZ;
+		Vec3D vec3d = new Vec3D(d0, d1, d2);
+		float f2 = MathHelper.cos(-f1 * 0.017453292F - 3.1415927F);
+		float f3 = MathHelper.sin(-f1 * 0.017453292F - 3.1415927F);
+		float f4 = -MathHelper.cos(-f * 0.017453292F);
+		float f5 = MathHelper.sin(-f * 0.017453292F);
+		float f6 = f3 * f4;
+		float f7 = f2 * f4;
+		double d3 = 5.0D;
+		Vec3D vec3d1 = vec3d.add((double) f6 * d3, (double) f5 * d3, (double) f7 * d3);
+
+		return world.rayTrace(vec3d, vec3d1, flag, !flag, false);
+	}
+
+	public int c() {
+		return 0;
+	}
+
+	public Item a(CreativeModeTab creativemodetab) {
+		this.n = creativemodetab;
+		return this;
+	}
+
+	public boolean s() {
+		return false;
+	}
+
+	public boolean a(ItemStack itemstack, ItemStack itemstack1) {
+		return false;
+	}
+
+	public Multimap<String, AttributeModifier> a(EnumItemSlot enumitemslot) {
+		return HashMultimap.create();
+	}
+
+	public static void t() {
+		a(Blocks.STONE, (Item) (new ItemMultiTexture(Blocks.STONE, Blocks.STONE, new Function() {
+			@Nullable
+			public String a(@Nullable ItemStack itemstack) {
+				return BlockStone.EnumStoneVariant.a(itemstack.getData()).d();
+			}
+
+			public Object apply(Object object) {
+				return this.a((ItemStack) object);
+			}
+		})).b("stone"));
+		a((Block) Blocks.GRASS, (Item) (new ItemWithAuxData(Blocks.GRASS, false)));
+		a(Blocks.DIRT, (Item) (new ItemMultiTexture(Blocks.DIRT, Blocks.DIRT, new Function() {
+			@Nullable
+			public String a(@Nullable ItemStack itemstack) {
+				return BlockDirt.EnumDirtVariant.a(itemstack.getData()).c();
+			}
+
+			public Object apply(Object object) {
+				return this.a((ItemStack) object);
+			}
+		})).b("dirt"));
+		b(Blocks.COBBLESTONE);
+		a(Blocks.PLANKS, (Item) (new ItemMultiTexture(Blocks.PLANKS, Blocks.PLANKS, new Function() {
+			@Nullable
+			public String a(@Nullable ItemStack itemstack) {
+				return BlockWood.EnumLogVariant.a(itemstack.getData()).d();
+			}
+
+			public Object apply(Object object) {
+				return this.a((ItemStack) object);
+			}
+		})).b("wood"));
+		a(Blocks.SAPLING, (Item) (new ItemMultiTexture(Blocks.SAPLING, Blocks.SAPLING, new Function() {
+			@Nullable
+			public String a(@Nullable ItemStack itemstack) {
+				return BlockWood.EnumLogVariant.a(itemstack.getData()).d();
+			}
+
+			public Object apply(Object object) {
+				return this.a((ItemStack) object);
+			}
+		})).b("sapling"));
+		b(Blocks.BEDROCK);
+		a((Block) Blocks.SAND, (Item) (new ItemMultiTexture(Blocks.SAND, Blocks.SAND, new Function() {
+			@Nullable
+			public String a(@Nullable ItemStack itemstack) {
+				return BlockSand.EnumSandVariant.a(itemstack.getData()).d();
+			}
+
+			public Object apply(Object object) {
+				return this.a((ItemStack) object);
+			}
+		})).b("sand"));
+		b(Blocks.GRAVEL);
+		b(Blocks.GOLD_ORE);
+		b(Blocks.IRON_ORE);
+		b(Blocks.COAL_ORE);
+		a(Blocks.LOG, (Item) (new ItemMultiTexture(Blocks.LOG, Blocks.LOG, new Function() {
+			@Nullable
+			public String a(@Nullable ItemStack itemstack) {
+				return BlockWood.EnumLogVariant.a(itemstack.getData()).d();
+			}
+
+			public Object apply(Object object) {
+				return this.a((ItemStack) object);
+			}
+		})).b("log"));
+		a(Blocks.LOG2, (Item) (new ItemMultiTexture(Blocks.LOG2, Blocks.LOG2, new Function() {
+			@Nullable
+			public String a(@Nullable ItemStack itemstack) {
+				return BlockWood.EnumLogVariant.a(itemstack.getData() + 4).d();
+			}
+
+			public Object apply(Object object) {
+				return this.a((ItemStack) object);
+			}
+		})).b("log"));
+		a((Block) Blocks.LEAVES, (Item) (new ItemLeaves(Blocks.LEAVES)).b("leaves"));
+		a((Block) Blocks.LEAVES2, (Item) (new ItemLeaves(Blocks.LEAVES2)).b("leaves"));
+		a(Blocks.SPONGE, (Item) (new ItemMultiTexture(Blocks.SPONGE, Blocks.SPONGE, new Function() {
+			@Nullable
+			public String a(@Nullable ItemStack itemstack) {
+				return (itemstack.getData() & 1) == 1 ? "wet" : "dry";
+			}
+
+			public Object apply(Object object) {
+				return this.a((ItemStack) object);
+			}
+		})).b("sponge"));
+		b(Blocks.GLASS);
+		b(Blocks.LAPIS_ORE);
+		b(Blocks.LAPIS_BLOCK);
+		b(Blocks.DISPENSER);
+		a(Blocks.SANDSTONE, (Item) (new ItemMultiTexture(Blocks.SANDSTONE, Blocks.SANDSTONE, new Function() {
+			@Nullable
+			public String a(@Nullable ItemStack itemstack) {
+				return BlockSandStone.EnumSandstoneVariant.a(itemstack.getData()).c();
+			}
+
+			public Object apply(Object object) {
+				return this.a((ItemStack) object);
+			}
+		})).b("sandStone"));
+		b(Blocks.NOTEBLOCK);
+		b(Blocks.GOLDEN_RAIL);
+		b(Blocks.DETECTOR_RAIL);
+		a((Block) Blocks.STICKY_PISTON, (Item) (new ItemPiston(Blocks.STICKY_PISTON)));
+		b(Blocks.WEB);
+		a((Block) Blocks.TALLGRASS,
+				(Item) (new ItemWithAuxData(Blocks.TALLGRASS, true)).a(new String[] { "shrub", "grass", "fern" }));
+		b((Block) Blocks.DEADBUSH);
+		a((Block) Blocks.PISTON, (Item) (new ItemPiston(Blocks.PISTON)));
+		a(Blocks.WOOL, (Item) (new ItemCloth(Blocks.WOOL)).b("cloth"));
+		a((Block) Blocks.YELLOW_FLOWER,
+				(Item) (new ItemMultiTexture(Blocks.YELLOW_FLOWER, Blocks.YELLOW_FLOWER, new Function() {
+					@Nullable
+					public String a(@Nullable ItemStack itemstack) {
+						return BlockFlowers.EnumFlowerVarient.a(BlockFlowers.EnumFlowerType.YELLOW, itemstack.getData())
+								.d();
+					}
+
+					public Object apply(Object object) {
+						return this.a((ItemStack) object);
+					}
+				})).b("flower"));
+		a((Block) Blocks.RED_FLOWER, (Item) (new ItemMultiTexture(Blocks.RED_FLOWER, Blocks.RED_FLOWER, new Function() {
+			@Nullable
+			public String a(@Nullable ItemStack itemstack) {
+				return BlockFlowers.EnumFlowerVarient.a(BlockFlowers.EnumFlowerType.RED, itemstack.getData()).d();
+			}
+
+			public Object apply(Object object) {
+				return this.a((ItemStack) object);
+			}
+		})).b("rose"));
+		b((Block) Blocks.BROWN_MUSHROOM);
+		b((Block) Blocks.RED_MUSHROOM);
+		b(Blocks.GOLD_BLOCK);
+		b(Blocks.IRON_BLOCK);
+		a((Block) Blocks.STONE_SLAB,
+				(Item) (new ItemStep(Blocks.STONE_SLAB, Blocks.STONE_SLAB, Blocks.DOUBLE_STONE_SLAB)).b("stoneSlab"));
+		b(Blocks.BRICK_BLOCK);
+		b(Blocks.TNT);
+		b(Blocks.BOOKSHELF);
+		b(Blocks.MOSSY_COBBLESTONE);
+		b(Blocks.OBSIDIAN);
+		b(Blocks.TORCH);
+		b(Blocks.END_ROD);
+		b(Blocks.CHORUS_PLANT);
+		b(Blocks.CHORUS_FLOWER);
+		b(Blocks.PURPUR_BLOCK);
+		b(Blocks.PURPUR_PILLAR);
+		b(Blocks.PURPUR_STAIRS);
+		a((Block) Blocks.PURPUR_SLAB,
+				(Item) (new ItemStep(Blocks.PURPUR_SLAB, Blocks.PURPUR_SLAB, Blocks.PURPUR_DOUBLE_SLAB))
+						.b("purpurSlab"));
+		b(Blocks.MOB_SPAWNER);
+		b(Blocks.OAK_STAIRS);
+		b((Block) Blocks.CHEST);
+		b(Blocks.DIAMOND_ORE);
+		b(Blocks.DIAMOND_BLOCK);
+		b(Blocks.CRAFTING_TABLE);
+		b(Blocks.FARMLAND);
+		b(Blocks.FURNACE);
+		b(Blocks.LADDER);
+		b(Blocks.RAIL);
+		b(Blocks.STONE_STAIRS);
+		b(Blocks.LEVER);
+		b(Blocks.STONE_PRESSURE_PLATE);
+		b(Blocks.WOODEN_PRESSURE_PLATE);
+		b(Blocks.REDSTONE_ORE);
+		b(Blocks.REDSTONE_TORCH);
+		b(Blocks.STONE_BUTTON);
+		a(Blocks.SNOW_LAYER, (Item) (new ItemSnow(Blocks.SNOW_LAYER)));
+		b(Blocks.ICE);
+		b(Blocks.SNOW);
+		b((Block) Blocks.CACTUS);
+		b(Blocks.CLAY);
+		b(Blocks.JUKEBOX);
+		b(Blocks.FENCE);
+		b(Blocks.SPRUCE_FENCE);
+		b(Blocks.BIRCH_FENCE);
+		b(Blocks.JUNGLE_FENCE);
+		b(Blocks.DARK_OAK_FENCE);
+		b(Blocks.ACACIA_FENCE);
+		b(Blocks.PUMPKIN);
+		b(Blocks.NETHERRACK);
+		b(Blocks.SOUL_SAND);
+		b(Blocks.GLOWSTONE);
+		b(Blocks.LIT_PUMPKIN);
+		b(Blocks.TRAPDOOR);
+		a(Blocks.MONSTER_EGG, (Item) (new ItemMultiTexture(Blocks.MONSTER_EGG, Blocks.MONSTER_EGG, new Function() {
+			@Nullable
+			public String a(@Nullable ItemStack itemstack) {
+				return BlockMonsterEggs.EnumMonsterEggVarient.a(itemstack.getData()).c();
+			}
+
+			public Object apply(Object object) {
+				return this.a((ItemStack) object);
+			}
+		})).b("monsterStoneEgg"));
+		a(Blocks.STONEBRICK, (Item) (new ItemMultiTexture(Blocks.STONEBRICK, Blocks.STONEBRICK, new Function() {
+			@Nullable
+			public String a(@Nullable ItemStack itemstack) {
+				return BlockSmoothBrick.EnumStonebrickType.a(itemstack.getData()).c();
+			}
+
+			public Object apply(Object object) {
+				return this.a((ItemStack) object);
+			}
+		})).b("stonebricksmooth"));
+		b(Blocks.BROWN_MUSHROOM_BLOCK);
+		b(Blocks.RED_MUSHROOM_BLOCK);
+		b(Blocks.IRON_BARS);
+		b(Blocks.GLASS_PANE);
+		b(Blocks.MELON_BLOCK);
+		a(Blocks.VINE, (Item) (new ItemWithAuxData(Blocks.VINE, false)));
+		b(Blocks.FENCE_GATE);
+		b(Blocks.SPRUCE_FENCE_GATE);
+		b(Blocks.BIRCH_FENCE_GATE);
+		b(Blocks.JUNGLE_FENCE_GATE);
+		b(Blocks.DARK_OAK_FENCE_GATE);
+		b(Blocks.ACACIA_FENCE_GATE);
+		b(Blocks.BRICK_STAIRS);
+		b(Blocks.STONE_BRICK_STAIRS);
+		b((Block) Blocks.MYCELIUM);
+		a(Blocks.WATERLILY, (Item) (new ItemWaterLily(Blocks.WATERLILY)));
+		b(Blocks.NETHER_BRICK);
+		b(Blocks.NETHER_BRICK_FENCE);
+		b(Blocks.NETHER_BRICK_STAIRS);
+		b(Blocks.ENCHANTING_TABLE);
+		b(Blocks.END_PORTAL_FRAME);
+		b(Blocks.END_STONE);
+		b(Blocks.END_BRICKS);
+		b(Blocks.DRAGON_EGG);
+		b(Blocks.REDSTONE_LAMP);
+		a((Block) Blocks.WOODEN_SLAB,
+				(Item) (new ItemStep(Blocks.WOODEN_SLAB, Blocks.WOODEN_SLAB, Blocks.DOUBLE_WOODEN_SLAB)).b("woodSlab"));
+		b(Blocks.SANDSTONE_STAIRS);
+		b(Blocks.EMERALD_ORE);
+		b(Blocks.ENDER_CHEST);
+		b((Block) Blocks.TRIPWIRE_HOOK);
+		b(Blocks.EMERALD_BLOCK);
+		b(Blocks.SPRUCE_STAIRS);
+		b(Blocks.BIRCH_STAIRS);
+		b(Blocks.JUNGLE_STAIRS);
+		b(Blocks.COMMAND_BLOCK);
+		b((Block) Blocks.BEACON);
+		a(Blocks.COBBLESTONE_WALL,
+				(Item) (new ItemMultiTexture(Blocks.COBBLESTONE_WALL, Blocks.COBBLESTONE_WALL, new Function() {
+					@Nullable
+					public String a(@Nullable ItemStack itemstack) {
+						return BlockCobbleWall.EnumCobbleVariant.a(itemstack.getData()).c();
+					}
+
+					public Object apply(Object object) {
+						return this.a((ItemStack) object);
+					}
+				})).b("cobbleWall"));
+		b(Blocks.WOODEN_BUTTON);
+		a(Blocks.ANVIL, (Item) (new ItemAnvil(Blocks.ANVIL)).b("anvil"));
+		b(Blocks.TRAPPED_CHEST);
+		b(Blocks.LIGHT_WEIGHTED_PRESSURE_PLATE);
+		b(Blocks.HEAVY_WEIGHTED_PRESSURE_PLATE);
+		b((Block) Blocks.DAYLIGHT_DETECTOR);
+		b(Blocks.REDSTONE_BLOCK);
+		b(Blocks.QUARTZ_ORE);
+		b((Block) Blocks.HOPPER);
+		a(Blocks.QUARTZ_BLOCK, (Item) (new ItemMultiTexture(Blocks.QUARTZ_BLOCK, Blocks.QUARTZ_BLOCK,
+				new String[] { "default", "chiseled", "lines" })).b("quartzBlock"));
+		b(Blocks.QUARTZ_STAIRS);
+		b(Blocks.ACTIVATOR_RAIL);
+		b(Blocks.DROPPER);
+		a(Blocks.STAINED_HARDENED_CLAY, (Item) (new ItemCloth(Blocks.STAINED_HARDENED_CLAY)).b("clayHardenedStained"));
+		b(Blocks.BARRIER);
+		b(Blocks.IRON_TRAPDOOR);
+		b(Blocks.HAY_BLOCK);
+		a(Blocks.CARPET, (Item) (new ItemCloth(Blocks.CARPET)).b("woolCarpet"));
+		b(Blocks.HARDENED_CLAY);
+		b(Blocks.COAL_BLOCK);
+		b(Blocks.PACKED_ICE);
+		b(Blocks.ACACIA_STAIRS);
+		b(Blocks.DARK_OAK_STAIRS);
+		b(Blocks.SLIME);
+		b(Blocks.GRASS_PATH);
+		a((Block) Blocks.DOUBLE_PLANT,
+				(Item) (new ItemMultiTexture(Blocks.DOUBLE_PLANT, Blocks.DOUBLE_PLANT, new Function() {
+					@Nullable
+					public String a(@Nullable ItemStack itemstack) {
+						return BlockTallPlant.EnumTallFlowerVariants.a(itemstack.getData()).c();
+					}
+
+					public Object apply(Object object) {
+						return this.a((ItemStack) object);
+					}
+				})).b("doublePlant"));
+		a((Block) Blocks.STAINED_GLASS, (Item) (new ItemCloth(Blocks.STAINED_GLASS)).b("stainedGlass"));
+		a((Block) Blocks.STAINED_GLASS_PANE, (Item) (new ItemCloth(Blocks.STAINED_GLASS_PANE)).b("stainedGlassPane"));
+		a(Blocks.PRISMARINE, (Item) (new ItemMultiTexture(Blocks.PRISMARINE, Blocks.PRISMARINE, new Function() {
+			@Nullable
+			public String a(@Nullable ItemStack itemstack) {
+				return BlockPrismarine.EnumPrismarineVariant.a(itemstack.getData()).c();
+			}
+
+			public Object apply(Object object) {
+				return this.a((ItemStack) object);
+			}
+		})).b("prismarine"));
+		b(Blocks.SEA_LANTERN);
+		a(Blocks.RED_SANDSTONE,
+				(Item) (new ItemMultiTexture(Blocks.RED_SANDSTONE, Blocks.RED_SANDSTONE, new Function() {
+					@Nullable
+					public String a(@Nullable ItemStack itemstack) {
+						return BlockRedSandstone.EnumRedSandstoneVariant.a(itemstack.getData()).c();
+					}
+
+					public Object apply(Object object) {
+						return this.a((ItemStack) object);
+					}
+				})).b("redSandStone"));
+		b(Blocks.RED_SANDSTONE_STAIRS);
+		a((Block) Blocks.STONE_SLAB2,
+				(Item) (new ItemStep(Blocks.STONE_SLAB2, Blocks.STONE_SLAB2, Blocks.DOUBLE_STONE_SLAB2))
+						.b("stoneSlab2"));
+		b(Blocks.dc);
+		b(Blocks.dd);
+		a(256, "iron_shovel", (new ItemSpade(Item.EnumToolMaterial.IRON)).c("shovelIron"));
+		a(257, "iron_pickaxe", (new ItemPickaxe(Item.EnumToolMaterial.IRON)).c("pickaxeIron"));
+		a(258, "iron_axe", (new ItemAxe(Item.EnumToolMaterial.IRON)).c("hatchetIron"));
+		a(259, "flint_and_steel", (new ItemFlintAndSteel()).c("flintAndSteel"));
+		a(260, "apple", (new ItemFood(4, 0.3F, false)).c("apple"));
+		a(261, "bow", (new ItemBow()).c("bow"));
+		a(262, "arrow", (new ItemArrow()).c("arrow"));
+		a(263, "coal", (new ItemCoal()).c("coal"));
+		a(264, "diamond", (new Item()).c("diamond").a(CreativeModeTab.l));
+		a(265, "iron_ingot", (new Item()).c("ingotIron").a(CreativeModeTab.l));
+		a(266, "gold_ingot", (new Item()).c("ingotGold").a(CreativeModeTab.l));
+		a(267, "iron_sword", (new ItemSword(Item.EnumToolMaterial.IRON)).c("swordIron"));
+		a(268, "wooden_sword", (new ItemSword(Item.EnumToolMaterial.WOOD)).c("swordWood"));
+		a(269, "wooden_shovel", (new ItemSpade(Item.EnumToolMaterial.WOOD)).c("shovelWood"));
+		a(270, "wooden_pickaxe", (new ItemPickaxe(Item.EnumToolMaterial.WOOD)).c("pickaxeWood"));
+		a(271, "wooden_axe", (new ItemAxe(Item.EnumToolMaterial.WOOD)).c("hatchetWood"));
+		a(272, "stone_sword", (new ItemSword(Item.EnumToolMaterial.STONE)).c("swordStone"));
+		a(273, "stone_shovel", (new ItemSpade(Item.EnumToolMaterial.STONE)).c("shovelStone"));
+		a(274, "stone_pickaxe", (new ItemPickaxe(Item.EnumToolMaterial.STONE)).c("pickaxeStone"));
+		a(275, "stone_axe", (new ItemAxe(Item.EnumToolMaterial.STONE)).c("hatchetStone"));
+		a(276, "diamond_sword", (new ItemSword(Item.EnumToolMaterial.DIAMOND)).c("swordDiamond"));
+		a(277, "diamond_shovel", (new ItemSpade(Item.EnumToolMaterial.DIAMOND)).c("shovelDiamond"));
+		a(278, "diamond_pickaxe", (new ItemPickaxe(Item.EnumToolMaterial.DIAMOND)).c("pickaxeDiamond"));
+		a(279, "diamond_axe", (new ItemAxe(Item.EnumToolMaterial.DIAMOND)).c("hatchetDiamond"));
+		a(280, "stick", (new Item()).n().c("stick").a(CreativeModeTab.l));
+		a(281, "bowl", (new Item()).c("bowl").a(CreativeModeTab.l));
+		a(282, "mushroom_stew", (new ItemSoup(6)).c("mushroomStew"));
+		a(283, "golden_sword", (new ItemSword(Item.EnumToolMaterial.GOLD)).c("swordGold"));
+		a(284, "golden_shovel", (new ItemSpade(Item.EnumToolMaterial.GOLD)).c("shovelGold"));
+		a(285, "golden_pickaxe", (new ItemPickaxe(Item.EnumToolMaterial.GOLD)).c("pickaxeGold"));
+		a(286, "golden_axe", (new ItemAxe(Item.EnumToolMaterial.GOLD)).c("hatchetGold"));
+		a(287, "string", (new ItemReed(Blocks.TRIPWIRE)).c("string").a(CreativeModeTab.l));
+		a(288, "feather", (new Item()).c("feather").a(CreativeModeTab.l));
+		a(289, "gunpowder", (new Item()).c("sulphur").a(CreativeModeTab.l));
+		a(290, "wooden_hoe", (new ItemHoe(Item.EnumToolMaterial.WOOD)).c("hoeWood"));
+		a(291, "stone_hoe", (new ItemHoe(Item.EnumToolMaterial.STONE)).c("hoeStone"));
+		a(292, "iron_hoe", (new ItemHoe(Item.EnumToolMaterial.IRON)).c("hoeIron"));
+		a(293, "diamond_hoe", (new ItemHoe(Item.EnumToolMaterial.DIAMOND)).c("hoeDiamond"));
+		a(294, "golden_hoe", (new ItemHoe(Item.EnumToolMaterial.GOLD)).c("hoeGold"));
+		a(295, "wheat_seeds", (new ItemSeeds(Blocks.WHEAT, Blocks.FARMLAND)).c("seeds"));
+		a(296, "wheat", (new Item()).c("wheat").a(CreativeModeTab.l));
+		a(297, "bread", (new ItemFood(5, 0.6F, false)).c("bread"));
+		a(298, "leather_helmet",
+				(new ItemArmor(ItemArmor.EnumArmorMaterial.LEATHER, 0, EnumItemSlot.HEAD)).c("helmetCloth"));
+		a(299, "leather_chestplate",
+				(new ItemArmor(ItemArmor.EnumArmorMaterial.LEATHER, 0, EnumItemSlot.CHEST)).c("chestplateCloth"));
+		a(300, "leather_leggings",
+				(new ItemArmor(ItemArmor.EnumArmorMaterial.LEATHER, 0, EnumItemSlot.LEGS)).c("leggingsCloth"));
+		a(301, "leather_boots",
+				(new ItemArmor(ItemArmor.EnumArmorMaterial.LEATHER, 0, EnumItemSlot.FEET)).c("bootsCloth"));
+		a(302, "chainmail_helmet",
+				(new ItemArmor(ItemArmor.EnumArmorMaterial.CHAIN, 1, EnumItemSlot.HEAD)).c("helmetChain"));
+		a(303, "chainmail_chestplate",
+				(new ItemArmor(ItemArmor.EnumArmorMaterial.CHAIN, 1, EnumItemSlot.CHEST)).c("chestplateChain"));
+		a(304, "chainmail_leggings",
+				(new ItemArmor(ItemArmor.EnumArmorMaterial.CHAIN, 1, EnumItemSlot.LEGS)).c("leggingsChain"));
+		a(305, "chainmail_boots",
+				(new ItemArmor(ItemArmor.EnumArmorMaterial.CHAIN, 1, EnumItemSlot.FEET)).c("bootsChain"));
+		a(306, "iron_helmet", (new ItemArmor(ItemArmor.EnumArmorMaterial.IRON, 2, EnumItemSlot.HEAD)).c("helmetIron"));
+		a(307, "iron_chestplate",
+				(new ItemArmor(ItemArmor.EnumArmorMaterial.IRON, 2, EnumItemSlot.CHEST)).c("chestplateIron"));
+		a(308, "iron_leggings",
+				(new ItemArmor(ItemArmor.EnumArmorMaterial.IRON, 2, EnumItemSlot.LEGS)).c("leggingsIron"));
+		a(309, "iron_boots", (new ItemArmor(ItemArmor.EnumArmorMaterial.IRON, 2, EnumItemSlot.FEET)).c("bootsIron"));
+		a(310, "diamond_helmet",
+				(new ItemArmor(ItemArmor.EnumArmorMaterial.DIAMOND, 3, EnumItemSlot.HEAD)).c("helmetDiamond"));
+		a(311, "diamond_chestplate",
+				(new ItemArmor(ItemArmor.EnumArmorMaterial.DIAMOND, 3, EnumItemSlot.CHEST)).c("chestplateDiamond"));
+		a(312, "diamond_leggings",
+				(new ItemArmor(ItemArmor.EnumArmorMaterial.DIAMOND, 3, EnumItemSlot.LEGS)).c("leggingsDiamond"));
+		a(313, "diamond_boots",
+				(new ItemArmor(ItemArmor.EnumArmorMaterial.DIAMOND, 3, EnumItemSlot.FEET)).c("bootsDiamond"));
+		a(314, "golden_helmet",
+				(new ItemArmor(ItemArmor.EnumArmorMaterial.GOLD, 4, EnumItemSlot.HEAD)).c("helmetGold"));
+		a(315, "golden_chestplate",
+				(new ItemArmor(ItemArmor.EnumArmorMaterial.GOLD, 4, EnumItemSlot.CHEST)).c("chestplateGold"));
+		a(316, "golden_leggings",
+				(new ItemArmor(ItemArmor.EnumArmorMaterial.GOLD, 4, EnumItemSlot.LEGS)).c("leggingsGold"));
+		a(317, "golden_boots", (new ItemArmor(ItemArmor.EnumArmorMaterial.GOLD, 4, EnumItemSlot.FEET)).c("bootsGold"));
+		a(318, "flint", (new Item()).c("flint").a(CreativeModeTab.l));
+		a(319, "porkchop", (new ItemFood(3, 0.3F, true)).c("porkchopRaw"));
+		a(320, "cooked_porkchop", (new ItemFood(8, 0.8F, true)).c("porkchopCooked"));
+		a(321, "painting", (new ItemHanging(EntityPainting.class)).c("painting"));
+		a(322, "golden_apple", (new ItemGoldenApple(4, 1.2F, false)).h().c("appleGold"));
+		a(323, "sign", (new ItemSign()).c("sign"));
+		a(324, "wooden_door", (new ItemDoor(Blocks.WOODEN_DOOR)).c("doorOak"));
+		Item item = (new ItemBucket(Blocks.AIR)).c("bucket").d(16);
+
+		a(325, "bucket", item);
+		a(326, "water_bucket", (new ItemBucket(Blocks.FLOWING_WATER)).c("bucketWater").b(item));
+		a(327, "lava_bucket", (new ItemBucket(Blocks.FLOWING_LAVA)).c("bucketLava").b(item));
+		a(328, "minecart", (new ItemMinecart(EntityMinecartAbstract.EnumMinecartType.RIDEABLE)).c("minecart"));
+		a(329, "saddle", (new ItemSaddle()).c("saddle"));
+		a(330, "iron_door", (new ItemDoor(Blocks.IRON_DOOR)).c("doorIron"));
+		a(331, "redstone", (new ItemRedstone()).c("redstone"));
+		a(332, "snowball", (new ItemSnowball()).c("snowball"));
+		a(333, "boat", new ItemBoat(EntityBoat.EnumBoatType.OAK));
+		a(334, "leather", (new Item()).c("leather").a(CreativeModeTab.l));
+		a(335, "milk_bucket", (new ItemMilkBucket()).c("milk").b(item));
+		a(336, "brick", (new Item()).c("brick").a(CreativeModeTab.l));
+		a(337, "clay_ball", (new Item()).c("clay").a(CreativeModeTab.l));
+		a(338, "reeds", (new ItemReed(Blocks.REEDS)).c("reeds").a(CreativeModeTab.l));
+		a(339, "paper", (new Item()).c("paper").a(CreativeModeTab.f));
+		a(340, "book", (new ItemBook()).c("book").a(CreativeModeTab.f));
+		a(341, "slime_ball", (new Item()).c("slimeball").a(CreativeModeTab.f));
+		a(342, "chest_minecart", (new ItemMinecart(EntityMinecartAbstract.EnumMinecartType.CHEST)).c("minecartChest"));
+		a(343, "furnace_minecart",
+				(new ItemMinecart(EntityMinecartAbstract.EnumMinecartType.FURNACE)).c("minecartFurnace"));
+		a(344, "egg", (new ItemEgg()).c("egg"));
+		a(345, "compass", (new ItemCompass()).c("compass").a(CreativeModeTab.i));
+		a(346, "fishing_rod", (new ItemFishingRod()).c("fishingRod"));
+		a(347, "clock", (new ItemClock()).c("clock").a(CreativeModeTab.i));
+		a(348, "glowstone_dust", (new Item()).c("yellowDust").a(CreativeModeTab.l));
+		a(349, "fish", (new ItemFish(false)).c("fish").a(true));
+		a(350, "cooked_fish", (new ItemFish(true)).c("fish").a(true));
+		a(351, "dye", (new ItemDye()).c("dyePowder"));
+		a(352, "bone", (new Item()).c("bone").n().a(CreativeModeTab.f));
+		a(353, "sugar", (new Item()).c("sugar").a(CreativeModeTab.l));
+		a(354, "cake", (new ItemReed(Blocks.CAKE)).d(1).c("cake").a(CreativeModeTab.h));
+		a(355, "bed", (new ItemBed()).d(1).c("bed"));
+		a(356, "repeater", (new ItemReed(Blocks.UNPOWERED_REPEATER)).c("diode").a(CreativeModeTab.d));
+		a(357, "cookie", (new ItemFood(2, 0.1F, false)).c("cookie"));
+		a(358, "filled_map", (new ItemWorldMap()).c("map"));
+		a(359, "shears", (new ItemShears()).c("shears"));
+		a(360, "melon", (new ItemFood(2, 0.3F, false)).c("melon"));
+		a(361, "pumpkin_seeds", (new ItemSeeds(Blocks.PUMPKIN_STEM, Blocks.FARMLAND)).c("seeds_pumpkin"));
+		a(362, "melon_seeds", (new ItemSeeds(Blocks.MELON_STEM, Blocks.FARMLAND)).c("seeds_melon"));
+		a(363, "beef", (new ItemFood(3, 0.3F, true)).c("beefRaw"));
+		a(364, "cooked_beef", (new ItemFood(8, 0.8F, true)).c("beefCooked"));
+		a(365, "chicken",
+				(new ItemFood(2, 0.3F, true)).a(new MobEffect(MobEffects.HUNGER, 600, 0), 0.3F).c("chickenRaw"));
+		a(366, "cooked_chicken", (new ItemFood(6, 0.6F, true)).c("chickenCooked"));
+		a(367, "rotten_flesh",
+				(new ItemFood(4, 0.1F, true)).a(new MobEffect(MobEffects.HUNGER, 600, 0), 0.8F).c("rottenFlesh"));
+		a(368, "ender_pearl", (new ItemEnderPearl()).c("enderPearl"));
+		a(369, "blaze_rod", (new Item()).c("blazeRod").a(CreativeModeTab.l).n());
+		a(370, "ghast_tear", (new Item()).c("ghastTear").a(CreativeModeTab.k));
+		a(371, "gold_nugget", (new Item()).c("goldNugget").a(CreativeModeTab.l));
+		a(372, "nether_wart", (new ItemSeeds(Blocks.NETHER_WART, Blocks.SOUL_SAND)).c("netherStalkSeeds"));
+		a(373, "potion", (new ItemPotion()).c("potion"));
+		Item item1 = (new ItemGlassBottle()).c("glassBottle");
+
+		a(374, "glass_bottle", item1);
+		a(375, "spider_eye",
+				(new ItemFood(2, 0.8F, false)).a(new MobEffect(MobEffects.POISON, 100, 0), 1.0F).c("spiderEye"));
+		a(376, "fermented_spider_eye", (new Item()).c("fermentedSpiderEye").a(CreativeModeTab.k));
+		a(377, "blaze_powder", (new Item()).c("blazePowder").a(CreativeModeTab.k));
+		a(378, "magma_cream", (new Item()).c("magmaCream").a(CreativeModeTab.k));
+		a(379, "brewing_stand", (new ItemReed(Blocks.BREWING_STAND)).c("brewingStand").a(CreativeModeTab.k));
+		a(380, "cauldron", (new ItemReed(Blocks.cauldron)).c("cauldron").a(CreativeModeTab.k));
+		a(381, "ender_eye", (new ItemEnderEye()).c("eyeOfEnder"));
+		a(382, "speckled_melon", (new Item()).c("speckledMelon").a(CreativeModeTab.k));
+		a(383, "spawn_egg", (new ItemMonsterEgg()).c("monsterPlacer"));
+		a(384, "experience_bottle", (new ItemExpBottle()).c("expBottle"));
+		a(385, "fire_charge", (new ItemFireball()).c("fireball"));
+		a(386, "writable_book", (new ItemBookAndQuill()).c("writingBook").a(CreativeModeTab.f));
+		a(387, "written_book", (new ItemWrittenBook()).c("writtenBook").d(16));
+		a(388, "emerald", (new Item()).c("emerald").a(CreativeModeTab.l));
+		a(389, "item_frame", (new ItemHanging(EntityItemFrame.class)).c("frame"));
+		a(390, "flower_pot", (new ItemReed(Blocks.FLOWER_POT)).c("flowerPot").a(CreativeModeTab.c));
+		a(391, "carrot", (new ItemSeedFood(3, 0.6F, Blocks.CARROTS, Blocks.FARMLAND)).c("carrots"));
+		a(392, "potato", (new ItemSeedFood(1, 0.3F, Blocks.POTATOES, Blocks.FARMLAND)).c("potato"));
+		a(393, "baked_potato", (new ItemFood(5, 0.6F, false)).c("potatoBaked"));
+		a(394, "poisonous_potato",
+				(new ItemFood(2, 0.3F, false)).a(new MobEffect(MobEffects.POISON, 100, 0), 0.6F).c("potatoPoisonous"));
+		a(395, "map", (new ItemMapEmpty()).c("emptyMap"));
+		a(396, "golden_carrot", (new ItemFood(6, 1.2F, false)).c("carrotGolden").a(CreativeModeTab.k));
+		a(397, "skull", (new ItemSkull()).c("skull"));
+		a(398, "carrot_on_a_stick", (new ItemCarrotStick()).c("carrotOnAStick"));
+		a(399, "nether_star", (new ItemNetherStar()).c("netherStar").a(CreativeModeTab.l));
+		a(400, "pumpkin_pie", (new ItemFood(8, 0.3F, false)).c("pumpkinPie").a(CreativeModeTab.h));
+		a(401, "fireworks", (new ItemFireworks()).c("fireworks"));
+		a(402, "firework_charge", (new ItemFireworksCharge()).c("fireworksCharge").a(CreativeModeTab.f));
+		a(403, "enchanted_book", (new ItemEnchantedBook()).d(1).c("enchantedBook"));
+		a(404, "comparator", (new ItemReed(Blocks.UNPOWERED_COMPARATOR)).c("comparator").a(CreativeModeTab.d));
+		a(405, "netherbrick", (new Item()).c("netherbrick").a(CreativeModeTab.l));
+		a(406, "quartz", (new Item()).c("netherquartz").a(CreativeModeTab.l));
+		a(407, "tnt_minecart", (new ItemMinecart(EntityMinecartAbstract.EnumMinecartType.TNT)).c("minecartTnt"));
+		a(408, "hopper_minecart",
+				(new ItemMinecart(EntityMinecartAbstract.EnumMinecartType.HOPPER)).c("minecartHopper"));
+		a(409, "prismarine_shard", (new Item()).c("prismarineShard").a(CreativeModeTab.l));
+		a(410, "prismarine_crystals", (new Item()).c("prismarineCrystals").a(CreativeModeTab.l));
+		a(411, "rabbit", (new ItemFood(3, 0.3F, true)).c("rabbitRaw"));
+		a(412, "cooked_rabbit", (new ItemFood(5, 0.6F, true)).c("rabbitCooked"));
+		a(413, "rabbit_stew", (new ItemSoup(10)).c("rabbitStew"));
+		a(414, "rabbit_foot", (new Item()).c("rabbitFoot").a(CreativeModeTab.k));
+		a(415, "rabbit_hide", (new Item()).c("rabbitHide").a(CreativeModeTab.l));
+		a(416, "armor_stand", (new ItemArmorStand()).c("armorStand").d(16));
+		a(417, "iron_horse_armor", (new Item()).c("horsearmormetal").d(1).a(CreativeModeTab.f));
+		a(418, "golden_horse_armor", (new Item()).c("horsearmorgold").d(1).a(CreativeModeTab.f));
+		a(419, "diamond_horse_armor", (new Item()).c("horsearmordiamond").d(1).a(CreativeModeTab.f));
+		a(420, "lead", (new ItemLeash()).c("leash"));
+		a(421, "name_tag", (new ItemNameTag()).c("nameTag"));
+		a(422, "command_block_minecart", (new ItemMinecart(EntityMinecartAbstract.EnumMinecartType.COMMAND_BLOCK))
+				.c("minecartCommandBlock").a((CreativeModeTab) null));
+		a(423, "mutton", (new ItemFood(2, 0.3F, true)).c("muttonRaw"));
+		a(424, "cooked_mutton", (new ItemFood(6, 0.8F, true)).c("muttonCooked"));
+		a(425, "banner", (new ItemBanner()).b("banner"));
+		a(426, "end_crystal", new ItemEndCrystal());
+		a(427, "spruce_door", (new ItemDoor(Blocks.SPRUCE_DOOR)).c("doorSpruce"));
+		a(428, "birch_door", (new ItemDoor(Blocks.BIRCH_DOOR)).c("doorBirch"));
+		a(429, "jungle_door", (new ItemDoor(Blocks.JUNGLE_DOOR)).c("doorJungle"));
+		a(430, "acacia_door", (new ItemDoor(Blocks.ACACIA_DOOR)).c("doorAcacia"));
+		a(431, "dark_oak_door", (new ItemDoor(Blocks.DARK_OAK_DOOR)).c("doorDarkOak"));
+		a(432, "chorus_fruit", (new ItemChorusFruit(4, 0.3F)).h().c("chorusFruit").a(CreativeModeTab.l));
+		a(433, "chorus_fruit_popped", (new Item()).c("chorusFruitPopped").a(CreativeModeTab.l));
+		a(434, "beetroot", (new ItemFood(1, 0.6F, false)).c("beetroot"));
+		a(435, "beetroot_seeds", (new ItemSeeds(Blocks.BEETROOT, Blocks.FARMLAND)).c("beetroot_seeds"));
+		a(436, "beetroot_soup", (new ItemSoup(6)).c("beetroot_soup"));
+		a(437, "dragon_breath", (new Item()).a(CreativeModeTab.k).c("dragon_breath").b(item1));
+		a(438, "splash_potion", (new ItemSplashPotion()).c("splash_potion"));
+		a(439, "spectral_arrow", (new ItemSpectralArrow()).c("spectral_arrow"));
+		a(440, "tipped_arrow", (new ItemTippedArrow()).c("tipped_arrow"));
+		a(441, "lingering_potion", (new ItemLingeringPotion()).c("lingering_potion"));
+		a(442, "shield", (new ItemShield()).c("shield"));
+		a(443, "elytra", (new ItemElytra()).c("elytra"));
+		a(444, "spruce_boat", new ItemBoat(EntityBoat.EnumBoatType.SPRUCE));
+		a(445, "birch_boat", new ItemBoat(EntityBoat.EnumBoatType.BIRCH));
+		a(446, "jungle_boat", new ItemBoat(EntityBoat.EnumBoatType.JUNGLE));
+		a(447, "acacia_boat", new ItemBoat(EntityBoat.EnumBoatType.ACACIA));
+		a(448, "dark_oak_boat", new ItemBoat(EntityBoat.EnumBoatType.DARK_OAK));
+		a(2256, "record_13", (new ItemRecord("13", SoundEffects.ev)).c("record"));
+		a(2257, "record_cat", (new ItemRecord("cat", SoundEffects.ex)).c("record"));
+		a(2258, "record_blocks", (new ItemRecord("blocks", SoundEffects.ew)).c("record"));
+		a(2259, "record_chirp", (new ItemRecord("chirp", SoundEffects.ey)).c("record"));
+		a(2260, "record_far", (new ItemRecord("far", SoundEffects.ez)).c("record"));
+		a(2261, "record_mall", (new ItemRecord("mall", SoundEffects.eA)).c("record"));
+		a(2262, "record_mellohi", (new ItemRecord("mellohi", SoundEffects.eB)).c("record"));
+		a(2263, "record_stal", (new ItemRecord("stal", SoundEffects.eC)).c("record"));
+		a(2264, "record_strad", (new ItemRecord("strad", SoundEffects.eD)).c("record"));
+		a(2265, "record_ward", (new ItemRecord("ward", SoundEffects.eF)).c("record"));
+		a(2266, "record_11", (new ItemRecord("11", SoundEffects.eu)).c("record"));
+		a(2267, "record_wait", (new ItemRecord("wait", SoundEffects.eE)).c("record"));
+	}
+
+	private static void b(Block block) {
+		a(block, (Item) (new ItemBlock(block)));
+	}
+
+	protected static void a(Block block, Item item) {
+		a(Block.getId(block), (MinecraftKey) Block.REGISTRY.b(block), item);
+		Item.a.put(block, item);
+	}
+
+	private static void a(int i, String s, Item item) {
+		a(i, new MinecraftKey(s), item);
+	}
+
+	private static void a(int i, MinecraftKey minecraftkey, Item item) {
+		Item.REGISTRY.a(i, minecraftkey, item);
+	}
+
+	public static enum EnumToolMaterial {
+
+		WOOD(0, 59, 2.0F, 0.0F, 15), STONE(1, 131, 4.0F, 1.0F, 5), IRON(2, 250, 6.0F, 2.0F, 14), DIAMOND(3, 1561, 8.0F,
+				3.0F, 10), GOLD(0, 32, 12.0F, 0.0F, 22);
+
+		private final int f;
+		private final int g;
+		private final float h;
+		private final float i;
+		private final int j;
+
+		private EnumToolMaterial(int i, int j, float f, float f1, int k) {
+			this.f = i;
+			this.g = j;
+			this.h = f;
+			this.i = f1;
+			this.j = k;
+		}
+
+		public int a() {
+			return this.g;
+		}
+
+		public float b() {
+			return this.h;
+		}
+
+		public float c() {
+			return this.i;
+		}
+
+		public int d() {
+			return this.f;
+		}
+
+		public int e() {
+			return this.j;
+		}
+
+		public Item f() {
+			return this == Item.EnumToolMaterial.WOOD ? Item.getItemOf(Blocks.PLANKS)
+					: (this == Item.EnumToolMaterial.STONE ? Item.getItemOf(Blocks.COBBLESTONE)
+							: (this == Item.EnumToolMaterial.GOLD ? Items.GOLD_INGOT
+									: (this == Item.EnumToolMaterial.IRON ? Items.IRON_INGOT
+											: (this == Item.EnumToolMaterial.DIAMOND ? Items.DIAMOND : null))));
+		}
+	}
+}
diff --git a/src/main/java/net/minecraft/server/ItemMonsterEgg.java b/src/main/java/net/minecraft/server/ItemMonsterEgg.java
index 1875d88..b1b0d72 100644
--- a/src/main/java/net/minecraft/server/ItemMonsterEgg.java
+++ b/src/main/java/net/minecraft/server/ItemMonsterEgg.java
@@ -35,7 +35,7 @@ public class ItemMonsterEgg extends Item {
 			if (iblockdata.getBlock() == Blocks.MOB_SPAWNER) {
 				TileEntity tileentity = world.getTileEntity(blockposition);
 
-				if (tileentity instanceof TileEntityMobSpawner) {
+				if (tileentity instanceof TileEntityMobSpawner && !de.minetick.MigotConfig.disableSpawnerModify) {
 					MobSpawnerAbstract mobspawnerabstract = ((TileEntityMobSpawner) tileentity).getSpawner();
 
 					mobspawnerabstract.setMobName(h(itemstack));
diff --git a/src/main/java/net/minecraft/server/LoginListener.java b/src/main/java/net/minecraft/server/LoginListener.java
index 50da499..58c6218 100644
--- a/src/main/java/net/minecraft/server/LoginListener.java
+++ b/src/main/java/net/minecraft/server/LoginListener.java
@@ -34,7 +34,7 @@ public class LoginListener implements PacketLoginInListener, ITickable {
 
 	private static final AtomicInteger b = new AtomicInteger(0);
 	private static final Logger c = LogManager.getLogger();
-	private static final LightRandom random = new LightRandom(); // Torch
+	private static final LightRandom random = com.mrpowergamerbr.parappatown.utils.LightStatic.random; // Torch
 	private final byte[] e = new byte[4];
 	private final MinecraftServer server;
 	public final NetworkManager networkManager;
@@ -251,10 +251,10 @@ public class LoginListener implements PacketLoginInListener, ITickable {
 						if (LoginListener.this.i != null) {
 							// CraftBukkit start - fire PlayerPreLoginEvent
 							if (!networkManager.isConnected()) {
-                                return;
-                            }
+								return;
+							}
 
-                            new LoginHandler().fireEvents();
+							new LoginHandler().fireEvents();
 							// our call event
 						} else if (LoginListener.this.server.R()) {
 							LoginListener.c.warn("Failed to verify username but will let them in anyway!");
diff --git a/src/main/java/net/minecraft/server/MathHelper.java b/src/main/java/net/minecraft/server/MathHelper.java
index 74262e0..dbaf24a 100644
--- a/src/main/java/net/minecraft/server/MathHelper.java
+++ b/src/main/java/net/minecraft/server/MathHelper.java
@@ -9,7 +9,7 @@ public class MathHelper {
 
 	public static final float a = c(2.0F);
 	private static final float[] b = new float[65536];
-	private static final LightRandom c = new LightRandom();
+	private static final LightRandom c = com.mrpowergamerbr.parappatown.utils.LightStatic.random;
 	private static final int[] d;
 	private static final double e;
 	private static final double[] f;
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 7dc0f35..7fd311c 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -16,7 +16,6 @@ import java.util.LinkedList;
 // Migot end
 import java.util.List;
 import java.util.Queue;
-import java.util.Random;
 import java.util.UUID;
 import java.util.concurrent.Callable;
 import java.util.concurrent.Executors;
@@ -73,7 +72,7 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
 	public final MethodProfiler methodProfiler = new MethodProfiler();
 	private ServerConnection p; // Spigot
 	private final ServerPing q = new ServerPing();
-	private final LightRandom r = new LightRandom();
+	private final LightRandom r = com.mrpowergamerbr.parappatown.utils.LightStatic.random;
 	private final DataConverterManager dataConverterManager;
 	private String serverIp;
 	private int u = -1;
@@ -910,7 +909,7 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
 		FutureTask<?> entry;
 		int count = this.j.size();
 		while (count-- > 0 && (entry = this.j.poll()) != null) {
-			synchronized(this) {
+			synchronized (this) {
 				SystemUtils.a(entry, MinecraftServer.LOGGER);
 			}
 		}
@@ -934,7 +933,9 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
 		MinecraftTimings.processQueueTimer.stopTiming(); // Spigot
 
 		MinecraftTimings.chunkIOTickTimer.startTiming(); // Spigot
-		synchronized (this) { org.bukkit.craftbukkit.chunkio.ChunkIOExecutor.tick(); }
+		synchronized (this) {
+			org.bukkit.craftbukkit.chunkio.ChunkIOExecutor.tick();
+		}
 		MinecraftTimings.chunkIOTickTimer.stopTiming(); // Spigot
 
 		MinecraftTimings.timeUpdateTimer.startTiming(); // Spigot
diff --git a/src/main/java/net/minecraft/server/MobSpawnerAbstract.java b/src/main/java/net/minecraft/server/MobSpawnerAbstract.java
index ccc9fad..e3d0a05 100644
--- a/src/main/java/net/minecraft/server/MobSpawnerAbstract.java
+++ b/src/main/java/net/minecraft/server/MobSpawnerAbstract.java
@@ -44,92 +44,88 @@ public abstract class MobSpawnerAbstract {
 
 	// Torch start
 	public void c() {
-		// Paper start - Configurable mob spawner tick rate
-		if (spawnDelay > 0 && --tickDelay > 0) {
-			return;
-		}
-		tickDelay = this.a().paperConfig.mobSpawnerTickRate;
-		// Paper end
-		
-		if (!this.h()) {
-			this.e = this.d;
-            return;
-        }
+        // Paper start - Configurable mob spawner tick rate
+        if (spawnDelay > 0 && --tickDelay > 0) return;
+        tickDelay = this.a().paperConfig.mobSpawnerTickRate;
+        // Paper end
 		
-		World world = this.a();
-		BlockPosition blockposition = this.b();
-		
-		if (world.isClientSide) {
-            double d0 = (double) ((float) blockposition.getX() + world.random.nextFloat());
-            double d1 = (double) ((float) blockposition.getY() + world.random.nextFloat());
-            double d2 = (double) ((float) blockposition.getZ() + world.random.nextFloat());
-
-            world.addParticle(EnumParticle.SMOKE_NORMAL, d0, d1, d2, 0.0D, 0.0D, 0.0D, new int[0]);
-            world.addParticle(EnumParticle.FLAME, d0, d1, d2, 0.0D, 0.0D, 0.0D, new int[0]);
-            if (this.spawnDelay > 0) {
-				this.spawnDelay -= tickDelay; // Paper
-            }
-
+        if (!this.h()) {
             this.e = this.d;
-            this.d = (this.d + (double) (1000.0F / ((float) this.spawnDelay + 200.0F))) % 360.0D;
-		} else {
-			if (this.spawnDelay < -tickDelay) { // Paper
-				this.i();
-			}
-			if (this.spawnDelay > 0) {
-				this.spawnDelay -= tickDelay; // Paper
-				return;
-			}
-			
-			for (int i = 0; i < this.spawnCount; ++i) {
-				NBTTagCompound nbttagcompound = this.spawnData.b();
-                NBTTagList nbttaglist = nbttagcompound.getList("Pos", 6);
-                int j = nbttaglist.size();
-                double d3 = j >= 1 ? nbttaglist.e(0) : (double) blockposition.getX() + (world.random.nextDouble() - world.random.nextDouble()) * (double) this.spawnRange + 0.5D;
-                double d4 = j >= 2 ? nbttaglist.e(1) : (double) (blockposition.getY() + world.random.nextInt(3) - 1);
-                double d5 = j >= 3 ? nbttaglist.e(2) : (double) blockposition.getZ() + (world.random.nextDouble() - world.random.nextDouble()) * (double) this.spawnRange + 0.5D;
-				Entity entity = ChunkRegionLoader.a(nbttagcompound, world, d3, d4, d5, false);
-
-				if (entity == null) {
-					return;
-				}
-			
-				int k = world.a(entity.getClass(), (new AxisAlignedBB(blockposition.getX(), blockposition.getY(), blockposition.getZ(), blockposition.getX() + 1, blockposition.getY() + 1, blockposition.getZ() + 1)).g(this.spawnRange)).size();
-			
-				if (k >= this.maxNearbyEntities) {
-					this.i();
-					return;
-				}
+        } else {
+            BlockPosition blockposition = this.b();
+
+            if (this.a().isClientSide) {
+                double d0 = (double) ((float) blockposition.getX() + this.a().random.nextFloat());
+                double d1 = (double) ((float) blockposition.getY() + this.a().random.nextFloat());
+                double d2 = (double) ((float) blockposition.getZ() + this.a().random.nextFloat());
+
+                this.a().addParticle(EnumParticle.SMOKE_NORMAL, d0, d1, d2, 0.0D, 0.0D, 0.0D, new int[0]);
+                this.a().addParticle(EnumParticle.FLAME, d0, d1, d2, 0.0D, 0.0D, 0.0D, new int[0]);
+                if (this.spawnDelay > 0) {
+                    this.spawnDelay -= tickDelay; // Paper
+                }
+
+                this.e = this.d;
+                this.d = (this.d + (double) (1000.0F / ((float) this.spawnDelay + 200.0F))) % 360.0D;
+            } else {
+                if (this.spawnDelay < -tickDelay) { // Paper
+                    this.i();
+                }
+
+                if (this.spawnDelay > 0) {
+                    this.spawnDelay -= tickDelay; // Paper
+                    return;
+                }
+
+                for (int i = 0; i < this.spawnCount; ++i) {
+                    NBTTagCompound nbttagcompound = this.spawnData.b();
+                    NBTTagList nbttaglist = nbttagcompound.getList("Pos", 6);
+                    World world = this.a();
+                    int j = nbttaglist.size();
+                    double d3 = j >= 1 ? nbttaglist.e(0) : (double) blockposition.getX() + (world.random.nextDouble() - world.random.nextDouble()) * (double) this.spawnRange + 0.5D;
+                    double d4 = j >= 2 ? nbttaglist.e(1) : (double) (blockposition.getY() + world.random.nextInt(3) - 1);
+                    double d5 = j >= 3 ? nbttaglist.e(2) : (double) blockposition.getZ() + (world.random.nextDouble() - world.random.nextDouble()) * (double) this.spawnRange + 0.5D;
+                    Entity entity = ChunkRegionLoader.a(nbttagcompound, world, d3, d4, d5, false);
+
+                    if (entity == null) {
+                        return;
+                    }
+
+                    int k = world.a(entity.getClass(), (new AxisAlignedBB((double) blockposition.getX(), (double) blockposition.getY(), (double) blockposition.getZ(), (double) (blockposition.getX() + 1), (double) (blockposition.getY() + 1), (double) (blockposition.getZ() + 1))).g((double) this.spawnRange)).size();
 
-				EntityInsentient entityinsentient = entity instanceof EntityInsentient ? (EntityInsentient) entity : null;
-				entity.setPositionRotation(entity.locX, entity.locY, entity.locZ, world.random.nextFloat() * 360.0F, 0.0F);
-				
-				if (entityinsentient == null || entityinsentient.cG() && entityinsentient.canSpawn()) {
-					
-					if (nbttagcompound.d() == 1 && nbttagcompound.hasKeyOfType("id", 8) && entity instanceof EntityInsentient) {
-                        ((EntityInsentient) entity).prepare(world.D(new BlockPosition(entity)), (GroupDataEntity) null);
+                    if (k >= this.maxNearbyEntities) {
+                        this.i();
+                        return;
                     }
-					
-					// Spigot Start
-					if (entity.world.spigotConfig.nerfSpawnerMobs) {
-						entity.fromMobSpawner = true;
-					}
-					if (org.bukkit.craftbukkit.event.CraftEventFactory.callSpawnerSpawnEvent(entity, blockposition).isCancelled()) {
-						continue;
-					}
-					// Spigot End
-					
-					ChunkRegionLoader.a(entity, world, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.SPAWNER); // CraftBukkit
-					world.triggerEffect(2004, blockposition, 0);
-					if (entityinsentient != null) {
-						entityinsentient.doSpawnEffect();
-					}
-				}
+
+                    EntityInsentient entityinsentient = entity instanceof EntityInsentient ? (EntityInsentient) entity : null;
+
+                    entity.setPositionRotation(entity.locX, entity.locY, entity.locZ, world.random.nextFloat() * 360.0F, 0.0F);
+                    if (entityinsentient == null || entityinsentient.cG() && entityinsentient.canSpawn()) {
+                        if (this.spawnData.b().d() == 1 && this.spawnData.b().hasKeyOfType("id", 8) && entity instanceof EntityInsentient) {
+                            ((EntityInsentient) entity).prepare(world.D(new BlockPosition(entity)), (GroupDataEntity) null);
+                        }
+						// Spigot Start
+						if (entity.world.spigotConfig.nerfSpawnerMobs) {
+							entity.fromMobSpawner = true;
+						}
+                        if (org.bukkit.craftbukkit.event.CraftEventFactory.callSpawnerSpawnEvent(entity, blockposition).isCancelled()) {
+                            continue;
+                        }
+						// Spigot End
+                        ChunkRegionLoader.a(entity, world, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.SPAWNER); // CraftBukkit
+                        world.triggerEffect(2004, blockposition, 0);
+                        if (entityinsentient != null) {
+                            entityinsentient.doSpawnEffect();
+                        }
+                    }
+                }
+
+                this.i();
             }
+
         }
-		
-        this.i();
-	}
+    }
 	// Torch end
 
 	private void i() {
diff --git a/src/main/java/net/minecraft/server/NBTTagCompound.java b/src/main/java/net/minecraft/server/NBTTagCompound.java
index dfd279b..327c8fd 100644
--- a/src/main/java/net/minecraft/server/NBTTagCompound.java
+++ b/src/main/java/net/minecraft/server/NBTTagCompound.java
@@ -9,6 +9,7 @@ import java.util.Map.Entry;
 import java.util.Set;
 import java.util.UUID;
 import java.util.concurrent.ConcurrentHashMap;
+
 import javax.annotation.Nullable;
 
 public class NBTTagCompound extends NBTBase {
diff --git a/src/main/java/net/minecraft/server/NetworkManager.java b/src/main/java/net/minecraft/server/NetworkManager.java
index 85a2184..7762fb9 100644
--- a/src/main/java/net/minecraft/server/NetworkManager.java
+++ b/src/main/java/net/minecraft/server/NetworkManager.java
@@ -157,7 +157,8 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet<?>> {
 	}
 
 	public void sendPacket(Packet<?> packet) {
-		if (this.isConnected() && this.m() && !(packet instanceof PacketPlayOutMapChunk && !((PacketPlayOutMapChunk) packet).isReady())) { // Paper
+		if (this.isConnected() && this.m()
+				&& !(packet instanceof PacketPlayOutMapChunk && !((PacketPlayOutMapChunk) packet).isReady())) { // Paper
 			// this.m(); // Paper - Async-Anti-Xray - Move to if-statement
 			this.a(packet, (GenericFutureListener[]) null);
 		} else {
@@ -173,9 +174,10 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet<?>> {
 	}
 
 	public void sendPacket(Packet<?> packet,
-		GenericFutureListener<? extends Future<? super Void>> genericfuturelistener,
-		GenericFutureListener<? extends Future<? super Void>>... agenericfuturelistener) {
-		if (this.isConnected() && this.m() && !(packet instanceof PacketPlayOutMapChunk && !((PacketPlayOutMapChunk) packet).isReady())) { // Paper
+			GenericFutureListener<? extends Future<? super Void>> genericfuturelistener,
+			GenericFutureListener<? extends Future<? super Void>>... agenericfuturelistener) {
+		if (this.isConnected() && this.m()
+				&& !(packet instanceof PacketPlayOutMapChunk && !((PacketPlayOutMapChunk) packet).isReady())) { // Paper
 			// this.m(); // Paper - Async-Anti-Xray - Move to if-statement
 			this.a(packet, ArrayUtils.add(agenericfuturelistener, 0, genericfuturelistener));
 		} else {
@@ -234,7 +236,8 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet<?>> {
 
 	}
 
-	private boolean m() { // Paper - Async-Anti-Xray - void -> boolean used in sendPacket
+	private boolean m() { // Paper - Async-Anti-Xray - void -> boolean used in
+							// sendPacket
 		if (this.channel != null && this.channel.isOpen()) {
 			this.j.readLock().lock();
 
@@ -268,7 +271,9 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet<?>> {
 	}
 
 	public void a() {
-		synchronized (this) { this.m(); }
+		synchronized (this) {
+			this.m();
+		}
 		if (this.m instanceof ITickable) {
 			((ITickable) this.m).c();
 		}
diff --git a/src/main/java/net/minecraft/server/NoiseGenerator3Handler.java b/src/main/java/net/minecraft/server/NoiseGenerator3Handler.java
new file mode 100644
index 0000000..60c7a6c
--- /dev/null
+++ b/src/main/java/net/minecraft/server/NoiseGenerator3Handler.java
@@ -0,0 +1,214 @@
+package net.minecraft.server;
+
+import java.util.Random;
+
+import com.mrpowergamerbr.utils.LightRandom;
+
+public class NoiseGenerator3Handler {
+
+	private static int[][] e = new int[][] { { 1, 1, 0 }, { -1, 1, 0 }, { 1, -1, 0 }, { -1, -1, 0 }, { 1, 0, 1 },
+			{ -1, 0, 1 }, { 1, 0, -1 }, { -1, 0, -1 }, { 0, 1, 1 }, { 0, -1, 1 }, { 0, 1, -1 }, { 0, -1, -1 } };
+	public static final double a = Math.sqrt(3.0D);
+	private int[] f;
+	public double b;
+	public double c;
+	public double d;
+	private static final double g = 0.5D * (NoiseGenerator3Handler.a - 1.0D);
+	private static final double h = (3.0D - NoiseGenerator3Handler.a) / 6.0D;
+
+	public NoiseGenerator3Handler() {
+		this(com.mrpowergamerbr.parappatown.utils.LightStatic.random);
+	}
+
+	public NoiseGenerator3Handler(LightRandom random) {
+		this.f = new int[512];
+		this.b = random.nextDouble() * 256.0D;
+		this.c = random.nextDouble() * 256.0D;
+		this.d = random.nextDouble() * 256.0D;
+
+		int i;
+
+		for (i = 0; i < 256; this.f[i] = i++) {
+			;
+		}
+
+		for (i = 0; i < 256; ++i) {
+			int j = random.nextInt(256 - i) + i;
+			int k = this.f[i];
+
+			this.f[i] = this.f[j];
+			this.f[j] = k;
+			this.f[i + 256] = this.f[i];
+		}
+
+	}
+
+	public NoiseGenerator3Handler(Random random) {
+		this.f = new int[512];
+		this.b = random.nextDouble() * 256.0D;
+		this.c = random.nextDouble() * 256.0D;
+		this.d = random.nextDouble() * 256.0D;
+
+		int i;
+
+		for (i = 0; i < 256; this.f[i] = i++) {
+			;
+		}
+
+		for (i = 0; i < 256; ++i) {
+			int j = random.nextInt(256 - i) + i;
+			int k = this.f[i];
+
+			this.f[i] = this.f[j];
+			this.f[j] = k;
+			this.f[i + 256] = this.f[i];
+		}
+
+	}
+
+	private static int a(double d0) {
+		return d0 > 0.0D ? (int) d0 : (int) d0 - 1;
+	}
+
+	private static double a(int[] aint, double d0, double d1) {
+		return (double) aint[0] * d0 + (double) aint[1] * d1;
+	}
+
+	public double a(double d0, double d1) {
+		double d2 = 0.5D * (NoiseGenerator3Handler.a - 1.0D);
+		double d3 = (d0 + d1) * d2;
+		int i = a(d0 + d3);
+		int j = a(d1 + d3);
+		double d4 = (3.0D - NoiseGenerator3Handler.a) / 6.0D;
+		double d5 = (double) (i + j) * d4;
+		double d6 = (double) i - d5;
+		double d7 = (double) j - d5;
+		double d8 = d0 - d6;
+		double d9 = d1 - d7;
+		byte b0;
+		byte b1;
+
+		if (d8 > d9) {
+			b0 = 1;
+			b1 = 0;
+		} else {
+			b0 = 0;
+			b1 = 1;
+		}
+
+		double d10 = d8 - (double) b0 + d4;
+		double d11 = d9 - (double) b1 + d4;
+		double d12 = d8 - 1.0D + 2.0D * d4;
+		double d13 = d9 - 1.0D + 2.0D * d4;
+		int k = i & 255;
+		int l = j & 255;
+		int i1 = this.f[k + this.f[l]] % 12;
+		int j1 = this.f[k + b0 + this.f[l + b1]] % 12;
+		int k1 = this.f[k + 1 + this.f[l + 1]] % 12;
+		double d14 = 0.5D - d8 * d8 - d9 * d9;
+		double d15;
+
+		if (d14 < 0.0D) {
+			d15 = 0.0D;
+		} else {
+			d14 *= d14;
+			d15 = d14 * d14 * a(NoiseGenerator3Handler.e[i1], d8, d9);
+		}
+
+		double d16 = 0.5D - d10 * d10 - d11 * d11;
+		double d17;
+
+		if (d16 < 0.0D) {
+			d17 = 0.0D;
+		} else {
+			d16 *= d16;
+			d17 = d16 * d16 * a(NoiseGenerator3Handler.e[j1], d10, d11);
+		}
+
+		double d18 = 0.5D - d12 * d12 - d13 * d13;
+		double d19;
+
+		if (d18 < 0.0D) {
+			d19 = 0.0D;
+		} else {
+			d18 *= d18;
+			d19 = d18 * d18 * a(NoiseGenerator3Handler.e[k1], d12, d13);
+		}
+
+		return 70.0D * (d15 + d17 + d19);
+	}
+
+	public void a(double[] adouble, double d0, double d1, int i, int j, double d2, double d3, double d4) {
+		int k = 0;
+
+		for (int l = 0; l < j; ++l) {
+			double d5 = (d1 + (double) l) * d3 + this.c;
+
+			for (int i1 = 0; i1 < i; ++i1) {
+				double d6 = (d0 + (double) i1) * d2 + this.b;
+				double d7 = (d6 + d5) * NoiseGenerator3Handler.g;
+				int j1 = a(d6 + d7);
+				int k1 = a(d5 + d7);
+				double d8 = (double) (j1 + k1) * NoiseGenerator3Handler.h;
+				double d9 = (double) j1 - d8;
+				double d10 = (double) k1 - d8;
+				double d11 = d6 - d9;
+				double d12 = d5 - d10;
+				byte b0;
+				byte b1;
+
+				if (d11 > d12) {
+					b0 = 1;
+					b1 = 0;
+				} else {
+					b0 = 0;
+					b1 = 1;
+				}
+
+				double d13 = d11 - (double) b0 + NoiseGenerator3Handler.h;
+				double d14 = d12 - (double) b1 + NoiseGenerator3Handler.h;
+				double d15 = d11 - 1.0D + 2.0D * NoiseGenerator3Handler.h;
+				double d16 = d12 - 1.0D + 2.0D * NoiseGenerator3Handler.h;
+				int l1 = j1 & 255;
+				int i2 = k1 & 255;
+				int j2 = this.f[l1 + this.f[i2]] % 12;
+				int k2 = this.f[l1 + b0 + this.f[i2 + b1]] % 12;
+				int l2 = this.f[l1 + 1 + this.f[i2 + 1]] % 12;
+				double d17 = 0.5D - d11 * d11 - d12 * d12;
+				double d18;
+
+				if (d17 < 0.0D) {
+					d18 = 0.0D;
+				} else {
+					d17 *= d17;
+					d18 = d17 * d17 * a(NoiseGenerator3Handler.e[j2], d11, d12);
+				}
+
+				double d19 = 0.5D - d13 * d13 - d14 * d14;
+				double d20;
+
+				if (d19 < 0.0D) {
+					d20 = 0.0D;
+				} else {
+					d19 *= d19;
+					d20 = d19 * d19 * a(NoiseGenerator3Handler.e[k2], d13, d14);
+				}
+
+				double d21 = 0.5D - d15 * d15 - d16 * d16;
+				double d22;
+
+				if (d21 < 0.0D) {
+					d22 = 0.0D;
+				} else {
+					d21 *= d21;
+					d22 = d21 * d21 * a(NoiseGenerator3Handler.e[l2], d15, d16);
+				}
+
+				int i3 = k++;
+
+				adouble[i3] += 70.0D * (d18 + d20 + d22) * d4;
+			}
+		}
+
+	}
+}
diff --git a/src/main/java/net/minecraft/server/NoiseGeneratorPerlin.java b/src/main/java/net/minecraft/server/NoiseGeneratorPerlin.java
new file mode 100644
index 0000000..7ce1cc4
--- /dev/null
+++ b/src/main/java/net/minecraft/server/NoiseGeneratorPerlin.java
@@ -0,0 +1,240 @@
+package net.minecraft.server;
+
+import java.util.Random;
+
+import com.mrpowergamerbr.utils.LightRandom;
+
+public class NoiseGeneratorPerlin extends NoiseGenerator {
+
+	private int[] d;
+	public double a;
+	public double b;
+	public double c;
+	private static final double[] e = new double[] { 1.0D, -1.0D, 1.0D, -1.0D, 1.0D, -1.0D, 1.0D, -1.0D, 0.0D, 0.0D,
+			0.0D, 0.0D, 1.0D, 0.0D, -1.0D, 0.0D };
+	private static final double[] f = new double[] { 1.0D, 1.0D, -1.0D, -1.0D, 0.0D, 0.0D, 0.0D, 0.0D, 1.0D, -1.0D,
+			1.0D, -1.0D, 1.0D, -1.0D, 1.0D, -1.0D };
+	private static final double[] g = new double[] { 0.0D, 0.0D, 0.0D, 0.0D, 1.0D, 1.0D, -1.0D, -1.0D, 1.0D, 1.0D,
+			-1.0D, -1.0D, 0.0D, 1.0D, 0.0D, -1.0D };
+	private static final double[] h = new double[] { 1.0D, -1.0D, 1.0D, -1.0D, 1.0D, -1.0D, 1.0D, -1.0D, 0.0D, 0.0D,
+			0.0D, 0.0D, 1.0D, 0.0D, -1.0D, 0.0D };
+	private static final double[] i = new double[] { 0.0D, 0.0D, 0.0D, 0.0D, 1.0D, 1.0D, -1.0D, -1.0D, 1.0D, 1.0D,
+			-1.0D, -1.0D, 0.0D, 1.0D, 0.0D, -1.0D };
+
+	public NoiseGeneratorPerlin() {
+		this(com.mrpowergamerbr.parappatown.utils.LightStatic.random);
+	}
+
+	public NoiseGeneratorPerlin(LightRandom random) {
+		this.d = new int[512];
+		this.a = random.nextDouble() * 256.0D;
+		this.b = random.nextDouble() * 256.0D;
+		this.c = random.nextDouble() * 256.0D;
+
+		int i;
+
+		for (i = 0; i < 256; this.d[i] = i++) {
+			;
+		}
+
+		for (i = 0; i < 256; ++i) {
+			int j = random.nextInt(256 - i) + i;
+			int k = this.d[i];
+
+			this.d[i] = this.d[j];
+			this.d[j] = k;
+			this.d[i + 256] = this.d[i];
+		}
+
+	}
+
+	public NoiseGeneratorPerlin(Random random) {
+		this.d = new int[512];
+		this.a = random.nextDouble() * 256.0D;
+		this.b = random.nextDouble() * 256.0D;
+		this.c = random.nextDouble() * 256.0D;
+
+		int i;
+
+		for (i = 0; i < 256; this.d[i] = i++) {
+			;
+		}
+
+		for (i = 0; i < 256; ++i) {
+			int j = random.nextInt(256 - i) + i;
+			int k = this.d[i];
+
+			this.d[i] = this.d[j];
+			this.d[j] = k;
+			this.d[i + 256] = this.d[i];
+		}
+
+	}
+
+	public final double b(double d0, double d1, double d2) {
+		return d1 + d0 * (d2 - d1);
+	}
+
+	public final double a(int i, double d0, double d1) {
+		int j = i & 15;
+
+		return NoiseGeneratorPerlin.h[j] * d0 + NoiseGeneratorPerlin.i[j] * d1;
+	}
+
+	public final double a(int i, double d0, double d1, double d2) {
+		int j = i & 15;
+
+		return NoiseGeneratorPerlin.e[j] * d0 + NoiseGeneratorPerlin.f[j] * d1 + NoiseGeneratorPerlin.g[j] * d2;
+	}
+
+	public void a(double[] adouble, double d0, double d1, double d2, int i, int j, int k, double d3, double d4,
+			double d5, double d6) {
+		int l;
+		int i1;
+		double d7;
+		double d8;
+		int j1;
+		double d9;
+		int k1;
+		int l1;
+		double d10;
+		int i2;
+		int j2;
+
+		if (j == 1) {
+			boolean flag = false;
+			boolean flag1 = false;
+			boolean flag2 = false;
+			boolean flag3 = false;
+			double d11 = 0.0D;
+			double d12 = 0.0D;
+
+			i2 = 0;
+			double d13 = 1.0D / d6;
+
+			for (int k2 = 0; k2 < i; ++k2) {
+				d7 = d0 + (double) k2 * d3 + this.a;
+				int l2 = (int) d7;
+
+				if (d7 < (double) l2) {
+					--l2;
+				}
+
+				int i3 = l2 & 255;
+
+				d7 -= (double) l2;
+				d8 = d7 * d7 * d7 * (d7 * (d7 * 6.0D - 15.0D) + 10.0D);
+
+				for (j1 = 0; j1 < k; ++j1) {
+					d9 = d2 + (double) j1 * d5 + this.c;
+					k1 = (int) d9;
+					if (d9 < (double) k1) {
+						--k1;
+					}
+
+					l1 = k1 & 255;
+					d9 -= (double) k1;
+					d10 = d9 * d9 * d9 * (d9 * (d9 * 6.0D - 15.0D) + 10.0D);
+					l = this.d[i3] + 0;
+					int j3 = this.d[l] + l1;
+					int k3 = this.d[i3 + 1] + 0;
+
+					i1 = this.d[k3] + l1;
+					d11 = this.b(d8, this.a(this.d[j3], d7, d9), this.a(this.d[i1], d7 - 1.0D, 0.0D, d9));
+					d12 = this.b(d8, this.a(this.d[j3 + 1], d7, 0.0D, d9 - 1.0D),
+							this.a(this.d[i1 + 1], d7 - 1.0D, 0.0D, d9 - 1.0D));
+					double d14 = this.b(d10, d11, d12);
+
+					j2 = i2++;
+					adouble[j2] += d14 * d13;
+				}
+			}
+
+		} else {
+			l = 0;
+			double d15 = 1.0D / d6;
+
+			i1 = -1;
+			boolean flag4 = false;
+			boolean flag5 = false;
+			boolean flag6 = false;
+			boolean flag7 = false;
+			boolean flag8 = false;
+			boolean flag9 = false;
+			double d16 = 0.0D;
+
+			d7 = 0.0D;
+			double d17 = 0.0D;
+
+			d8 = 0.0D;
+
+			for (j1 = 0; j1 < i; ++j1) {
+				d9 = d0 + (double) j1 * d3 + this.a;
+				k1 = (int) d9;
+				if (d9 < (double) k1) {
+					--k1;
+				}
+
+				l1 = k1 & 255;
+				d9 -= (double) k1;
+				d10 = d9 * d9 * d9 * (d9 * (d9 * 6.0D - 15.0D) + 10.0D);
+
+				for (int l3 = 0; l3 < k; ++l3) {
+					double d18 = d2 + (double) l3 * d5 + this.c;
+					int i4 = (int) d18;
+
+					if (d18 < (double) i4) {
+						--i4;
+					}
+
+					int j4 = i4 & 255;
+
+					d18 -= (double) i4;
+					double d19 = d18 * d18 * d18 * (d18 * (d18 * 6.0D - 15.0D) + 10.0D);
+
+					for (int k4 = 0; k4 < j; ++k4) {
+						double d20 = d1 + (double) k4 * d4 + this.b;
+						int l4 = (int) d20;
+
+						if (d20 < (double) l4) {
+							--l4;
+						}
+
+						int i5 = l4 & 255;
+
+						d20 -= (double) l4;
+						double d21 = d20 * d20 * d20 * (d20 * (d20 * 6.0D - 15.0D) + 10.0D);
+
+						if (k4 == 0 || i5 != i1) {
+							i1 = i5;
+							int j5 = this.d[l1] + i5;
+							int k5 = this.d[j5] + j4;
+							int l5 = this.d[j5 + 1] + j4;
+							int i6 = this.d[l1 + 1] + i5;
+
+							i2 = this.d[i6] + j4;
+							int j6 = this.d[i6 + 1] + j4;
+
+							d16 = this.b(d10, this.a(this.d[k5], d9, d20, d18),
+									this.a(this.d[i2], d9 - 1.0D, d20, d18));
+							d7 = this.b(d10, this.a(this.d[l5], d9, d20 - 1.0D, d18),
+									this.a(this.d[j6], d9 - 1.0D, d20 - 1.0D, d18));
+							d17 = this.b(d10, this.a(this.d[k5 + 1], d9, d20, d18 - 1.0D),
+									this.a(this.d[i2 + 1], d9 - 1.0D, d20, d18 - 1.0D));
+							d8 = this.b(d10, this.a(this.d[l5 + 1], d9, d20 - 1.0D, d18 - 1.0D),
+									this.a(this.d[j6 + 1], d9 - 1.0D, d20 - 1.0D, d18 - 1.0D));
+						}
+
+						double d22 = this.b(d21, d16, d7);
+						double d23 = this.b(d21, d17, d8);
+						double d24 = this.b(d19, d22, d23);
+
+						j2 = l++;
+						adouble[j2] += d24 * d15;
+					}
+				}
+			}
+
+		}
+	}
+}
diff --git a/src/main/java/net/minecraft/server/PersistentVillage.java b/src/main/java/net/minecraft/server/PersistentVillage.java
index 67357bc..9060b7d 100644
--- a/src/main/java/net/minecraft/server/PersistentVillage.java
+++ b/src/main/java/net/minecraft/server/PersistentVillage.java
@@ -2,7 +2,6 @@ package net.minecraft.server;
 
 import java.util.Iterator;
 import java.util.List;
-import java.util.concurrent.CopyOnWriteArrayList;
 
 import com.google.common.collect.Lists;
 
@@ -10,8 +9,8 @@ public class PersistentVillage extends PersistentBase {
 
 	private World world;
 	private final List<BlockPosition> c = Lists.newArrayList();
-    private final List<VillageDoor> d = Lists.newArrayList();
-    private final List<Village> villages = Lists.newArrayList();
+	private final List<VillageDoor> d = Lists.newArrayList();
+	private final List<Village> villages = Lists.newArrayList();
 	private int time;
 
 	public PersistentVillage(String s) {
diff --git a/src/main/java/net/minecraft/server/PlayerChunkMap.java b/src/main/java/net/minecraft/server/PlayerChunkMap.java
index 566c280..4322ff8 100644
--- a/src/main/java/net/minecraft/server/PlayerChunkMap.java
+++ b/src/main/java/net/minecraft/server/PlayerChunkMap.java
@@ -55,13 +55,18 @@ public class PlayerChunkMap {
 	// TacoSpigot start - catch async access
 	private final List<EntityPlayer> managedPlayers = AsyncCatcher.catchAsyncUsage(
 			new java.util.concurrent.CopyOnWriteArrayList(), "list access PlayerChunkMap.managedPlayers");
-	// private final Long2ObjectMap<PlayerChunk> e = new Long2ObjectOpenHashMap(4096);
+	// private final Long2ObjectMap<PlayerChunk> e = new
+	// Long2ObjectOpenHashMap(4096);
 	private final Map<Long, PlayerChunk> e = new CopyOnWriteMap();
-	// private final Set<PlayerChunk> f = AsyncCatcher.catchAsyncUsage(Sets.newHashSet(), "set access PlayerChunkMap.f");
+	// private final Set<PlayerChunk> f =
+	// AsyncCatcher.catchAsyncUsage(Sets.newHashSet(), "set access
+	// PlayerChunkMap.f");
 	private final Set<PlayerChunk> f = Sets.newConcurrentHashSet();
 	private final Queue<PlayerChunk> g = new ConcurrentLinkedQueue<PlayerChunk>();
 	private final Queue<PlayerChunk> h = new ConcurrentLinkedQueue<PlayerChunk>();
-	// private final List<PlayerChunk> i = AsyncCatcher.catchAsyncUsage(Lists.newArrayList(), "list access PlayerChunkMap.i");
+	// private final List<PlayerChunk> i =
+	// AsyncCatcher.catchAsyncUsage(Lists.newArrayList(), "list access
+	// PlayerChunkMap.i");
 	private final Queue<PlayerChunk> i = Queues.newConcurrentLinkedQueue();
 	// TacoSpigot end
 	private int j;
@@ -426,8 +431,11 @@ public class PlayerChunkMap {
 		return playerchunk != null && playerchunk.d(entityplayer) && playerchunk.e();
 	}
 
-	public final void setViewDistanceForAll(int viewDistance) { this.a(viewDistance); } // Paper - OBFHELPER
-    // Paper start - Separate into two methods
+	public final void setViewDistanceForAll(int viewDistance) {
+		this.a(viewDistance);
+	} // Paper - OBFHELPER
+	// Paper start - Separate into two methods
+
 	public void a(int i) {
 		i = MathHelper.clamp(i, 3, 32);
 		if (i != this.j) {
@@ -437,50 +445,57 @@ public class PlayerChunkMap {
 
 			while (iterator.hasNext()) {
 				EntityPlayer entityplayer = (EntityPlayer) iterator.next();
-				this.setViewDistance(entityplayer, i, false); // Paper - Split, don't mark sort pending, we'll handle it after
-            }
-
-            this.j = i;
-            this.e();
-        }
-    }
-
-    public void setViewDistance(EntityPlayer entityplayer, int i) {
-        this.setViewDistance(entityplayer, i, true); // Mark sort pending by default so we don't have to remember to do so all the time
-    }
-    
-    // Copied from above with minor changes
-    public void setViewDistance(EntityPlayer entityplayer, int i, boolean markSort) {
-        i = MathHelper.clamp(i, 3, 32);
-        int oldViewDistance = entityplayer.getViewDistance();
-        if (i != oldViewDistance) {
-            int j = i - oldViewDistance;
-            
-            int k = (int) entityplayer.locX >> 4;
-            int l = (int) entityplayer.locZ >> 4;
-            int i1;
-            int j1;
-
-            if (j > 0) {
-                for (i1 = k - i; i1 <= k + i; ++i1) {
-                    for (j1 = l - i; j1 <= l + i; ++j1) {
-                        PlayerChunk playerchunk = this.c(i1, j1);
-
-                        if (!playerchunk.d(entityplayer)) {
-                            playerchunk.a(entityplayer);
+				this.setViewDistance(entityplayer, i, false); // Paper - Split,
+																// don't mark
+																// sort pending,
+																// we'll handle
+																// it after
+			}
+
+			this.j = i;
+			this.e();
+		}
+	}
+
+	public void setViewDistance(EntityPlayer entityplayer, int i) {
+		this.setViewDistance(entityplayer, i, true); // Mark sort pending by
+														// default so we don't
+														// have to remember to
+														// do so all the time
+	}
+
+	// Copied from above with minor changes
+	public void setViewDistance(EntityPlayer entityplayer, int i, boolean markSort) {
+		i = MathHelper.clamp(i, 3, 32);
+		int oldViewDistance = entityplayer.getViewDistance();
+		if (i != oldViewDistance) {
+			int j = i - oldViewDistance;
+
+			int k = (int) entityplayer.locX >> 4;
+			int l = (int) entityplayer.locZ >> 4;
+			int i1;
+			int j1;
+
+			if (j > 0) {
+				for (i1 = k - i; i1 <= k + i; ++i1) {
+					for (j1 = l - i; j1 <= l + i; ++j1) {
+						PlayerChunk playerchunk = this.c(i1, j1);
+
+						if (!playerchunk.d(entityplayer)) {
+							playerchunk.a(entityplayer);
 						}
 					}
 				}
-            } else {
-                for (i1 = k - oldViewDistance; i1 <= k + oldViewDistance; ++i1) {
-                    for (j1 = l - oldViewDistance; j1 <= l + oldViewDistance; ++j1) {
-                        if (!this.a(i1, j1, k, l, i)) {
-                            this.c(i1, j1).b(entityplayer);
+			} else {
+				for (i1 = k - oldViewDistance; i1 <= k + oldViewDistance; ++i1) {
+					for (j1 = l - oldViewDistance; j1 <= l + oldViewDistance; ++j1) {
+						if (!this.a(i1, j1, k, l, i)) {
+							this.c(i1, j1).b(entityplayer);
 						}
 					}
 				}
 				if (markSort) {
-                    this.e();
+					this.e();
 				}
 			}
 
@@ -585,7 +600,7 @@ public class PlayerChunkMap {
 		}
 		if (viewDistance != oldViewDistance) {
 			// Order matters
-            this.setViewDistance(player, viewDistance);
+			this.setViewDistance(player, viewDistance);
 			player.setViewDistance(viewDistance);
 		}
 	}
diff --git a/src/main/java/net/minecraft/server/PlayerConnection.java b/src/main/java/net/minecraft/server/PlayerConnection.java
index 5ed6708..2bf92cd 100644
--- a/src/main/java/net/minecraft/server/PlayerConnection.java
+++ b/src/main/java/net/minecraft/server/PlayerConnection.java
@@ -1231,24 +1231,28 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
 		}
 
 	}
-	
+
+	/*
 	class SendTask extends RecursiveAction {
 		Packet<?> packet;
-        SendTask(Packet<?> packet) { this.packet = packet; }
-        @Override protected void compute() { sendPacket_sub(packet); }
-    }
-	
+
+		SendTask(Packet<?> packet) {
+			this.packet = packet;
+		}
+
+		@Override
+		protected void compute() {
+			sendPacket_sub(packet);
+		}
+	}
+
 	public void sendPacket(Packet<?> packet) {
 		SendTask task = new SendTask(packet);
 		task.fork();
 	}
+	*/
 
-	public void sendPacket_sub(final Packet<?> packet) {
-		if (packet instanceof PacketPlayOutUnloadChunk) {
-			synchronized(this) { this.networkManager.sendPacket(packet); }
-			return;
-		}
-		
+	public void sendPacket(final Packet<?> packet) {
 		if (packet instanceof PacketPlayOutChat) {
 			PacketPlayOutChat packetplayoutchat = (PacketPlayOutChat) packet;
 			EntityHuman.EnumChatVisibility entityhuman_enumchatvisibility = this.player.getChatFlags();
@@ -1267,7 +1271,8 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
 			return;
 		} else if (packet instanceof PacketPlayOutSpawnPosition) {
 			PacketPlayOutSpawnPosition packet6 = (PacketPlayOutSpawnPosition) packet;
-			this.player.compassTarget = new Location(this.getPlayer().getWorld(), packet6.position.getX(), packet6.position.getY(), packet6.position.getZ());
+			this.player.compassTarget = new Location(this.getPlayer().getWorld(), packet6.position.getX(),
+					packet6.position.getY(), packet6.position.getZ());
 		}
 		// CraftBukkit end
 
@@ -2476,7 +2481,8 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
 			TileEntitySign tileentitysign = (TileEntitySign) tileentity;
 
 			if (!tileentitysign.c() || tileentitysign.d() != this.player) {
-				this.minecraftServer.warning("Player " + this.player.getName() + " just tried to change non-editable sign");
+				this.minecraftServer
+						.warning("Player " + this.player.getName() + " just tried to change non-editable sign");
 				this.sendPacket(tileentity.getUpdatePacket()); // CraftBukkit
 				return;
 			}
@@ -2581,7 +2587,9 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
 		String result = "";
 		for (String name : mods.keySet()) {
 			result += name + ": " + mods.get(name) + "\n";
-			if (!this.progressMods(name)) { return result; }
+			if (!this.progressMods(name)) {
+				return result;
+			}
 		}
 		return result;
 	}
@@ -2614,7 +2622,7 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
 	private void infoOutput(String player) {
 		this.logOutput("Player %s status:\n" + "Mod(s):%s", player, this.formatMods(this.mods));
 	}
-	
+
 	private boolean progressMods(String currentMod) {
 		for (String disableMod : MigotConfig.disableMods) {
 			// Strict mode
diff --git a/src/main/java/net/minecraft/server/RegionFile.java b/src/main/java/net/minecraft/server/RegionFile.java
index f751f41..67b2555 100644
--- a/src/main/java/net/minecraft/server/RegionFile.java
+++ b/src/main/java/net/minecraft/server/RegionFile.java
@@ -352,7 +352,9 @@ public class RegionFile {
 
 	public void c() throws IOException {
 		if (this.c != null) {
-			synchronized(this) { this.c.close(); }
+			synchronized (this) {
+				this.c.close();
+			}
 		}
 
 	}
diff --git a/src/main/java/net/minecraft/server/RemoteStatusListener.java b/src/main/java/net/minecraft/server/RemoteStatusListener.java
new file mode 100644
index 0000000..773b7b3
--- /dev/null
+++ b/src/main/java/net/minecraft/server/RemoteStatusListener.java
@@ -0,0 +1,337 @@
+package net.minecraft.server;
+
+import java.io.IOException;
+import java.net.DatagramPacket;
+import java.net.DatagramSocket;
+import java.net.InetAddress;
+import java.net.PortUnreachableException;
+import java.net.SocketAddress;
+import java.net.SocketException;
+import java.net.SocketTimeoutException;
+import java.net.UnknownHostException;
+import java.util.Date;
+import java.util.Iterator;
+import java.util.Map;
+import java.util.Map.Entry;
+
+import com.google.common.collect.Maps;
+
+public class RemoteStatusListener extends RemoteConnectionThread {
+
+	private long h;
+	private int i;
+	private int j;
+	private int k;
+	private String l;
+	private String m;
+	private DatagramSocket n;
+	private byte[] o = new byte[1460];
+	private DatagramPacket p;
+	private Map<SocketAddress, String> q;
+	private String r;
+	private String s;
+	private Map<SocketAddress, RemoteStatusListener.RemoteStatusChallenge> t;
+	private long u;
+	private RemoteStatusReply v;
+	private long w;
+
+	public RemoteStatusListener(IMinecraftServer iminecraftserver) {
+		super(iminecraftserver, "Query Listener");
+		this.i = iminecraftserver.a("query.port", 0);
+		this.s = iminecraftserver.d_();
+		this.j = iminecraftserver.e_();
+		this.l = iminecraftserver.f_();
+		this.k = iminecraftserver.I();
+		this.m = iminecraftserver.S();
+		this.w = 0L;
+		this.r = "0.0.0.0";
+		if (!this.s.isEmpty() && !this.r.equals(this.s)) {
+			this.r = this.s;
+		} else {
+			this.s = "0.0.0.0";
+
+			try {
+				InetAddress inetaddress = InetAddress.getLocalHost();
+
+				this.r = inetaddress.getHostAddress();
+			} catch (UnknownHostException unknownhostexception) {
+				this.c("Unable to determine local host IP, please set server-ip in \'" + iminecraftserver.b() + "\' : "
+						+ unknownhostexception.getMessage());
+			}
+		}
+
+		if (0 == this.i) {
+			this.i = this.j;
+			this.b("Setting default query port to " + this.i);
+			iminecraftserver.a("query.port", (Object) Integer.valueOf(this.i));
+			iminecraftserver.a("debug", (Object) Boolean.valueOf(false));
+			iminecraftserver.a();
+		}
+
+		this.q = Maps.newHashMap();
+		this.v = new RemoteStatusReply(1460);
+		this.t = Maps.newHashMap();
+		this.u = (new Date()).getTime();
+	}
+
+	private void a(byte[] abyte, DatagramPacket datagrampacket) throws IOException {
+		this.n.send(new DatagramPacket(abyte, abyte.length, datagrampacket.getSocketAddress()));
+	}
+
+	private boolean a(DatagramPacket datagrampacket) throws IOException {
+		byte[] abyte = datagrampacket.getData();
+		int i = datagrampacket.getLength();
+		SocketAddress socketaddress = datagrampacket.getSocketAddress();
+
+		this.a("Packet len " + i + " [" + socketaddress + "]");
+		if (3 <= i && -2 == abyte[0] && -3 == abyte[1]) {
+			this.a("Packet \'" + StatusChallengeUtils.a(abyte[2]) + "\' [" + socketaddress + "]");
+			switch (abyte[2]) {
+			case 0:
+				if (!this.c(datagrampacket).booleanValue()) {
+					this.a("Invalid challenge [" + socketaddress + "]");
+					return false;
+				} else if (15 == i) {
+					this.a(this.b(datagrampacket), datagrampacket);
+					this.a("Rules [" + socketaddress + "]");
+				} else {
+					RemoteStatusReply remotestatusreply = new RemoteStatusReply(1460);
+
+					remotestatusreply.a((int) 0);
+					remotestatusreply.a(this.a(datagrampacket.getSocketAddress()));
+					remotestatusreply.a(this.l);
+					remotestatusreply.a("SMP");
+					remotestatusreply.a(this.m);
+					remotestatusreply.a(Integer.toString(this.d()));
+					remotestatusreply.a(Integer.toString(this.k));
+					remotestatusreply.a((short) this.j);
+					remotestatusreply.a(this.r);
+					this.a(remotestatusreply.a(), datagrampacket);
+					this.a("Status [" + socketaddress + "]");
+				}
+
+			default:
+				return true;
+
+			case 9:
+				this.d(datagrampacket);
+				this.a("Challenge [" + socketaddress + "]");
+				return true;
+			}
+		} else {
+			this.a("Invalid packet [" + socketaddress + "]");
+			return false;
+		}
+	}
+
+	private byte[] b(DatagramPacket datagrampacket) throws IOException {
+		long i = MinecraftServer.av();
+
+		if (i < this.w + 5000L) {
+			byte[] abyte = this.v.a();
+			byte[] abyte1 = this.a(datagrampacket.getSocketAddress());
+
+			abyte[1] = abyte1[0];
+			abyte[2] = abyte1[1];
+			abyte[3] = abyte1[2];
+			abyte[4] = abyte1[3];
+			return abyte;
+		} else {
+			this.w = i;
+			this.v.b();
+			this.v.a((int) 0);
+			this.v.a(this.a(datagrampacket.getSocketAddress()));
+			this.v.a("splitnum");
+			this.v.a((int) 128);
+			this.v.a((int) 0);
+			this.v.a("hostname");
+			this.v.a(this.l);
+			this.v.a("gametype");
+			this.v.a("SMP");
+			this.v.a("game_id");
+			this.v.a("MINECRAFT");
+			this.v.a("version");
+			this.v.a(this.b.getVersion());
+			this.v.a("plugins");
+			this.v.a(this.b.getPlugins());
+			this.v.a("map");
+			this.v.a(this.m);
+			this.v.a("numplayers");
+			this.v.a("" + this.d());
+			this.v.a("maxplayers");
+			this.v.a("" + this.k);
+			this.v.a("hostport");
+			this.v.a("" + this.j);
+			this.v.a("hostip");
+			this.v.a(this.r);
+			this.v.a((int) 0);
+			this.v.a((int) 1);
+			this.v.a("player_");
+			this.v.a((int) 0);
+			String[] astring = this.b.getPlayers();
+			String[] astring1 = astring;
+			int j = astring.length;
+
+			for (int k = 0; k < j; ++k) {
+				String s = astring1[k];
+
+				this.v.a(s);
+			}
+
+			this.v.a((int) 0);
+			return this.v.a();
+		}
+	}
+
+	private byte[] a(SocketAddress socketaddress) {
+		return ((RemoteStatusListener.RemoteStatusChallenge) this.t.get(socketaddress)).c();
+	}
+
+	private Boolean c(DatagramPacket datagrampacket) {
+		SocketAddress socketaddress = datagrampacket.getSocketAddress();
+
+		if (!this.t.containsKey(socketaddress)) {
+			return Boolean.valueOf(false);
+		} else {
+			byte[] abyte = datagrampacket.getData();
+
+			return ((RemoteStatusListener.RemoteStatusChallenge) this.t.get(socketaddress)).a() != StatusChallengeUtils
+					.c(abyte, 7, datagrampacket.getLength()) ? Boolean.valueOf(false) : Boolean.valueOf(true);
+		}
+	}
+
+	private void d(DatagramPacket datagrampacket) throws IOException {
+		RemoteStatusListener.RemoteStatusChallenge remotestatuslistener_remotestatuschallenge = new RemoteStatusListener.RemoteStatusChallenge(
+				datagrampacket);
+
+		this.t.put(datagrampacket.getSocketAddress(), remotestatuslistener_remotestatuschallenge);
+		this.a(remotestatuslistener_remotestatuschallenge.b(), datagrampacket);
+	}
+
+	private void f() {
+		if (this.a) {
+			long i = MinecraftServer.av();
+
+			if (i >= this.h + 30000L) {
+				this.h = i;
+				Iterator iterator = this.t.entrySet().iterator();
+
+				while (iterator.hasNext()) {
+					Entry entry = (Entry) iterator.next();
+
+					if (((RemoteStatusListener.RemoteStatusChallenge) entry.getValue()).a(i).booleanValue()) {
+						iterator.remove();
+					}
+				}
+
+			}
+		}
+	}
+
+	public void run() {
+		this.b("Query running on " + this.s + ":" + this.i);
+		this.h = MinecraftServer.av();
+		this.p = new DatagramPacket(this.o, this.o.length);
+
+		try {
+			while (this.a) {
+				try {
+					this.n.receive(this.p);
+					this.f();
+					this.a(this.p);
+				} catch (SocketTimeoutException sockettimeoutexception) {
+					this.f();
+				} catch (PortUnreachableException portunreachableexception) {
+					;
+				} catch (IOException ioexception) {
+					this.a((Exception) ioexception);
+				}
+			}
+		} finally {
+			this.e();
+		}
+
+	}
+
+	public void a() {
+		if (!this.a) {
+			if (0 < this.i && '\uffff' >= this.i) {
+				if (this.g()) {
+					super.a();
+				}
+
+			} else {
+				this.c("Invalid query port " + this.i + " found in \'" + this.b.b() + "\' (queries disabled)");
+			}
+		}
+	}
+
+	private void a(Exception exception) {
+		if (this.a) {
+			this.c("Unexpected exception, buggy JRE? (" + exception.toString() + ")");
+			if (!this.g()) {
+				this.d("Failed to recover from buggy JRE, shutting down!");
+				this.a = false;
+			}
+
+		}
+	}
+
+	private boolean g() {
+		try {
+			this.n = new DatagramSocket(this.i, InetAddress.getByName(this.s));
+			this.a(this.n);
+			this.n.setSoTimeout(500);
+			return true;
+		} catch (SocketException socketexception) {
+			this.c("Unable to initialise query system on " + this.s + ":" + this.i + " (Socket): "
+					+ socketexception.getMessage());
+		} catch (UnknownHostException unknownhostexception) {
+			this.c("Unable to initialise query system on " + this.s + ":" + this.i + " (Unknown Host): "
+					+ unknownhostexception.getMessage());
+		} catch (Exception exception) {
+			this.c("Unable to initialise query system on " + this.s + ":" + this.i + " (E): " + exception.getMessage());
+		}
+
+		return false;
+	}
+
+	class RemoteStatusChallenge {
+
+		private long time = (new Date()).getTime();
+		private int token;
+		private byte[] identity;
+		private byte[] response;
+		private String f;
+
+		public RemoteStatusChallenge(DatagramPacket datagrampacket) {
+			byte[] abyte = datagrampacket.getData();
+
+			this.identity = new byte[4];
+			this.identity[0] = abyte[3];
+			this.identity[1] = abyte[4];
+			this.identity[2] = abyte[5];
+			this.identity[3] = abyte[6];
+			this.f = new String(this.identity);
+			this.token = com.mrpowergamerbr.parappatown.utils.LightStatic.random.nextInt(16777216);
+			this.response = String.format("\t%s%d\u0000", new Object[] { this.f, Integer.valueOf(this.token) })
+					.getBytes();
+		}
+
+		public Boolean a(long i) {
+			return Boolean.valueOf(this.time < i);
+		}
+
+		public int a() {
+			return this.token;
+		}
+
+		public byte[] b() {
+			return this.response;
+		}
+
+		public byte[] c() {
+			return this.identity;
+		}
+	}
+}
diff --git a/src/main/java/net/minecraft/server/TileEntityDispenser.java b/src/main/java/net/minecraft/server/TileEntityDispenser.java
index 99f1947..37fb68f 100644
--- a/src/main/java/net/minecraft/server/TileEntityDispenser.java
+++ b/src/main/java/net/minecraft/server/TileEntityDispenser.java
@@ -2,7 +2,6 @@ package net.minecraft.server;
 
 // CraftBukkit start
 import java.util.List;
-import java.util.Random;
 
 import javax.annotation.Nullable;
 
@@ -14,7 +13,7 @@ import com.mrpowergamerbr.utils.LightRandom;
 
 public class TileEntityDispenser extends TileEntityLootable implements IInventory {
 
-	private static final LightRandom f = new LightRandom();
+	private static final LightRandom f = com.mrpowergamerbr.parappatown.utils.LightStatic.random;
 	private ItemStack[] items = new ItemStack[9];
 	protected String a;
 
diff --git a/src/main/java/net/minecraft/server/TileEntityEnchantTable.java b/src/main/java/net/minecraft/server/TileEntityEnchantTable.java
new file mode 100644
index 0000000..c2d5fbb
--- /dev/null
+++ b/src/main/java/net/minecraft/server/TileEntityEnchantTable.java
@@ -0,0 +1,127 @@
+package net.minecraft.server;
+
+import com.mrpowergamerbr.utils.LightRandom;
+
+public class TileEntityEnchantTable extends TileEntity implements ITickable, ITileEntityContainer {
+
+	public int a;
+	public float f;
+	public float g;
+	public float h;
+	public float i;
+	public float j;
+	public float k;
+	public float l;
+	public float m;
+	public float n;
+	private static LightRandom o = com.mrpowergamerbr.parappatown.utils.LightStatic.random;
+	private String p;
+
+	public TileEntityEnchantTable() {
+	}
+
+	public NBTTagCompound save(NBTTagCompound nbttagcompound) {
+		super.save(nbttagcompound);
+		if (this.hasCustomName()) {
+			nbttagcompound.setString("CustomName", this.p);
+		}
+
+		return nbttagcompound;
+	}
+
+	public void a(NBTTagCompound nbttagcompound) {
+		super.a(nbttagcompound);
+		if (nbttagcompound.hasKeyOfType("CustomName", 8)) {
+			this.p = nbttagcompound.getString("CustomName");
+		}
+
+	}
+
+	public void c() {
+		this.k = this.j;
+		this.m = this.l;
+		EntityHuman entityhuman = this.world.a((double) ((float) this.position.getX() + 0.5F),
+				(double) ((float) this.position.getY() + 0.5F), (double) ((float) this.position.getZ() + 0.5F), 3.0D,
+				false);
+
+		if (entityhuman != null) {
+			double d0 = entityhuman.locX - (double) ((float) this.position.getX() + 0.5F);
+			double d1 = entityhuman.locZ - (double) ((float) this.position.getZ() + 0.5F);
+
+			this.n = (float) MathHelper.b(d1, d0);
+			this.j += 0.1F;
+			if (this.j < 0.5F || TileEntityEnchantTable.o.nextInt(40) == 0) {
+				float f = this.h;
+
+				do {
+					this.h += (float) (TileEntityEnchantTable.o.nextInt(4) - TileEntityEnchantTable.o.nextInt(4));
+				} while (f == this.h);
+			}
+		} else {
+			this.n += 0.02F;
+			this.j -= 0.1F;
+		}
+
+		while (this.l >= 3.1415927F) {
+			this.l -= 6.2831855F;
+		}
+
+		while (this.l < -3.1415927F) {
+			this.l += 6.2831855F;
+		}
+
+		while (this.n >= 3.1415927F) {
+			this.n -= 6.2831855F;
+		}
+
+		while (this.n < -3.1415927F) {
+			this.n += 6.2831855F;
+		}
+
+		float f1;
+
+		for (f1 = this.n - this.l; f1 >= 3.1415927F; f1 -= 6.2831855F) {
+			;
+		}
+
+		while (f1 < -3.1415927F) {
+			f1 += 6.2831855F;
+		}
+
+		this.l += f1 * 0.4F;
+		this.j = MathHelper.a(this.j, 0.0F, 1.0F);
+		++this.a;
+		this.g = this.f;
+		float f2 = (this.h - this.f) * 0.4F;
+		float f3 = 0.2F;
+
+		f2 = MathHelper.a(f2, -f3, f3);
+		this.i += (f2 - this.i) * 0.9F;
+		this.f += this.i;
+	}
+
+	public String getName() {
+		return this.hasCustomName() ? this.p : "container.enchant";
+	}
+
+	public boolean hasCustomName() {
+		return this.p != null && !this.p.isEmpty();
+	}
+
+	public void a(String s) {
+		this.p = s;
+	}
+
+	public IChatBaseComponent getScoreboardDisplayName() {
+		return (IChatBaseComponent) (this.hasCustomName() ? new ChatComponentText(this.getName())
+				: new ChatMessage(this.getName(), new Object[0]));
+	}
+
+	public Container createContainer(PlayerInventory playerinventory, EntityHuman entityhuman) {
+		return new ContainerEnchantTable(playerinventory, this.world, this.position);
+	}
+
+	public String getContainerName() {
+		return "minecraft:enchanting_table";
+	}
+}
diff --git a/src/main/java/net/minecraft/server/TileEntityEndGateway.java b/src/main/java/net/minecraft/server/TileEntityEndGateway.java
index c3b1282..756775f 100644
--- a/src/main/java/net/minecraft/server/TileEntityEndGateway.java
+++ b/src/main/java/net/minecraft/server/TileEntityEndGateway.java
@@ -247,7 +247,8 @@ public class TileEntityEndGateway extends TileEntity implements ITickable {
 	}
 
 	private void b(BlockPosition blockposition) {
-		(new WorldGenEndGateway()).generate(this.world, new Random(), blockposition);
+		(new WorldGenEndGateway()).generate(this.world, com.mrpowergamerbr.parappatown.utils.LightStatic.random,
+				blockposition);
 		TileEntity tileentity = this.world.getTileEntity(blockposition);
 
 		if (tileentity instanceof TileEntityEndGateway) {
diff --git a/src/main/java/net/minecraft/server/TileEntityLootable.java b/src/main/java/net/minecraft/server/TileEntityLootable.java
index b17c979..0f05f47 100644
--- a/src/main/java/net/minecraft/server/TileEntityLootable.java
+++ b/src/main/java/net/minecraft/server/TileEntityLootable.java
@@ -56,7 +56,7 @@ public abstract class TileEntityLootable extends TileEntityContainer implements
 			Random random;
 
 			if (this.n == 0L) {
-				random = new Random();
+				random = com.mrpowergamerbr.parappatown.utils.LightStatic.RNG;
 			} else {
 				random = new Random(this.n);
 			}
diff --git a/src/main/java/net/minecraft/server/Village.java b/src/main/java/net/minecraft/server/Village.java
index a350816..6855b03 100644
--- a/src/main/java/net/minecraft/server/Village.java
+++ b/src/main/java/net/minecraft/server/Village.java
@@ -2,8 +2,8 @@ package net.minecraft.server;
 
 import java.util.Iterator;
 import java.util.List;
-import java.util.UUID;
 import java.util.TreeMap;
+import java.util.UUID;
 
 import com.google.common.collect.Lists;
 import com.mojang.authlib.GameProfile;
@@ -40,448 +40,476 @@ public class Village {
 	}
 
 	public void a(World world) {
-        this.a = world;
-    }
-
-    public void a(int i) {
-        this.g = i;
-        this.m();
-        this.l();
-        if (i % 20 == 0) {
-            this.k();
-        }
-
-        if (i % 30 == 0) {
-            this.j();
-        }
-
-        int j = this.h / 10;
-
-        if (this.l < j && this.b.size() > 20 && this.a.random.nextInt(7000) == 0) {
-            Vec3D vec3d = this.a(this.d, 2, 4, 2);
-
-            if (vec3d != null) {
-                EntityIronGolem entityirongolem = new EntityIronGolem(this.a);
-
-                entityirongolem.setPosition(vec3d.x, vec3d.y, vec3d.z);
-                this.a.addEntity(entityirongolem, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.VILLAGE_DEFENSE); // CraftBukkit
-                ++this.l;
-            }
-        }
-
-    }
-
-    private Vec3D a(BlockPosition blockposition, int i, int j, int k) {
-        for (int l = 0; l < 10; ++l) {
-            BlockPosition blockposition1 = blockposition.a(this.a.random.nextInt(16) - 8, this.a.random.nextInt(6) - 3, this.a.random.nextInt(16) - 8);
-
-            if (this.a(blockposition1) && this.a(new BlockPosition(i, j, k), blockposition1)) {
-                return new Vec3D((double) blockposition1.getX(), (double) blockposition1.getY(), (double) blockposition1.getZ());
-            }
-        }
-
-        return null;
-    }
-
-    private boolean a(BlockPosition blockposition, BlockPosition blockposition1) {
-        if (!this.a.getType(blockposition1.down()).q()) {
-            return false;
-        } else {
-            int i = blockposition1.getX() - blockposition.getX() / 2;
-            int j = blockposition1.getZ() - blockposition.getZ() / 2;
-
-            for (int k = i; k < i + blockposition.getX(); ++k) {
-                for (int l = blockposition1.getY(); l < blockposition1.getY() + blockposition.getY(); ++l) {
-                    for (int i1 = j; i1 < j + blockposition.getZ(); ++i1) {
-                        if (this.a.getType(new BlockPosition(k, l, i1)).l()) {
-                            return false;
-                        }
-                    }
-                }
-            }
-
-            return true;
-        }
-    }
-
-    private void j() {
-        List list = this.a.a(EntityIronGolem.class, new AxisAlignedBB((double) (this.d.getX() - this.e), (double) (this.d.getY() - 4), (double) (this.d.getZ() - this.e), (double) (this.d.getX() + this.e), (double) (this.d.getY() + 4), (double) (this.d.getZ() + this.e)));
-
-        this.l = list.size();
-    }
-
-    private void k() {
-        List list = this.a.a(EntityVillager.class, new AxisAlignedBB((double) (this.d.getX() - this.e), (double) (this.d.getY() - 4), (double) (this.d.getZ() - this.e), (double) (this.d.getX() + this.e), (double) (this.d.getY() + 4), (double) (this.d.getZ() + this.e)));
-
-        this.h = list.size();
-        if (this.h == 0) {
-            this.j.clear();
-        }
-
-    }
-
-    public BlockPosition a() {
-        return this.d;
-    }
-
-    public int b() {
-        return this.e;
-    }
-
-    public int c() {
-        return this.b.size();
-    }
-
-    public int d() {
-        return this.g - this.f;
-    }
-
-    public int e() {
-        return this.h;
-    }
-
-    public boolean a(BlockPosition blockposition) {
-        return this.d.n(blockposition) < (double) (this.e * this.e);
-    }
-
-    public List<VillageDoor> f() {
-        return this.b;
-    }
-
-    public VillageDoor b(BlockPosition blockposition) {
-        VillageDoor villagedoor = null;
-        int i = Integer.MAX_VALUE;
-        Iterator iterator = this.b.iterator();
-
-        while (iterator.hasNext()) {
-            VillageDoor villagedoor1 = (VillageDoor) iterator.next();
-            int j = villagedoor1.a(blockposition);
-
-            if (j < i) {
-                villagedoor = villagedoor1;
-                i = j;
-            }
-        }
-
-        return villagedoor;
-    }
-
-    public VillageDoor c(BlockPosition blockposition) {
-        VillageDoor villagedoor = null;
-        int i = Integer.MAX_VALUE;
-        Iterator iterator = this.b.iterator();
-
-        while (iterator.hasNext()) {
-            VillageDoor villagedoor1 = (VillageDoor) iterator.next();
-            int j = villagedoor1.a(blockposition);
-
-            if (j > 256) {
-                j *= 1000;
-            } else {
-                j = villagedoor1.c();
-            }
-
-            if (j < i) {
-                BlockPosition blockposition1 = villagedoor1.d();
-                EnumDirection enumdirection = villagedoor1.j();
-
-                if (this.a.getType(blockposition1.shift(enumdirection, 1)).getBlock().b(this.a, blockposition1.shift(enumdirection, 1)) && this.a.getType(blockposition1.shift(enumdirection, -1)).getBlock().b(this.a, blockposition1.shift(enumdirection, -1)) && this.a.getType(blockposition1.up().shift(enumdirection, 1)).getBlock().b(this.a, blockposition1.up().shift(enumdirection, 1)) && this.a.getType(blockposition1.up().shift(enumdirection, -1)).getBlock().b(this.a, blockposition1.up().shift(enumdirection, -1))) {
-                    villagedoor = villagedoor1;
-                    i = j;
-                }
-            }
-        }
-
-        return villagedoor;
-    }
-
-    public VillageDoor e(BlockPosition blockposition) {
-        if (this.d.n(blockposition) > (double) (this.e * this.e)) {
-            return null;
-        } else {
-            Iterator iterator = this.b.iterator();
-
-            VillageDoor villagedoor;
+		this.a = world;
+	}
+
+	public void a(int i) {
+		this.g = i;
+		this.m();
+		this.l();
+		if (i % 20 == 0) {
+			this.k();
+		}
+
+		if (i % 30 == 0) {
+			this.j();
+		}
+
+		int j = this.h / 10;
+
+		if (this.l < j && this.b.size() > 20 && this.a.random.nextInt(7000) == 0) {
+			Vec3D vec3d = this.a(this.d, 2, 4, 2);
 
-            do {
-                if (!iterator.hasNext()) {
-                    return null;
-                }
-
-                villagedoor = (VillageDoor) iterator.next();
-            } while (villagedoor.d().getX() != blockposition.getX() || villagedoor.d().getZ() != blockposition.getZ() || Math.abs(villagedoor.d().getY() - blockposition.getY()) > 1);
-
-            return villagedoor;
-        }
-    }
-
-    public void a(VillageDoor villagedoor) {
-        this.b.add(villagedoor);
-        this.c = this.c.a(villagedoor.d());
-        this.n();
-        this.f = villagedoor.h();
-    }
-
-    public boolean g() {
-        return this.b.isEmpty();
-    }
-
-    public void a(EntityLiving entityliving) {
-        Iterator iterator = this.k.iterator();
-
-        Village.Aggressor village_aggressor;
-
-        do {
-            if (!iterator.hasNext()) {
-                this.k.add(new Village.Aggressor(entityliving, this.g));
-                return;
-            }
-
-            village_aggressor = (Village.Aggressor) iterator.next();
-        } while (village_aggressor.a != entityliving);
-
-        village_aggressor.b = this.g;
-    }
-
-    public EntityLiving b(EntityLiving entityliving) {
-        double d0 = Double.MAX_VALUE;
-        Village.Aggressor village_aggressor = null;
-
-        for (int i = 0; i < this.k.size(); ++i) {
-            Village.Aggressor village_aggressor1 = (Village.Aggressor) this.k.get(i);
-            double d1 = village_aggressor1.a.h(entityliving);
-
-            if (d1 <= d0) {
-                village_aggressor = village_aggressor1;
-                d0 = d1;
-            }
-        }
+			if (vec3d != null) {
+				EntityIronGolem entityirongolem = new EntityIronGolem(this.a);
 
-        return village_aggressor != null ? village_aggressor.a : null;
-    }
-
-    public EntityHuman c(EntityLiving entityliving) {
-        double d0 = Double.MAX_VALUE;
-        EntityHuman entityhuman = null;
-        Iterator iterator = this.j.keySet().iterator();
+				entityirongolem.setPosition(vec3d.x, vec3d.y, vec3d.z);
+				this.a.addEntity(entityirongolem,
+						org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.VILLAGE_DEFENSE); // CraftBukkit
+				++this.l;
+			}
+		}
 
-        while (iterator.hasNext()) {
-            String s = (String) iterator.next();
-
-            if (this.d(s)) {
-                EntityHuman entityhuman1 = this.a.a(s);
+	}
+
+	private Vec3D a(BlockPosition blockposition, int i, int j, int k) {
+		for (int l = 0; l < 10; ++l) {
+			BlockPosition blockposition1 = blockposition.a(this.a.random.nextInt(16) - 8, this.a.random.nextInt(6) - 3,
+					this.a.random.nextInt(16) - 8);
+
+			if (this.a(blockposition1) && this.a(new BlockPosition(i, j, k), blockposition1)) {
+				return new Vec3D((double) blockposition1.getX(), (double) blockposition1.getY(),
+						(double) blockposition1.getZ());
+			}
+		}
+
+		return null;
+	}
+
+	private boolean a(BlockPosition blockposition, BlockPosition blockposition1) {
+		if (!this.a.getType(blockposition1.down()).q()) {
+			return false;
+		} else {
+			int i = blockposition1.getX() - blockposition.getX() / 2;
+			int j = blockposition1.getZ() - blockposition.getZ() / 2;
+
+			for (int k = i; k < i + blockposition.getX(); ++k) {
+				for (int l = blockposition1.getY(); l < blockposition1.getY() + blockposition.getY(); ++l) {
+					for (int i1 = j; i1 < j + blockposition.getZ(); ++i1) {
+						if (this.a.getType(new BlockPosition(k, l, i1)).l()) {
+							return false;
+						}
+					}
+				}
+			}
+
+			return true;
+		}
+	}
 
-                if (entityhuman1 != null) {
-                    double d1 = entityhuman1.h(entityliving);
-
-                    if (d1 <= d0) {
-                        entityhuman = entityhuman1;
-                        d0 = d1;
-                    }
-                }
-            }
-        }
-
-        return entityhuman;
-    }
-
-    private void l() {
-        Iterator iterator = this.k.iterator();
-
-        while (iterator.hasNext()) {
-            Village.Aggressor village_aggressor = (Village.Aggressor) iterator.next();
+	private void j() {
+		List list = this.a.a(EntityIronGolem.class,
+				new AxisAlignedBB((double) (this.d.getX() - this.e), (double) (this.d.getY() - 4),
+						(double) (this.d.getZ() - this.e), (double) (this.d.getX() + this.e),
+						(double) (this.d.getY() + 4), (double) (this.d.getZ() + this.e)));
+
+		this.l = list.size();
+	}
+
+	private void k() {
+		List list = this.a.a(EntityVillager.class,
+				new AxisAlignedBB((double) (this.d.getX() - this.e), (double) (this.d.getY() - 4),
+						(double) (this.d.getZ() - this.e), (double) (this.d.getX() + this.e),
+						(double) (this.d.getY() + 4), (double) (this.d.getZ() + this.e)));
+
+		this.h = list.size();
+		if (this.h == 0) {
+			this.j.clear();
+		}
+
+	}
+
+	public BlockPosition a() {
+		return this.d;
+	}
+
+	public int b() {
+		return this.e;
+	}
+
+	public int c() {
+		return this.b.size();
+	}
+
+	public int d() {
+		return this.g - this.f;
+	}
 
-            if (!village_aggressor.a.isAlive() || Math.abs(this.g - village_aggressor.b) > 300) {
-                iterator.remove();
-            }
-        }
+	public int e() {
+		return this.h;
+	}
+
+	public boolean a(BlockPosition blockposition) {
+		return this.d.n(blockposition) < (double) (this.e * this.e);
+	}
+
+	public List<VillageDoor> f() {
+		return this.b;
+	}
+
+	public VillageDoor b(BlockPosition blockposition) {
+		VillageDoor villagedoor = null;
+		int i = Integer.MAX_VALUE;
+		Iterator iterator = this.b.iterator();
+
+		while (iterator.hasNext()) {
+			VillageDoor villagedoor1 = (VillageDoor) iterator.next();
+			int j = villagedoor1.a(blockposition);
+
+			if (j < i) {
+				villagedoor = villagedoor1;
+				i = j;
+			}
+		}
+
+		return villagedoor;
+	}
+
+	public VillageDoor c(BlockPosition blockposition) {
+		VillageDoor villagedoor = null;
+		int i = Integer.MAX_VALUE;
+		Iterator iterator = this.b.iterator();
+
+		while (iterator.hasNext()) {
+			VillageDoor villagedoor1 = (VillageDoor) iterator.next();
+			int j = villagedoor1.a(blockposition);
+
+			if (j > 256) {
+				j *= 1000;
+			} else {
+				j = villagedoor1.c();
+			}
+
+			if (j < i) {
+				BlockPosition blockposition1 = villagedoor1.d();
+				EnumDirection enumdirection = villagedoor1.j();
+
+				if (this.a.getType(blockposition1.shift(enumdirection, 1)).getBlock().b(this.a,
+						blockposition1.shift(enumdirection, 1))
+						&& this.a.getType(blockposition1.shift(enumdirection, -1)).getBlock().b(this.a,
+								blockposition1.shift(enumdirection, -1))
+						&& this.a.getType(blockposition1.up().shift(enumdirection, 1)).getBlock().b(this.a,
+								blockposition1.up().shift(enumdirection, 1))
+						&& this.a.getType(blockposition1.up().shift(enumdirection, -1)).getBlock().b(this.a,
+								blockposition1.up().shift(enumdirection, -1))) {
+					villagedoor = villagedoor1;
+					i = j;
+				}
+			}
+		}
+
+		return villagedoor;
+	}
+
+	public VillageDoor e(BlockPosition blockposition) {
+		if (this.d.n(blockposition) > (double) (this.e * this.e)) {
+			return null;
+		} else {
+			Iterator iterator = this.b.iterator();
+
+			VillageDoor villagedoor;
+
+			do {
+				if (!iterator.hasNext()) {
+					return null;
+				}
+
+				villagedoor = (VillageDoor) iterator.next();
+			} while (villagedoor.d().getX() != blockposition.getX() || villagedoor.d().getZ() != blockposition.getZ()
+					|| Math.abs(villagedoor.d().getY() - blockposition.getY()) > 1);
+
+			return villagedoor;
+		}
+	}
+
+	public void a(VillageDoor villagedoor) {
+		this.b.add(villagedoor);
+		this.c = this.c.a(villagedoor.d());
+		this.n();
+		this.f = villagedoor.h();
+	}
+
+	public boolean g() {
+		return this.b.isEmpty();
+	}
+
+	public void a(EntityLiving entityliving) {
+		Iterator iterator = this.k.iterator();
+
+		Village.Aggressor village_aggressor;
+
+		do {
+			if (!iterator.hasNext()) {
+				this.k.add(new Village.Aggressor(entityliving, this.g));
+				return;
+			}
+
+			village_aggressor = (Village.Aggressor) iterator.next();
+		} while (village_aggressor.a != entityliving);
+
+		village_aggressor.b = this.g;
+	}
 
-    }
+	public EntityLiving b(EntityLiving entityliving) {
+		double d0 = Double.MAX_VALUE;
+		Village.Aggressor village_aggressor = null;
 
-    private void m() {
-        boolean flag = false;
-        boolean flag1 = this.a.random.nextInt(50) == 0;
-        Iterator iterator = this.b.iterator();
-
-        while (iterator.hasNext()) {
-            VillageDoor villagedoor = (VillageDoor) iterator.next();
+		for (int i = 0; i < this.k.size(); ++i) {
+			Village.Aggressor village_aggressor1 = (Village.Aggressor) this.k.get(i);
+			double d1 = village_aggressor1.a.h(entityliving);
 
-            if (flag1) {
-                villagedoor.a();
-            }
-
-            if (!this.f(villagedoor.d()) || Math.abs(this.g - villagedoor.h()) > 1200) {
-                this.c = this.c.b(villagedoor.d());
-                flag = true;
-                villagedoor.a(true);
-                iterator.remove();
-            }
-        }
-
-        if (flag) {
-            this.n();
-        }
-
-    }
-
-    private boolean f(BlockPosition blockposition) {
-        IBlockData iblockdata = this.a.getType(blockposition);
-        Block block = iblockdata.getBlock();
-
-        return block instanceof BlockDoor ? iblockdata.getMaterial() == Material.WOOD : false;
-    }
-
-    private void n() {
-        int i = this.b.size();
-
-        if (i == 0) {
-            this.d = BlockPosition.ZERO;
-            this.e = 0;
-        } else {
-            this.d = new BlockPosition(this.c.getX() / i, this.c.getY() / i, this.c.getZ() / i);
-            int j = 0;
-
-            VillageDoor villagedoor;
-
-            for (Iterator iterator = this.b.iterator(); iterator.hasNext(); j = Math.max(villagedoor.a(this.d), j)) {
-                villagedoor = (VillageDoor) iterator.next();
-            }
-
-            this.e = Math.max(32, (int) Math.sqrt((double) j) + 1);
-        }
-    }
-
-    public int a(String s) {
-        Integer integer = (Integer) this.j.get(s);
-
-        return integer != null ? integer.intValue() : 0;
-    }
-
-    public int a(String s, int i) {
-        int j = this.a(s);
-        int k = MathHelper.clamp(j + i, -30, 10);
-
-        this.j.put(s, Integer.valueOf(k));
-        return k;
-    }
-
-    public boolean d(String s) {
-        return this.a(s) <= -15;
-    }
-
-    public void a(NBTTagCompound nbttagcompound) {
-        this.h = nbttagcompound.getInt("PopSize");
-        this.e = nbttagcompound.getInt("Radius");
-        this.l = nbttagcompound.getInt("Golems");
-        this.f = nbttagcompound.getInt("Stable");
-        this.g = nbttagcompound.getInt("Tick");
-        this.i = nbttagcompound.getInt("MTick");
-        this.d = new BlockPosition(nbttagcompound.getInt("CX"), nbttagcompound.getInt("CY"), nbttagcompound.getInt("CZ"));
-        this.c = new BlockPosition(nbttagcompound.getInt("ACX"), nbttagcompound.getInt("ACY"), nbttagcompound.getInt("ACZ"));
-        NBTTagList nbttaglist = nbttagcompound.getList("Doors", 10);
-
-        for (int i = 0; i < nbttaglist.size(); ++i) {
-            NBTTagCompound nbttagcompound1 = nbttaglist.get(i);
-            VillageDoor villagedoor = new VillageDoor(new BlockPosition(nbttagcompound1.getInt("X"), nbttagcompound1.getInt("Y"), nbttagcompound1.getInt("Z")), nbttagcompound1.getInt("IDX"), nbttagcompound1.getInt("IDZ"), nbttagcompound1.getInt("TS"));
-
-            this.b.add(villagedoor);
-        }
-
-        NBTTagList nbttaglist1 = nbttagcompound.getList("Players", 10);
-
-        for (int j = 0; j < nbttaglist1.size(); ++j) {
-            NBTTagCompound nbttagcompound2 = nbttaglist1.get(j);
-
-            if (nbttagcompound2.hasKey("UUID")) {
-                UserCache usercache = MinecraftServer.getServer().getUserCache(); // Paper - Bandaid for world being null
-                GameProfile gameprofile = usercache.a(UUID.fromString(nbttagcompound2.getString("UUID")));
-
-                if (gameprofile != null) {
-                    this.j.put(gameprofile.getName(), Integer.valueOf(nbttagcompound2.getInt("S")));
-                }
-            } else {
-                this.j.put(nbttagcompound2.getString("Name"), Integer.valueOf(nbttagcompound2.getInt("S")));
-            }
-        }
-
-    }
-
-    public void b(NBTTagCompound nbttagcompound) {
-        nbttagcompound.setInt("PopSize", this.h);
-        nbttagcompound.setInt("Radius", this.e);
-        nbttagcompound.setInt("Golems", this.l);
-        nbttagcompound.setInt("Stable", this.f);
-        nbttagcompound.setInt("Tick", this.g);
-        nbttagcompound.setInt("MTick", this.i);
-        nbttagcompound.setInt("CX", this.d.getX());
-        nbttagcompound.setInt("CY", this.d.getY());
-        nbttagcompound.setInt("CZ", this.d.getZ());
-        nbttagcompound.setInt("ACX", this.c.getX());
-        nbttagcompound.setInt("ACY", this.c.getY());
-        nbttagcompound.setInt("ACZ", this.c.getZ());
-        NBTTagList nbttaglist = new NBTTagList();
-        Iterator iterator = this.b.iterator();
-
-        while (iterator.hasNext()) {
-            VillageDoor villagedoor = (VillageDoor) iterator.next();
-            NBTTagCompound nbttagcompound1 = new NBTTagCompound();
-
-            nbttagcompound1.setInt("X", villagedoor.d().getX());
-            nbttagcompound1.setInt("Y", villagedoor.d().getY());
-            nbttagcompound1.setInt("Z", villagedoor.d().getZ());
-            nbttagcompound1.setInt("IDX", villagedoor.f());
-            nbttagcompound1.setInt("IDZ", villagedoor.g());
-            nbttagcompound1.setInt("TS", villagedoor.h());
-            nbttaglist.add(nbttagcompound1);
-        }
-
-        nbttagcompound.set("Doors", nbttaglist);
-        NBTTagList nbttaglist1 = new NBTTagList();
-        Iterator iterator1 = this.j.keySet().iterator();
-
-        while (iterator1.hasNext()) {
-            String s = (String) iterator1.next();
-            NBTTagCompound nbttagcompound2 = new NBTTagCompound();
-            UserCache usercache = this.a.getMinecraftServer().getUserCache();
-            GameProfile gameprofile = usercache.getProfile(s);
-
-            if (gameprofile != null) {
-                nbttagcompound2.setString("UUID", gameprofile.getId().toString());
-                nbttagcompound2.setInt("S", ((Integer) this.j.get(s)).intValue());
-                nbttaglist1.add(nbttagcompound2);
-            }
-        }
-
-        nbttagcompound.set("Players", nbttaglist1);
-    }
-
-    public void h() {
-        this.i = this.g;
-    }
-
-    public boolean i() {
-        return this.i == 0 || this.g - this.i >= 3600;
-    }
-
-    public void b(int i) {
-        Iterator iterator = this.j.keySet().iterator();
-
-        while (iterator.hasNext()) {
-            String s = (String) iterator.next();
-
-            this.a(s, i);
-        }
-
-    }
-
-    class Aggressor {
-
-        public EntityLiving a;
-        public int b;
-
-        Aggressor(EntityLiving entityliving, int i) {
-            this.a = entityliving;
-            this.b = i;
-        }
-    }
+			if (d1 <= d0) {
+				village_aggressor = village_aggressor1;
+				d0 = d1;
+			}
+		}
+
+		return village_aggressor != null ? village_aggressor.a : null;
+	}
+
+	public EntityHuman c(EntityLiving entityliving) {
+		double d0 = Double.MAX_VALUE;
+		EntityHuman entityhuman = null;
+		Iterator iterator = this.j.keySet().iterator();
+
+		while (iterator.hasNext()) {
+			String s = (String) iterator.next();
+
+			if (this.d(s)) {
+				EntityHuman entityhuman1 = this.a.a(s);
+
+				if (entityhuman1 != null) {
+					double d1 = entityhuman1.h(entityliving);
+
+					if (d1 <= d0) {
+						entityhuman = entityhuman1;
+						d0 = d1;
+					}
+				}
+			}
+		}
+
+		return entityhuman;
+	}
+
+	private void l() {
+		Iterator iterator = this.k.iterator();
+
+		while (iterator.hasNext()) {
+			Village.Aggressor village_aggressor = (Village.Aggressor) iterator.next();
+
+			if (!village_aggressor.a.isAlive() || Math.abs(this.g - village_aggressor.b) > 300) {
+				iterator.remove();
+			}
+		}
+
+	}
+
+	private void m() {
+		boolean flag = false;
+		boolean flag1 = this.a.random.nextInt(50) == 0;
+		Iterator iterator = this.b.iterator();
+
+		while (iterator.hasNext()) {
+			VillageDoor villagedoor = (VillageDoor) iterator.next();
+
+			if (flag1) {
+				villagedoor.a();
+			}
+
+			if (!this.f(villagedoor.d()) || Math.abs(this.g - villagedoor.h()) > 1200) {
+				this.c = this.c.b(villagedoor.d());
+				flag = true;
+				villagedoor.a(true);
+				iterator.remove();
+			}
+		}
+
+		if (flag) {
+			this.n();
+		}
+
+	}
+
+	private boolean f(BlockPosition blockposition) {
+		IBlockData iblockdata = this.a.getType(blockposition);
+		Block block = iblockdata.getBlock();
+
+		return block instanceof BlockDoor ? iblockdata.getMaterial() == Material.WOOD : false;
+	}
+
+	private void n() {
+		int i = this.b.size();
+
+		if (i == 0) {
+			this.d = BlockPosition.ZERO;
+			this.e = 0;
+		} else {
+			this.d = new BlockPosition(this.c.getX() / i, this.c.getY() / i, this.c.getZ() / i);
+			int j = 0;
+
+			VillageDoor villagedoor;
+
+			for (Iterator iterator = this.b.iterator(); iterator.hasNext(); j = Math.max(villagedoor.a(this.d), j)) {
+				villagedoor = (VillageDoor) iterator.next();
+			}
+
+			this.e = Math.max(32, (int) Math.sqrt((double) j) + 1);
+		}
+	}
+
+	public int a(String s) {
+		Integer integer = (Integer) this.j.get(s);
+
+		return integer != null ? integer.intValue() : 0;
+	}
+
+	public int a(String s, int i) {
+		int j = this.a(s);
+		int k = MathHelper.clamp(j + i, -30, 10);
+
+		this.j.put(s, Integer.valueOf(k));
+		return k;
+	}
+
+	public boolean d(String s) {
+		return this.a(s) <= -15;
+	}
+
+	public void a(NBTTagCompound nbttagcompound) {
+		this.h = nbttagcompound.getInt("PopSize");
+		this.e = nbttagcompound.getInt("Radius");
+		this.l = nbttagcompound.getInt("Golems");
+		this.f = nbttagcompound.getInt("Stable");
+		this.g = nbttagcompound.getInt("Tick");
+		this.i = nbttagcompound.getInt("MTick");
+		this.d = new BlockPosition(nbttagcompound.getInt("CX"), nbttagcompound.getInt("CY"),
+				nbttagcompound.getInt("CZ"));
+		this.c = new BlockPosition(nbttagcompound.getInt("ACX"), nbttagcompound.getInt("ACY"),
+				nbttagcompound.getInt("ACZ"));
+		NBTTagList nbttaglist = nbttagcompound.getList("Doors", 10);
+
+		for (int i = 0; i < nbttaglist.size(); ++i) {
+			NBTTagCompound nbttagcompound1 = nbttaglist.get(i);
+			VillageDoor villagedoor = new VillageDoor(
+					new BlockPosition(nbttagcompound1.getInt("X"), nbttagcompound1.getInt("Y"),
+							nbttagcompound1.getInt("Z")),
+					nbttagcompound1.getInt("IDX"), nbttagcompound1.getInt("IDZ"), nbttagcompound1.getInt("TS"));
+
+			this.b.add(villagedoor);
+		}
+
+		NBTTagList nbttaglist1 = nbttagcompound.getList("Players", 10);
+
+		for (int j = 0; j < nbttaglist1.size(); ++j) {
+			NBTTagCompound nbttagcompound2 = nbttaglist1.get(j);
+
+			if (nbttagcompound2.hasKey("UUID")) {
+				UserCache usercache = MinecraftServer.getServer().getUserCache(); // Paper
+																					// -
+																					// Bandaid
+																					// for
+																					// world
+																					// being
+																					// null
+				GameProfile gameprofile = usercache.a(UUID.fromString(nbttagcompound2.getString("UUID")));
+
+				if (gameprofile != null) {
+					this.j.put(gameprofile.getName(), Integer.valueOf(nbttagcompound2.getInt("S")));
+				}
+			} else {
+				this.j.put(nbttagcompound2.getString("Name"), Integer.valueOf(nbttagcompound2.getInt("S")));
+			}
+		}
+
+	}
+
+	public void b(NBTTagCompound nbttagcompound) {
+		nbttagcompound.setInt("PopSize", this.h);
+		nbttagcompound.setInt("Radius", this.e);
+		nbttagcompound.setInt("Golems", this.l);
+		nbttagcompound.setInt("Stable", this.f);
+		nbttagcompound.setInt("Tick", this.g);
+		nbttagcompound.setInt("MTick", this.i);
+		nbttagcompound.setInt("CX", this.d.getX());
+		nbttagcompound.setInt("CY", this.d.getY());
+		nbttagcompound.setInt("CZ", this.d.getZ());
+		nbttagcompound.setInt("ACX", this.c.getX());
+		nbttagcompound.setInt("ACY", this.c.getY());
+		nbttagcompound.setInt("ACZ", this.c.getZ());
+		NBTTagList nbttaglist = new NBTTagList();
+		Iterator iterator = this.b.iterator();
+
+		while (iterator.hasNext()) {
+			VillageDoor villagedoor = (VillageDoor) iterator.next();
+			NBTTagCompound nbttagcompound1 = new NBTTagCompound();
+
+			nbttagcompound1.setInt("X", villagedoor.d().getX());
+			nbttagcompound1.setInt("Y", villagedoor.d().getY());
+			nbttagcompound1.setInt("Z", villagedoor.d().getZ());
+			nbttagcompound1.setInt("IDX", villagedoor.f());
+			nbttagcompound1.setInt("IDZ", villagedoor.g());
+			nbttagcompound1.setInt("TS", villagedoor.h());
+			nbttaglist.add(nbttagcompound1);
+		}
+
+		nbttagcompound.set("Doors", nbttaglist);
+		NBTTagList nbttaglist1 = new NBTTagList();
+		Iterator iterator1 = this.j.keySet().iterator();
+
+		while (iterator1.hasNext()) {
+			String s = (String) iterator1.next();
+			NBTTagCompound nbttagcompound2 = new NBTTagCompound();
+			UserCache usercache = this.a.getMinecraftServer().getUserCache();
+			GameProfile gameprofile = usercache.getProfile(s);
+
+			if (gameprofile != null) {
+				nbttagcompound2.setString("UUID", gameprofile.getId().toString());
+				nbttagcompound2.setInt("S", ((Integer) this.j.get(s)).intValue());
+				nbttaglist1.add(nbttagcompound2);
+			}
+		}
+
+		nbttagcompound.set("Players", nbttaglist1);
+	}
+
+	public void h() {
+		this.i = this.g;
+	}
+
+	public boolean i() {
+		return this.i == 0 || this.g - this.i >= 3600;
+	}
+
+	public void b(int i) {
+		Iterator iterator = this.j.keySet().iterator();
+
+		while (iterator.hasNext()) {
+			String s = (String) iterator.next();
+
+			this.a(s, i);
+		}
+
+	}
+
+	class Aggressor {
+
+		public EntityLiving a;
+		public int b;
+
+		Aggressor(EntityLiving entityliving, int i) {
+			this.a = entityliving;
+			this.b = i;
+		}
+	}
 }
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index eb0ad87..87d1f5f 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -78,14 +78,14 @@ public abstract class World implements IBlockAccess {
 	protected final Map<Integer, Entity> entitiesById = new net.techcable.pineapple.collect.CopyOnWriteMap();
 	private long I = 16777215L;
 	private int J;
-	protected int l = (new LightRandom()).nextInt();
+	protected int l = com.mrpowergamerbr.parappatown.utils.LightStatic.random.nextInt();
 	protected final int m = 1013904223;
 	protected float n;
 	protected float o;
 	protected float p;
 	protected float q;
 	private int K;
-	public final Random random = new Random();
+	public final Random random = com.mrpowergamerbr.parappatown.utils.LightStatic.RNG;
 	public WorldProvider worldProvider;
 	protected NavigationListener t = new NavigationListener();
 	protected List<IWorldAccess> u;
diff --git a/src/main/java/net/minecraft/server/WorldGenBase.java b/src/main/java/net/minecraft/server/WorldGenBase.java
new file mode 100644
index 0000000..40839ce
--- /dev/null
+++ b/src/main/java/net/minecraft/server/WorldGenBase.java
@@ -0,0 +1,36 @@
+package net.minecraft.server;
+
+import java.util.Random;
+
+public class WorldGenBase {
+
+	protected int e = 8;
+	protected Random f = com.mrpowergamerbr.parappatown.utils.LightStatic.RNG;
+	protected World g;
+
+	public WorldGenBase() {
+	}
+
+	public void a(World world, int i, int j, ChunkSnapshot chunksnapshot) {
+		int k = this.e;
+
+		this.g = world;
+		this.f.setSeed(world.getSeed());
+		long l = this.f.nextLong();
+		long i1 = this.f.nextLong();
+
+		for (int j1 = i - k; j1 <= i + k; ++j1) {
+			for (int k1 = j - k; k1 <= j + k; ++k1) {
+				long l1 = (long) j1 * l;
+				long i2 = (long) k1 * i1;
+
+				this.f.setSeed(l1 ^ i2 ^ world.getSeed());
+				this.a(world, j1, k1, i, j, chunksnapshot);
+			}
+		}
+
+	}
+
+	protected void a(World world, int i, int j, int k, int l, ChunkSnapshot chunksnapshot) {
+	}
+}
diff --git a/src/main/java/net/minecraft/server/WorldGenStronghold.java b/src/main/java/net/minecraft/server/WorldGenStronghold.java
new file mode 100644
index 0000000..46f96a0
--- /dev/null
+++ b/src/main/java/net/minecraft/server/WorldGenStronghold.java
@@ -0,0 +1,221 @@
+package net.minecraft.server;
+
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+import java.util.Map.Entry;
+import java.util.Random;
+
+import com.google.common.collect.Lists;
+import com.mrpowergamerbr.utils.LightRandom;
+
+public class WorldGenStronghold extends StructureGenerator {
+
+	private List<BiomeBase> a;
+	private boolean b;
+	private ChunkCoordIntPair[] d;
+	private double h;
+	private int i;
+
+	public WorldGenStronghold() {
+		this.d = new ChunkCoordIntPair[128];
+		this.h = 32.0D;
+		this.i = 3;
+		this.a = Lists.newArrayList();
+		Iterator iterator = BiomeBase.REGISTRY_ID.iterator();
+
+		while (iterator.hasNext()) {
+			BiomeBase biomebase = (BiomeBase) iterator.next();
+
+			if (biomebase != null && biomebase.j() > 0.0F) {
+				this.a.add(biomebase);
+			}
+		}
+
+	}
+
+	public WorldGenStronghold(Map<String, String> map) {
+		this();
+		Iterator iterator = map.entrySet().iterator();
+
+		while (iterator.hasNext()) {
+			Entry entry = (Entry) iterator.next();
+
+			if (((String) entry.getKey()).equals("distance")) {
+				this.h = MathHelper.a((String) entry.getValue(), this.h, 1.0D);
+			} else if (((String) entry.getKey()).equals("count")) {
+				this.d = new ChunkCoordIntPair[MathHelper.a((String) entry.getValue(), this.d.length, 1)];
+			} else if (((String) entry.getKey()).equals("spread")) {
+				this.i = MathHelper.a((String) entry.getValue(), this.i, 1);
+			}
+		}
+
+	}
+
+	public String a() {
+		return "Stronghold";
+	}
+
+	public BlockPosition getNearestGeneratedFeature(World world, BlockPosition blockposition) {
+		if (!this.b) {
+			this.c();
+			this.b = true;
+		}
+
+		BlockPosition blockposition1 = null;
+		BlockPosition.MutableBlockPosition blockposition_mutableblockposition = new BlockPosition.MutableBlockPosition(
+				0, 0, 0);
+		double d0 = Double.MAX_VALUE;
+		ChunkCoordIntPair[] achunkcoordintpair = this.d;
+		int i = achunkcoordintpair.length;
+
+		for (int j = 0; j < i; ++j) {
+			ChunkCoordIntPair chunkcoordintpair = achunkcoordintpair[j];
+
+			blockposition_mutableblockposition.c((chunkcoordintpair.x << 4) + 8, 32, (chunkcoordintpair.z << 4) + 8);
+			double d1 = blockposition_mutableblockposition.n(blockposition);
+
+			if (blockposition1 == null) {
+				blockposition1 = new BlockPosition(blockposition_mutableblockposition);
+				d0 = d1;
+			} else if (d1 < d0) {
+				blockposition1 = new BlockPosition(blockposition_mutableblockposition);
+				d0 = d1;
+			}
+		}
+
+		return blockposition1;
+	}
+
+	protected boolean a(int i, int j) {
+		if (!this.b) {
+			this.c();
+			this.b = true;
+		}
+
+		ChunkCoordIntPair[] achunkcoordintpair = this.d;
+		int k = achunkcoordintpair.length;
+
+		for (int l = 0; l < k; ++l) {
+			ChunkCoordIntPair chunkcoordintpair = achunkcoordintpair[l];
+
+			if (i == chunkcoordintpair.x && j == chunkcoordintpair.z) {
+				return true;
+			}
+		}
+
+		return false;
+	}
+
+	private void c() {
+		this.a(this.g);
+		int i = 0;
+		Iterator iterator = this.c.values().iterator();
+
+		while (iterator.hasNext()) {
+			StructureStart structurestart = (StructureStart) iterator.next();
+
+			if (i < this.d.length) {
+				this.d[i++] = new ChunkCoordIntPair(structurestart.e(), structurestart.f());
+			}
+		}
+
+		LightRandom random = com.mrpowergamerbr.parappatown.utils.LightStatic.random;
+
+		random.setSeed(this.g.getSeed());
+		double d0 = random.nextDouble() * 3.141592653589793D * 2.0D;
+		int j = 0;
+		int k = 0;
+		int l = this.c.size();
+
+		if (l < this.d.length) {
+			for (int i1 = 0; i1 < this.d.length; ++i1) {
+				double d1 = 4.0D * this.h + this.h * (double) j * 6.0D + (random.nextDouble() - 0.5D) * this.h * 2.5D;
+				int j1 = (int) Math.round(Math.cos(d0) * d1);
+				int k1 = (int) Math.round(Math.sin(d0) * d1);
+				BlockPosition blockposition = this.g.getWorldChunkManager().a((j1 << 4) + 8, (k1 << 4) + 8, 112, this.a,
+						random);
+
+				if (blockposition != null) {
+					j1 = blockposition.getX() >> 4;
+					k1 = blockposition.getZ() >> 4;
+				}
+
+				if (i1 >= l) {
+					this.d[i1] = new ChunkCoordIntPair(j1, k1);
+				}
+
+				d0 += 6.283185307179586D / (double) this.i;
+				++k;
+				if (k == this.i) {
+					++j;
+					k = 0;
+					this.i += 2 * this.i / (j + 1);
+					this.i = Math.min(this.i, this.d.length - i1);
+					d0 += random.nextDouble() * 3.141592653589793D * 2.0D;
+				}
+			}
+		}
+
+	}
+
+	protected List<BlockPosition> F_() {
+		ArrayList arraylist = Lists.newArrayList();
+		ChunkCoordIntPair[] achunkcoordintpair = this.d;
+		int i = achunkcoordintpair.length;
+
+		for (int j = 0; j < i; ++j) {
+			ChunkCoordIntPair chunkcoordintpair = achunkcoordintpair[j];
+
+			if (chunkcoordintpair != null) {
+				arraylist.add(chunkcoordintpair.a(64));
+			}
+		}
+
+		return arraylist;
+	}
+
+	protected StructureStart b(int i, int j) {
+		WorldGenStronghold.WorldGenStronghold2Start worldgenstronghold_worldgenstronghold2start;
+
+		for (worldgenstronghold_worldgenstronghold2start = new WorldGenStronghold.WorldGenStronghold2Start(this.g,
+				this.f, i, j); worldgenstronghold_worldgenstronghold2start.c().isEmpty()
+						|| ((WorldGenStrongholdPieces.WorldGenStrongholdStart) worldgenstronghold_worldgenstronghold2start
+								.c()
+								.get(0)).b == null; worldgenstronghold_worldgenstronghold2start = new WorldGenStronghold.WorldGenStronghold2Start(
+										this.g, this.f, i, j)) {
+			;
+		}
+
+		return worldgenstronghold_worldgenstronghold2start;
+	}
+
+	public static class WorldGenStronghold2Start extends StructureStart {
+
+		public WorldGenStronghold2Start() {
+		}
+
+		public WorldGenStronghold2Start(World world, Random random, int i, int j) {
+			super(i, j);
+			WorldGenStrongholdPieces.b();
+			WorldGenStrongholdPieces.WorldGenStrongholdStart worldgenstrongholdpieces_worldgenstrongholdstart = new WorldGenStrongholdPieces.WorldGenStrongholdStart(
+					0, random, (i << 4) + 2, (j << 4) + 2);
+
+			this.a.add(worldgenstrongholdpieces_worldgenstrongholdstart);
+			worldgenstrongholdpieces_worldgenstrongholdstart
+					.a((StructurePiece) worldgenstrongholdpieces_worldgenstrongholdstart, this.a, random);
+			List list = worldgenstrongholdpieces_worldgenstrongholdstart.c;
+
+			while (!list.isEmpty()) {
+				int k = random.nextInt(list.size());
+				StructurePiece structurepiece = (StructurePiece) list.remove(k);
+
+				structurepiece.a((StructurePiece) worldgenstrongholdpieces_worldgenstrongholdstart, this.a, random);
+			}
+
+			this.d();
+			this.a(world, random, 10);
+		}
+	}
+}
diff --git a/src/main/java/net/minecraft/server/WorldServer.java b/src/main/java/net/minecraft/server/WorldServer.java
index 77888d8..220beb3 100644
--- a/src/main/java/net/minecraft/server/WorldServer.java
+++ b/src/main/java/net/minecraft/server/WorldServer.java
@@ -329,8 +329,10 @@ public class WorldServer extends World implements IAsyncTaskHandler {
 
 	@Override
 	public void everyoneSleeping() {
-		if (MigotConfig.disableSleepChecking) { return; }
-		
+		if (MigotConfig.disableSleepChecking) {
+			return;
+		}
+
 		this.O = false;
 		if (!this.players.isEmpty()) {
 			int i = 0;
diff --git a/src/main/java/org/bukkit/command/CommandTarget.java b/src/main/java/org/bukkit/command/CommandTarget.java
index a3791fa..a8f26c6 100644
--- a/src/main/java/org/bukkit/command/CommandTarget.java
+++ b/src/main/java/org/bukkit/command/CommandTarget.java
@@ -235,7 +235,7 @@ public class CommandTarget {
 		for (int i = 0; i < count; i++) {
 			if (selector == SelectorType.RANDOM) {
 				while (true) {
-					int random = new Random().nextInt(count + 1);
+					int random = com.mrpowergamerbr.parappatown.utils.LightStatic.random.nextInt(count + 1);
 					if (!used.contains(random)) {
 						matched.add(entities.get(random));
 						used.add(random);
diff --git a/src/main/java/org/bukkit/command/defaults/WeatherCommand.java b/src/main/java/org/bukkit/command/defaults/WeatherCommand.java
index d8694f5..aceb374 100644
--- a/src/main/java/org/bukkit/command/defaults/WeatherCommand.java
+++ b/src/main/java/org/bukkit/command/defaults/WeatherCommand.java
@@ -35,7 +35,7 @@ public class WeatherCommand extends VanillaCommand {
 			return false;
 		}
 
-		int duration = (300 + new Random().nextInt(600)) * 20;
+		int duration = (300 + com.mrpowergamerbr.parappatown.utils.LightStatic.random.nextInt(600)) * 20;
 		if (args.length >= 2) {
 			duration = getInteger(sender, args[1], 1, 1000000) * 20;
 		}
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
index cc0de59..4fdfe36 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
@@ -150,7 +150,7 @@ public class CraftWorld implements World {
 	private int chunkLoadCount = 0;
 	private int chunkGCTickCount;
 
-	private static final LightRandom rand = new LightRandom();
+	private static final LightRandom rand = com.mrpowergamerbr.parappatown.utils.LightStatic.random;
 
 	public CraftWorld(WorldServer world, ChunkGenerator gen, Environment env) {
 		this.world = world;
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftFirework.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftFirework.java
index 78d44ce..eea068a 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftFirework.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftFirework.java
@@ -18,7 +18,7 @@ import net.minecraft.server.Items;
 
 public class CraftFirework extends CraftEntity implements Firework {
 
-	private final LightRandom random = new LightRandom();
+	private final LightRandom random = com.mrpowergamerbr.parappatown.utils.LightStatic.random;
 	private final CraftItemStack item;
 
 	public CraftFirework(CraftServer server, EntityFireworks entity) {
diff --git a/src/main/resources/configurations/migot.yml b/src/main/resources/configurations/migot.yml
index 70dc9bf..82f76f5 100644
--- a/src/main/resources/configurations/migot.yml
+++ b/src/main/resources/configurations/migot.yml
@@ -10,6 +10,7 @@ settings:
   enable-velocity-warn: true
 world-settings:
   disable-sleep-checking: false
+  disable-mob-spanwer-modify: false
 fml:
   enable-fml-monitor: false
   disabled-mods: {}
-- 
2.8.2.windows.1

