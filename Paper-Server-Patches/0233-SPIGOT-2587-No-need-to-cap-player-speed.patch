From 19c9661d6feb17436b0ff6bb4b2f767061e27de2 Mon Sep 17 00:00:00 2001
From: SotrForgotten <i@omc.hk>
Date: Sat, 13 Aug 2016 02:34:59 +0800
Subject: [PATCH] SPIGOT-2587: No need to cap player speed


diff --git a/pom.xml b/pom.xml
index 510a5c2..90e7561 100644
--- a/pom.xml
+++ b/pom.xml
@@ -122,6 +122,11 @@
             <version>1.3.RC2</version>
             <scope>test</scope>
         </dependency>
+		 <dependency>
+            <groupId>com.flowpowered</groupId>
+            <artifactId>flow-math</artifactId>
+            <version>1.0.4-SNAPSHOT</version>
+        </dependency>
     </dependencies>
 
     <!-- required until fixed plexus-compiler-eclipse is deployed -->
diff --git a/src/main/java/net/minecraft/server/EntityHuman.java b/src/main/java/net/minecraft/server/EntityHuman.java
index 123b2e9..14c54fb 100644
--- a/src/main/java/net/minecraft/server/EntityHuman.java
+++ b/src/main/java/net/minecraft/server/EntityHuman.java
@@ -388,7 +388,7 @@ public abstract class EntityHuman extends EntityLiving {
 
 		this.l((float) attributeinstance.getValue());
 		float f = MathHelper.sqrt(this.motX * this.motX + this.motZ * this.motZ);
-		float f1 = (float) (org.bukkit.craftbukkit.TrigMath.atan(-this.motY * 0.20000000298023224D) * 15.0D); // CraftBukkit
+		float f1 = (float) (com.flowpowered.math.TrigMath.atan(-this.motY * 0.20000000298023224D) * 15.0D); // CraftBukkit
 
 		if (f > 0.1F) {
 			f = 0.1F;
diff --git a/src/main/java/net/minecraft/server/MathHelper.java b/src/main/java/net/minecraft/server/MathHelper.java
index 33dede4..63b81e1 100644
--- a/src/main/java/net/minecraft/server/MathHelper.java
+++ b/src/main/java/net/minecraft/server/MathHelper.java
@@ -3,7 +3,9 @@ package net.minecraft.server;
 import java.util.Random;
 import java.util.UUID;
 
-import com.mrpowergamerbr.utils.LightRandom; // Torch
+import com.mrpowergamerbr.utils.LightRandom;
+import com.flowpowered.math.GenericMath;
+import com.flowpowered.math.TrigMath;
 
 public class MathHelper {
 
@@ -24,11 +26,11 @@ public class MathHelper {
 	}
 
 	public static float c(float f) {
-		return (float) Math.sqrt(f);
+		return (float) GenericMath.sqrt(f);
 	}
 
 	public static float sqrt(double d0) {
-		return (float) Math.sqrt(d0);
+		return (float) GenericMath.sqrt(d0);
 	}
 
 	public static int d(float f) {
@@ -38,9 +40,7 @@ public class MathHelper {
 	}
 
 	public static int floor(double d0) {
-		int i = (int) d0;
-
-		return d0 < i ? i - 1 : i;
+		return GenericMath.floor(d0);
 	}
 
 	public static long d(double d0) {
@@ -69,9 +69,9 @@ public class MathHelper {
 		return d0 > i ? i + 1 : i;
 	}
 
-	public static int clamp(int i, int j, int k) {
-		return i < j ? j : (i > k ? k : i);
-	}
+	public static int clamp(int x, int min, int max) {
+        return GenericMath.clamp(x, min, max);
+    }
 
 	public static float a(float f, float f1, float f2) {
 		return f < f1 ? f1 : (f > f2 ? f2 : f);
@@ -319,7 +319,7 @@ public class MathHelper {
 		int i;
 
 		for (i = 0; i < 65536; ++i) {
-			MathHelper.b[i] = (float) Math.sin(i * 3.141592653589793D * 2.0D / 65536.0D);
+			MathHelper.b[i] = (float) TrigMath.sin(i * 3.141592653589793D * 2.0D / 65536.0D);
 		}
 
 		d = new int[] { 0, 1, 28, 2, 29, 14, 24, 3, 30, 22, 20, 15, 25, 17, 4, 8, 31, 27, 13, 23, 21, 19, 16, 7, 26, 12,
@@ -330,9 +330,9 @@ public class MathHelper {
 
 		for (i = 0; i < 257; ++i) {
 			double d0 = i / 256.0D;
-			double d1 = Math.asin(d0);
+			double d1 = TrigMath.asin(d0);
 
-			MathHelper.g[i] = Math.cos(d1);
+			MathHelper.g[i] = TrigMath.cos(d1);
 			MathHelper.f[i] = d1;
 		}
 
diff --git a/src/main/java/org/bukkit/craftbukkit/TrigMath.java b/src/main/java/org/bukkit/craftbukkit/TrigMath.java
deleted file mode 100644
index 181bd3c..0000000
--- a/src/main/java/org/bukkit/craftbukkit/TrigMath.java
+++ /dev/null
@@ -1,107 +0,0 @@
-/*
- * This file is part of Flow Math, licensed under the MIT License (MIT).
- *
- * Copyright (c) 2013 Flow Powered <https://flowpowered.com/>
- *
- * Permission is hereby granted, free of charge, to any person obtaining a copy
- * of this software and associated documentation files (the "Software"), to deal
- * in the Software without restriction, including without limitation the rights
- * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
- * copies of the Software, and to permit persons to whom the Software is
- * furnished to do so, subject to the following conditions:
- *
- * The above copyright notice and this permission notice shall be included in
- * all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
- * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
- * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
- * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
- * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
- * THE SOFTWARE.
- */
-package org.bukkit.craftbukkit;
-
-/**
- * Credits for this class goes to user aioobe on stackoverflow.com Source:
- * http://stackoverflow.com/questions/4454630/j2me-calculate-the-the-distance-
- * between-2-latitude-and-longitude
- */
-public class TrigMath {
-	// Constants
-	public static final double PI = Math.PI;
-	public static final double HALF_PI = PI / 2;
-	// Arc trig
-	private static final double sq2p1 = 2.414213562373095048802;
-	private static final double sq2m1 = 0.414213562373095048802;
-	private static final double p4 = 0.161536412982230228262E2;
-	private static final double p3 = 0.26842548195503973794141E3;
-	private static final double p2 = 0.11530293515404850115428136E4;
-	private static final double p1 = 0.178040631643319697105464587E4;
-	private static final double p0 = 0.89678597403663861959987488E3;
-	private static final double q4 = 0.5895697050844462222791E2;
-	private static final double q3 = 0.536265374031215315104235E3;
-	private static final double q2 = 0.16667838148816337184521798E4;
-	private static final double q1 = 0.207933497444540981287275926E4;
-	private static final double q0 = 0.89678597403663861962481162E3;
-
-	private static double mxatan(double arg) {
-		final double argsq = arg * arg;
-		double value = ((((p4 * argsq + p3) * argsq + p2) * argsq + p1) * argsq + p0);
-		value /= ((((argsq + q4) * argsq + q3) * argsq + q2) * argsq + q1) * argsq + q0;
-		return value * arg;
-	}
-
-	private static double msatan(double arg) {
-		if (arg < sq2m1) {
-			return mxatan(arg);
-		}
-		if (arg > sq2p1) {
-			return HALF_PI - mxatan(1 / arg);
-		}
-		return HALF_PI / 2 + mxatan((arg - 1) / (arg + 1));
-	}
-
-	/**
-	 * Calculates the arc tangent of the value specified
-	 *
-	 * @param value
-	 *            of the tangent
-	 * @return tangent arc in radians
-	 */
-	public static double atan(double value) {
-		if (value > 0) {
-			return msatan(value);
-		} else {
-			return -msatan(-value);
-		}
-	}
-
-	/**
-	 * Computes the phase theta by computing an arc tangent of y/x<br>
-	 * Gets the yaw rotation component in radians when looking into the
-	 * direction specified
-	 *
-	 * @param y
-	 *            direction
-	 * @param x
-	 *            direction
-	 * @return tangent arc in radians
-	 */
-	public static double atan2(double y, double x) {
-		if (y + x == y) {
-			return y >= 0 ? HALF_PI : -HALF_PI;
-		}
-		y = atan(y / x);
-		if (x < 0) {
-			if (y <= 0) {
-				return y + PI;
-			} else {
-				return y - PI;
-			}
-		}
-		return y;
-	}
-
-}
\ No newline at end of file
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index 281b4d8..b8c136c 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -1453,7 +1453,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 	public void setFlySpeed(float value) {
 		validateSpeed(value);
 		EntityPlayer player = getHandle();
-		player.abilities.flySpeed = Math.max(value, 0.0001f) / 2f; // Spigot
+		player.abilities.flySpeed = value / 2f;
 		player.updateAbilities();
 
 	}
@@ -1462,7 +1462,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 	public void setWalkSpeed(float value) {
 		validateSpeed(value);
 		EntityPlayer player = getHandle();
-		player.abilities.walkSpeed = Math.max(value, 0.0001f) / 2f; // Spigot
+		player.abilities.walkSpeed = value / 2f;
 		player.updateAbilities();
 	}
 
-- 
2.8.2.windows.1

