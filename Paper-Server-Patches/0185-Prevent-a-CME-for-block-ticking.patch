From 0d46673566becfa9373f9b3c14daa73bf3422819 Mon Sep 17 00:00:00 2001
From: SotrForgotten <i@omc.hk>
Date: Thu, 28 Jul 2016 17:30:57 +0800
Subject: [PATCH] Prevent a CME for block ticking


diff --git a/pom.xml b/pom.xml
index db959ce..7b940f3 100644
--- a/pom.xml
+++ b/pom.xml
@@ -62,6 +62,12 @@
             <version>2.12.1</version>
             <scope>compile</scope>
         </dependency>
+		 <dependency>
+            <groupId>com.googlecode.concurrentlinkedhashmap</groupId>
+            <artifactId>concurrentlinkedhashmap-lru</artifactId>
+            <version>1.4.2</version>
+            <scope>compile</scope>
+        </dependency>
         <dependency>
             <groupId>org.xerial</groupId>
             <artifactId>sqlite-jdbc</artifactId>
diff --git a/src/main/java/co/aikar/timings/TimingHandler.java b/src/main/java/co/aikar/timings/TimingHandler.java
index 0914417..850f3b7 100644
--- a/src/main/java/co/aikar/timings/TimingHandler.java
+++ b/src/main/java/co/aikar/timings/TimingHandler.java
@@ -108,12 +108,16 @@ class TimingHandler implements Timing {
 
     public void stopTiming() {
         if (enabled && --timingDepth == 0 && start != 0) {
-            if (!Bukkit.isPrimaryThread()) {
-                Bukkit.getLogger().log(Level.SEVERE, "stopTiming called async for " + name);
+            /* if (!Bukkit.isPrimaryThread()) { // Torch start - Temporary workaround for timings
+                Bukkit.getLogger().log(Level.SEVERE, "Timing issue occour in " + name + ", please report it to Torch!");
                 new Throwable().printStackTrace();
                 start = 0;
                 return;
-            }
+            } */
+			if (!Bukkit.isPrimaryThread()) {
+				start = 0;
+                return;
+			} // Torch end
             addDiff(System.nanoTime() - start);
             start = 0;
         }
diff --git a/src/main/java/de/minetick/Migot.java b/src/main/java/de/minetick/Migot.java
index 5b962c4..8fedfd5 100644
--- a/src/main/java/de/minetick/Migot.java
+++ b/src/main/java/de/minetick/Migot.java
@@ -32,8 +32,8 @@ public class Migot {
     private boolean failedToLoadConfig = false;
     private TickTimer tickTimerObject;
     private int timerDelay = 45;
-    private ScheduledExecutorService timerService = Executors.newScheduledThreadPool(1, new MigotThreadFactory(Thread.NORM_PRIORITY + 2, "Torch_TimerService")); // Torch
-	private ExecutorService nbtFileService = Executors.newSingleThreadExecutor(new MigotThreadFactory(Thread.NORM_PRIORITY - 2, "Torch_NBTFileSaver")); // Torch
+    private ScheduledExecutorService timerService = Executors.newScheduledThreadPool(1, new MigotThreadFactory(Thread.NORM_PRIORITY + 2, "Timer Service")); // Torch
+	private ExecutorService nbtFileService = Executors.newSingleThreadExecutor(new MigotThreadFactory(Thread.NORM_PRIORITY - 2, "NBT File Saver")); // Torch
     private ScheduledFuture<Object> tickTimerTask;
     private static Migot instance;
     private boolean initDone = false;
diff --git a/src/main/java/net/minecraft/server/ChunkProviderServer.java b/src/main/java/net/minecraft/server/ChunkProviderServer.java
index f3a2192..b399f6a 100644
--- a/src/main/java/net/minecraft/server/ChunkProviderServer.java
+++ b/src/main/java/net/minecraft/server/ChunkProviderServer.java
@@ -92,7 +92,6 @@ public class ChunkProviderServer implements IChunkProvider {
             this.unloadQueue.add(Long.valueOf(ChunkCoordIntPair.a(chunk.locX, chunk.locZ)));
             chunk.d = true;
         }
-
     }
 
     public void b() {
diff --git a/src/main/java/net/minecraft/server/DedicatedServer.java b/src/main/java/net/minecraft/server/DedicatedServer.java
index 70eb716..e947ad7 100644
--- a/src/main/java/net/minecraft/server/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/DedicatedServer.java
@@ -15,6 +15,7 @@ import java.util.Random;
 import java.util.concurrent.TimeUnit;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import java.util.concurrent.RecursiveAction;
 
 // CraftBukkit start
 import java.io.PrintStream;
@@ -27,6 +28,8 @@ import org.bukkit.craftbukkit.util.Waitable;
 import org.bukkit.event.server.RemoteServerCommandEvent;
 // CraftBukkit end
 
+import org.torch.light.LightRandom;
+
 public class DedicatedServer extends MinecraftServer implements IMinecraftServer {
 
     private static final Logger LOGGER = LogManager.getLogger();
@@ -124,6 +127,8 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
 
         DedicatedServer.LOGGER.info("Loading properties");
         this.propertyManager = new PropertyManager(this.options); // CraftBukkit - CLI argument support
+		
+		/*
         this.q = new EULA(new File("eula.txt"));
         // Spigot Start
         boolean eulaAgreed = Boolean.getBoolean( "com.mojang.eula.agree" );
@@ -134,11 +139,13 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
             System.err.println( "If you do not agree to the above EULA please stop your server and remove this flag immediately." );
         }
         // Spigot End
+		
         if (!this.q.a() && !eulaAgreed) { // Spigot
             DedicatedServer.LOGGER.info("You need to agree to the EULA in order to run the server. Go to eula.txt for more info.");
             this.q.b();
             return false;
         } else {
+		*/
             if (this.R()) {
                 this.c("127.0.0.1");
             } else {
@@ -174,6 +181,7 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
             if (this.P() < 0) {
                 this.setPort(this.propertyManager.getInt("server-port", 25565));
             }
+			
             // Spigot start
             this.a((PlayerList) (new DedicatedPlayerList(this)));
             org.spigotmc.SpigotConfig.init((File) options.valueOf("spigot-settings"));
@@ -194,19 +202,19 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
             this.a(MinecraftEncryption.b());
             DedicatedServer.LOGGER.info("Starting Minecraft server on " + (this.getServerIp().isEmpty() ? "*" : this.getServerIp()) + ":" + this.P());
 
-        if (!org.spigotmc.SpigotConfig.lateBind) {
-            try {
-                this.am().a(inetaddress, this.P());
-                if(this.getServerConnection().getPort() != this.getConfiguredPort()) {
-                    DedicatedServer.LOGGER.info("Bound to port " + this.getServerConnection().getPort());
-                }
-            } catch (IOException ioexception) {
-                DedicatedServer.LOGGER.warn("**** FAILED TO BIND TO PORT!");
-                DedicatedServer.LOGGER.warn("The exception was: {}", new Object[] { ioexception.toString()});
-                DedicatedServer.LOGGER.warn("Perhaps a server is already running on that port?");
-                return false;
-            }
-        }
+			if (!org.spigotmc.SpigotConfig.lateBind) {
+				try {
+					this.am().a(inetaddress, this.P());
+					if(this.getServerConnection().getPort() != this.getConfiguredPort()) {
+						DedicatedServer.LOGGER.info("Bound to port " + this.getServerConnection().getPort());
+					}
+				} catch (IOException ioexception) {
+					DedicatedServer.LOGGER.warn("**** FAILED TO BIND TO PORT!");
+					DedicatedServer.LOGGER.warn("The exception was: {}", new Object[] { ioexception.toString()});
+					DedicatedServer.LOGGER.warn("Perhaps a server is already running on that port?");
+					return false;
+				}
+			}
 
             // Spigot Start - Move DedicatedPlayerList up and bring plugin loading from CraftServer to here
             // this.a((PlayerList) (new DedicatedPlayerList(this))); // CraftBukkit
@@ -245,7 +253,7 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
                 String s = this.propertyManager.getString("level-seed", "");
                 String s1 = this.propertyManager.getString("level-type", "DEFAULT");
                 String s2 = this.propertyManager.getString("generator-settings", "");
-                long k = (new Random()).nextLong();
+                long k = (new LightRandom()).nextLong(); // Torch - use LightRNG
 
                 if (!s.isEmpty()) {
                     try {
@@ -265,11 +273,14 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
                     worldtype = WorldType.NORMAL;
                 }
 
-                this.ax();
+				/* this.ax(); // Torch start - fork
                 this.getEnableCommandBlock();
                 this.q();
                 this.getSnooperEnabled();
-                this.aF();
+                this.aF(); */ // Torch end
+				SubTask task_a = new SubTask();
+				task_a.fork();
+				
                 this.c(this.propertyManager.getInt("max-build-height", 256));
                 this.c((this.getMaxBuildHeight() + 8) / 16 * 16);
                 this.c(MathHelper.clamp(this.getMaxBuildHeight(), 64, 256));
@@ -277,8 +288,11 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
                 TileEntitySkull.a(this.getUserCache());
                 TileEntitySkull.a(this.ay());
                 UserCache.a(this.getOnlineMode());
-                DedicatedServer.LOGGER.info("Preparing level \"" + this.S() + "\"");
-                this.a(this.S(), this.S(), k, worldtype, s2);
+				
+				String str = this.S();
+                DedicatedServer.LOGGER.info("Preparing level \"" + str + "\"");
+                this.a(str, str, k, worldtype, s2);
+				
                 long i1 = System.nanoTime() - j;
                 String s3 = String.format("%.3fs", new Object[] { Double.valueOf((double) i1 / 1.0E9D)});
 
@@ -306,16 +320,16 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
                 }
                 // CraftBukkit end
 
-        if (org.spigotmc.SpigotConfig.lateBind) {
-            try {
-                this.am().a(inetaddress, this.P());
-            } catch (IOException ioexception) {
-                DedicatedServer.LOGGER.warn("**** FAILED TO BIND TO PORT!");
-                DedicatedServer.LOGGER.warn("The exception was: {}", new Object[] { ioexception.toString()});
-                DedicatedServer.LOGGER.warn("Perhaps a server is already running on that port?");
-                return false;
-            }
-        }
+				if (org.spigotmc.SpigotConfig.lateBind) {
+					try {
+						this.am().a(inetaddress, this.P());
+					} catch (IOException ioexception) {
+						DedicatedServer.LOGGER.warn("**** FAILED TO BIND TO PORT!");
+						DedicatedServer.LOGGER.warn("The exception was: {}", new Object[] { ioexception.toString()});
+						DedicatedServer.LOGGER.warn("Perhaps a server is already running on that port?");
+						return false;
+					}
+				}
 
                 if (false && this.aP() > 0L) {  // Spigot - disable
                     Thread thread1 = new Thread(new ThreadWatchdog(this));
@@ -327,7 +341,24 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
 
                 return true;
             }
-        }
+        // }
+    }
+	
+	class SubTask extends RecursiveAction {
+        SubTask() {}
+        
+        @Override
+        protected void compute() {
+            sub_task_a();
+        }     
+    }
+	
+	protected void sub_task_a() {
+        this.ax();
+        this.getEnableCommandBlock();
+        this.q();
+        this.getSnooperEnabled();
+        this.aF();
     }
 
     public String aK() {
diff --git a/src/main/java/net/minecraft/server/EntityInsentient.java b/src/main/java/net/minecraft/server/EntityInsentient.java
index d170e1b..7f9b38f 100644
--- a/src/main/java/net/minecraft/server/EntityInsentient.java
+++ b/src/main/java/net/minecraft/server/EntityInsentient.java
@@ -635,8 +635,6 @@ public abstract class EntityInsentient extends EntityLiving {
         }
     }
 
-	// navigation nav_task;
-    // targetSelector tar_task;
     protected final void doTick() {
         ++this.ticksFarFromPlayer;
 		
@@ -660,23 +658,12 @@ public abstract class EntityInsentient extends EntityLiving {
         this.world.methodProfiler.b();
         this.world.methodProfiler.a("targetSelector");
         this.targetSelector.a();
-		// tar_task = new targetSelector();
-        // tar_task.fork();
         this.world.methodProfiler.b();
         this.world.methodProfiler.a("goalSelector");
         this.goalSelector.a();
-		/* // Torch - ForkJoin shouldn't in do tick.
-		try {
-            this.goalSelector.a();
-        } catch (Exception ex) {
-            world.getServer().getLogger().log(java.util.logging.Level.WARNING, "Entityliving doTick - Goal cannot find.");
-        }
-		*/
         this.world.methodProfiler.b();
         this.world.methodProfiler.a("navigation");
         this.navigation.l();
-		// nav_task = new navigation();
-        // nav_task.fork();
         this.world.methodProfiler.b();
         this.world.methodProfiler.a("mob tick");
         this.M();
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index cd93c15..bf23f42 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -236,31 +236,6 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
         this.a(s);
         this.b("menu.loadingLevel");
         this.worldServer = new WorldServer[3];
-        /* CraftBukkit start - Remove ticktime arrays and worldsettings
-        this.i = new long[this.worldServer.length][100];
-        IDataManager idatamanager = this.convertable.a(s, true);
-
-        this.a(this.S(), idatamanager);
-        WorldData worlddata = idatamanager.getWorldData();
-        WorldSettings worldsettings;
-
-        if (worlddata == null) {
-            if (this.V()) {
-                worldsettings = DemoWorldServer.a;
-            } else {
-                worldsettings = new WorldSettings(i, this.getGamemode(), this.getGenerateStructures(), this.isHardcore(), worldtype);
-                worldsettings.setGeneratorSettings(s2);
-                if (this.M) {
-                    worldsettings.a();
-                }
-            }
-
-            worlddata = new WorldData(worldsettings, s1);
-        } else {
-            worlddata.a(s1);
-            worldsettings = new WorldSettings(worlddata);
-        }
-        */
         int worldCount = 3;
 
         for (int j = 0; j < worldCount; ++j) {
@@ -663,8 +638,7 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
     }
     // Paper End
 	
-	private static double calcTps(double avg, double exp, double tps)
-    {
+	private static double calcTps(double avg, double exp, double tps) {
         return ( avg * exp ) + ( tps * ( 1 - exp ) );
     }
 
@@ -897,9 +871,11 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
 
         this.methodProfiler.c("levels");
 
+		/*
         MinecraftTimings.bukkitSchedulerTimer.startTiming(); // Paper
         // CraftBukkit start
         MinecraftTimings.bukkitSchedulerTimer.stopTiming(); // Paper
+		*/
 
         // Run tasks that are waiting on processing
         MinecraftTimings.processQueueTimer.startTiming(); // Spigot
@@ -948,7 +924,11 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
 
                 try {
                     worldserver.timings.doTick.startTiming(); // Spigot
-                    worldserver.doTick();
+					// Torch start
+					Thread worldtick = new Thread(new WorldTickThread(worldserver), "World Ticking Thread");
+                    // worldserver.doTick();
+					worldtick.start(); // do server tick
+					// Torch end
                     worldserver.timings.doTick.stopTiming(); // Spigot
                 } catch (Throwable throwable) {
                     // Spigot Start
@@ -965,7 +945,11 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
 				processNetworkQueue(); // Paper
                 try {
                     worldserver.timings.tickEntities.startTiming(); // Spigot
+					// Torch start
+					// Thread entitytick = new Thread(new EntityTickThread(worldserver), "Entities Ticking Thread");
                     worldserver.tickEntities();
+					// entitytick.start(); // do entity tick
+					// Torch end
                     worldserver.timings.tickEntities.stopTiming(); // Spigot
                 } catch (Throwable throwable1) {
                     // Spigot Start
@@ -1014,6 +998,24 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
 		processNetworkQueue(); // Paper
     }
 
+	// Torch start
+	class WorldTickThread extends Thread {
+		WorldServer worldserver;
+		WorldTickThread(WorldServer worldserver) {
+			this.worldserver = worldserver;
+		}
+        public void run() { worldserver.doTick(); }
+    }
+	/*
+	class EntityTickThread extends Thread {
+		WorldServer worldserver;
+		EntityTickThread(WorldServer worldserver) {
+			this.worldserver = worldserver;
+		}
+        public void run() { worldserver.tickEntities(); }
+    }
+	*/ // Torch end
+
     public boolean getAllowNether() {
         return true;
     }
@@ -1034,39 +1036,6 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
             UserCache usercache = new UserCache(gameprofilerepository, new File(s1, MinecraftServer.a.getName()));
             final DedicatedServer dedicatedserver = new DedicatedServer(options, DataConverterRegistry.a(), yggdrasilauthenticationservice, minecraftsessionservice, gameprofilerepository, usercache);
 
-            /* CraftBukkit start
-            if (s != null) {
-                dedicatedserver.i(s);
-            }
-
-            if (s2 != null) {
-                dedicatedserver.setWorld(s2);
-            }
-
-            if (i >= 0) {
-                dedicatedserver.setPort(i);
-            }
-
-            if (flag1) {
-                dedicatedserver.b(true);
-            }
-
-            if (flag2) {
-                dedicatedserver.c(true);
-            }
-
-            if (flag && !GraphicsEnvironment.isHeadless()) {
-                dedicatedserver.aN();
-            }
-
-            dedicatedserver.F();
-            Runtime.getRuntime().addShutdownHook(new Thread("Server Shutdown Thread") {
-                public void run() {
-                    dedicatedserver.stop();
-                }
-            });
-            */
-
             if (options.has("port")) {
                 int port = (Integer) options.valueOf("port");
                 if (port > 0) {
diff --git a/src/main/java/net/minecraft/server/NavigationListener.java b/src/main/java/net/minecraft/server/NavigationListener.java
index fea9ea7..a10e349 100644
--- a/src/main/java/net/minecraft/server/NavigationListener.java
+++ b/src/main/java/net/minecraft/server/NavigationListener.java
@@ -3,7 +3,7 @@ package net.minecraft.server;
 import com.google.common.collect.Lists;
 import java.util.List;
 import javax.annotation.Nullable;
-import java.util.LinkedHashMap;
+import com.googlecode.concurrentlinkedhashmap.ConcurrentLinkedHashMap; // Torch
 import java.util.Map;
 import java.util.Map.Entry;
 
@@ -13,7 +13,7 @@ public class NavigationListener implements IWorldAccess {
 
     public NavigationListener() {}
 	
-	private final Map<EntityInsentient, NavigationAbstract> navigators = new LinkedHashMap<EntityInsentient, NavigationAbstract>();
+	private final ConcurrentLinkedHashMap<EntityInsentient, NavigationAbstract> navigators = new ConcurrentLinkedHashMap.Builder<EntityInsentient, NavigationAbstract>().maximumWeightedCapacity(1000).build();
 
     public void a(final World world, final BlockPosition blockPosition, final IBlockData blockData, final IBlockData blockData2, final int n) {
 		if (!a(world, blockPosition, blockData, blockData2)) {
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index 5408f91..778d1ce 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -1684,12 +1684,11 @@ public abstract class World implements IBlockAccess {
         int entitiesThisCycle = 0;
         // Paper start - Disable tick limiters
         //if (tickPosition < 0) tickPosition = 0;
-		Queue<RecursiveAction> forks = Queues.newConcurrentLinkedQueue();
         for (tickPosition = 0; tickPosition < entityList.size(); tickPosition++) {
             // Paper end
             tickPosition = (tickPosition < entityList.size()) ? tickPosition : 0;
             entity = (Entity) this.entityList.get(this.tickPosition);
-			tick_hose(entity);
+			synchronized(this) { tick_hose(entity); }
             // CraftBukkit end
         }
         guardEntityList = false; // Spigot
diff --git a/src/main/java/net/minecraft/server/WorldServer.java b/src/main/java/net/minecraft/server/WorldServer.java
index e5b40bc..e4bf6f4 100644
--- a/src/main/java/net/minecraft/server/WorldServer.java
+++ b/src/main/java/net/minecraft/server/WorldServer.java
@@ -251,7 +251,7 @@ public class WorldServer extends World implements IAsyncTaskHandler {
 
         timings.doChunkUnload.startTiming(); // Spigot
         this.methodProfiler.c("chunkSource");
-        this.chunkProvider.unloadChunks();
+		synchronized(this) { this.chunkProvider.unloadChunks(); }
         int j = this.a(1.0F);
 
         if (j != this.af()) {
diff --git a/src/main/java/org/bukkit/craftbukkit/TrigMath.java b/src/main/java/org/bukkit/craftbukkit/TrigMath.java
index 2e33296..ce2c128 100644
--- a/src/main/java/org/bukkit/craftbukkit/TrigMath.java
+++ b/src/main/java/org/bukkit/craftbukkit/TrigMath.java
@@ -1,3 +1,26 @@
+/*
+ * This file is part of Flow Math, licensed under the MIT License (MIT).
+ *
+ * Copyright (c) 2013 Flow Powered <https://flowpowered.com/>
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a copy
+ * of this software and associated documentation files (the "Software"), to deal
+ * in the Software without restriction, including without limitation the rights
+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+ * copies of the Software, and to permit persons to whom the Software is
+ * furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+ * THE SOFTWARE.
+ */
 package org.bukkit.craftbukkit;
 
 /**
@@ -5,51 +28,74 @@ package org.bukkit.craftbukkit;
  * Source: http://stackoverflow.com/questions/4454630/j2me-calculate-the-the-distance-between-2-latitude-and-longitude
  */
 public class TrigMath {
-
-    static final double sq2p1 = 2.414213562373095048802e0;
-    static final double sq2m1 = .414213562373095048802e0;
-    static final double p4 = .161536412982230228262e2;
-    static final double p3 = .26842548195503973794141e3;
-    static final double p2 = .11530293515404850115428136e4;
-    static final double p1 = .178040631643319697105464587e4;
-    static final double p0 = .89678597403663861959987488e3;
-    static final double q4 = .5895697050844462222791e2;
-    static final double q3 = .536265374031215315104235e3;
-    static final double q2 = .16667838148816337184521798e4;
-    static final double q1 = .207933497444540981287275926e4;
-    static final double q0 = .89678597403663861962481162e3;
-    static final double PIO2 = 1.5707963267948966135E0;
-	
-	private static double mxatan(double d) {
-		final double asq = d * d;
-		
-		double value = ((((p4 * asq + p3) * asq + p2) * asq + p1) * asq + p0);
-		value = value / (((((asq + q4) * asq + q3) * asq + q2) * asq + q1) * asq + q0);
-		return value * d;
-	}
+	// Constants
+    public static final double PI = Math.PI;
+    public static final double HALF_PI = PI / 2;
+    // Arc trig
+    private static final double sq2p1 = 2.414213562373095048802;
+    private static final double sq2m1 = 0.414213562373095048802;
+    private static final double p4 = 0.161536412982230228262E2;
+    private static final double p3 = 0.26842548195503973794141E3;
+    private static final double p2 = 0.11530293515404850115428136E4;
+    private static final double p1 = 0.178040631643319697105464587E4;
+    private static final double p0 = 0.89678597403663861959987488E3;
+    private static final double q4 = 0.5895697050844462222791E2;
+    private static final double q3 = 0.536265374031215315104235E3;
+    private static final double q2 = 0.16667838148816337184521798E4;
+    private static final double q1 = 0.207933497444540981287275926E4;
+    private static final double q0 = 0.89678597403663861962481162E3;
 	
+	private static double mxatan(double arg) {
+        final double argsq = arg * arg;
+        double value = ((((p4 * argsq + p3) * argsq + p2) * argsq + p1) * argsq + p0);
+        value /= ((((argsq + q4) * argsq + q3) * argsq + q2) * argsq + q1) * argsq + q0;
+        return value * arg;
+    }
+
     private static double msatan(double arg) {
-        return arg < sq2m1 ? mxatan(arg)
-             : arg > sq2p1 ? PIO2 - mxatan(1 / arg)
-             : PIO2 / 2 + mxatan((arg - 1) / (arg + 1));
+        if (arg < sq2m1) {
+            return mxatan(arg);
+        }
+        if (arg > sq2p1) {
+            return HALF_PI - mxatan(1 / arg);
+        }
+        return HALF_PI / 2 + mxatan((arg - 1) / (arg + 1));
     }
 	
-	public static double atan(double a) {
-		return a > 0 ? msatan(a) : -msatan(-a);
-	}
+	/**
+     * Calculates the arc tangent of the value specified
+     *
+     * @param value of the tangent
+     * @return tangent arc in radians
+     */
+    public static double atan(double value) {
+        if (value > 0) {
+            return msatan(value);
+        } else {
+            return -msatan(-value);
+        }
+    }
 
     /**
-	 * Fast arctangent2 calculation
-	 * 
-	 * @param y
-	 * @param x
-	 * @return rotation from 0,0 in radians
-	 */
-	public static double atan2(double y, double x) {
-		if (y + x == y)
-			return y >= 0 ? PIO2 : -PIO2;
-			y = atan(y / x);
-			return x < 0 ? y <= 0 ? y + Math.PI : y - Math.PI : y;
-	}
+     * Computes the phase theta by computing an arc tangent of y/x<br> Gets the yaw rotation component in radians when looking into the direction specified
+     *
+     * @param y direction
+     * @param x direction
+     * @return tangent arc in radians
+     */
+    public static double atan2(double y, double x) {
+        if (y + x == y) {
+            return y >= 0 ? HALF_PI : -HALF_PI;
+        }
+        y = atan(y / x);
+        if (x < 0) {
+            if (y <= 0) {
+                return y + PI;
+            } else {
+                return y - PI;
+            }
+        }
+        return y;
+    }
 
 }
\ No newline at end of file
-- 
2.8.2.windows.1

