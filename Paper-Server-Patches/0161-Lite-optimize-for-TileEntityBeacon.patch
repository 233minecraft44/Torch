From 4e58688a0800462a83b1238774145a30ddae1f8e Mon Sep 17 00:00:00 2001
From: SotrForgotten <i@omc.hk>
Date: Thu, 21 Jul 2016 00:44:39 +0800
Subject: [PATCH] Lite optimize for TileEntityBeacon


diff --git a/src/main/java/net/minecraft/server/TileEntityBeacon.java b/src/main/java/net/minecraft/server/TileEntityBeacon.java
index 77170aa..5a9061c 100644
--- a/src/main/java/net/minecraft/server/TileEntityBeacon.java
+++ b/src/main/java/net/minecraft/server/TileEntityBeacon.java
@@ -30,6 +30,9 @@ public class TileEntityBeacon extends TileEntityContainer implements ITickable,
     private final List<TileEntityBeacon.BeaconColorTracker> g = Lists.newArrayList();
     private boolean j;
     private int k = -1;
+	private int levels = 0;
+	private MobEffectList primary;
+	private MobEffectList secondary;
     @Nullable
     private MobEffectList l;
     @Nullable
@@ -71,12 +74,73 @@ public class TileEntityBeacon extends TileEntityContainer implements ITickable,
     }
 
     public void m() {
-        if (this.world != null) {
-            this.F();
-            this.E();
-        }
-
-    }
+		addEffects();
+		checkStructure();
+	}
+	
+	private void addEffects() {
+		if (this.levels > 0 && this.primary != null) {
+			final double aoe = this.levels * 10 + 10;
+			byte amplifier = 0;
+			if (this.levels >= 4 && this.primary == this.secondary) {
+				amplifier = 1;
+			}
+			final int duration = (9 + this.levels * 2) * 20;
+			final int x = this.position.getX();
+			final int y = this.position.getY();
+			final int z = this.position.getZ();
+			final AxisAlignedBB axisalignedbb = new AxisAlignedBB(x, y, z, (x + 1), (y + 1), (z + 1)).grow(aoe, aoe, aoe).a(0.0, this.world.getHeight(), 0.0);
+			final List<EntityHuman> list = this.world.a(EntityHuman.class, axisalignedbb);
+			for (final EntityHuman entityhuman : list) {
+				entityhuman.addEffect(new MobEffect(this.primary, duration, amplifier, true, true));
+			}
+			if (this.levels >= 4 && this.primary != this.secondary && this.secondary != null) {
+				for (final EntityHuman entityhuman : list) {
+					entityhuman.addEffect(new MobEffect(this.secondary, duration, 0, true, true));
+				}
+			}
+		}
+	}
+
+	private void checkStructure() {
+		int prevLevels = this.levels;
+		this.levels = 0;
+		final int beaconX = this.position.getX();
+		final int beaconY = this.position.getY();
+		final int beaconZ = this.position.getZ();
+		if (this.world.getHighestBlockYAt(this.position).getY() > beaconY) {
+			return;
+		}
+		for (int level = 1; level <= 4; level++) {
+			final int y = beaconY - level;
+			if (y < 0) {
+				break;
+			}
+			for (int x = beaconX - level; x <= beaconX + level; ++x) {
+				for (int z = beaconZ - level; z <= beaconZ + level; ++z) {
+					if (!isValidBlock(new BlockPosition(x, y, z))) {
+						return;
+					}
+				}
+			}
+			this.levels++;
+		}
+		if (this.levels == 4 && prevLevels < this.levels) {
+			for (final EntityHuman entityhuman : (List<EntityHuman>) this.world.a(EntityHuman.class, new AxisAlignedBB((double) beaconX, (double) beaconY, (double) beaconZ, (double) beaconX, (double) (beaconY - 4), (double) beaconZ).grow(10.0, 5.0, 10.0))) {
+				entityhuman.b(AchievementList.K);
+			}
+		}
+	}
+
+	private boolean isValidBlock(BlockPosition blockpos) {
+		if (this.world.isLoaded(blockpos)) {
+			Block block = this.world.getType(blockpos).getBlock();
+			if (block == Blocks.EMERALD_BLOCK || block == Blocks.GOLD_BLOCK || block == Blocks.DIAMOND_BLOCK || block == Blocks.IRON_BLOCK) {
+				return true;
+			}
+		}
+		return false;
+	}
 
     private void E() {
         if (this.j && this.k > 0 && !this.world.isClientSide && this.l != null) {
@@ -241,20 +305,36 @@ public class TileEntityBeacon extends TileEntityContainer implements ITickable,
         return TileEntityBeacon.f.contains(mobeffectlist) ? mobeffectlist : null;
     }
 
-    public void a(NBTTagCompound nbttagcompound) {
-        super.a(nbttagcompound);
-        this.l = f(nbttagcompound.getInt("Primary"));
-        this.m = f(nbttagcompound.getInt("Secondary"));
-        this.k = nbttagcompound.getInt("Levels");
-    }
-
-    public NBTTagCompound save(NBTTagCompound nbttagcompound) {
-        super.save(nbttagcompound);
-        nbttagcompound.setInt("Primary", MobEffectList.getId(this.l));
-        nbttagcompound.setInt("Secondary", MobEffectList.getId(this.m));
-        nbttagcompound.setInt("Levels", this.k);
-        return nbttagcompound;
-    }
+    public void a(final NBTTagCompound nbttagcompound) {
+		super.a(nbttagcompound);
+		this.primary = this.getByIdAndValidate(nbttagcompound.getInt("Primary"));
+		this.secondary = this.getByIdAndValidate(nbttagcompound.getInt("Secondary"));
+		this.levels = nbttagcompound.getInt("Levels");
+	}
+
+
+    public NBTTagCompound save(final NBTTagCompound nbttagcompound) {
+		super.save(nbttagcompound);
+		nbttagcompound.setInt("Primary", MobEffectList.getId(this.primary));
+		nbttagcompound.setInt("Secondary", MobEffectList.getId(this.secondary));
+		nbttagcompound.setInt("Levels", this.levels);
+		return nbttagcompound;
+	}
+	
+	private MobEffectList getByIdAndValidate(int input) {
+		MobEffectList effect = MobEffectList.fromId(input);
+		if (
+			effect == MobEffects.FASTER_MOVEMENT ||
+			effect == MobEffects.FASTER_DIG ||
+			effect == MobEffects.RESISTANCE ||
+			effect == MobEffects.JUMP ||
+			effect == MobEffects.INCREASE_DAMAGE ||
+			effect == MobEffects.REGENERATION
+		) {
+			return effect;
+		}
+		return null;
+	}
 
     public int getSize() {
         return 1;
@@ -337,37 +417,39 @@ public class TileEntityBeacon extends TileEntityContainer implements ITickable,
         return new ContainerBeacon(playerinventory, this);
     }
 
-    public int getProperty(int i) {
-        switch (i) {
-        case 0:
-            return this.k;
-
-        case 1:
-            return MobEffectList.getId(this.l);
-
-        case 2:
-            return MobEffectList.getId(this.m);
-
-        default:
-            return 0;
-        }
-    }
-
-    public void setProperty(int i, int j) {
-        switch (i) {
-        case 0:
-            this.k = j;
-            break;
-
-        case 1:
-            this.l = f(j);
-            break;
-
-        case 2:
-            this.m = f(j);
-        }
-
-    }
+    public int getProperty(final int key) {
+		switch (key) {
+			case 0: {
+				return this.levels;
+			}
+			case 1: {
+				return MobEffectList.getId(this.primary);
+			}
+			case 2: {
+				return MobEffectList.getId(this.secondary);
+			}
+			default: {
+				return 0;
+			}
+		}
+	}
+
+    public void setProperty(final int key, final int value) {
+		switch (key) {
+			case 0: {
+				this.levels = value;
+				break;
+			}
+			case 1: {
+				this.primary = this.getByIdAndValidate(value);
+				break;
+			}
+			case 2: {
+				this.secondary = this.getByIdAndValidate(value);
+				break;
+			}
+		}
+	}
 
     public int g() {
         return 3;
-- 
2.8.2.windows.1

