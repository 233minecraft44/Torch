From 7d2fab6b8b65034139e8863cc32faff7063e85e6 Mon Sep 17 00:00:00 2001
From: SotrForgotten <i@omc.hk>
Date: Sat, 6 Aug 2016 02:17:13 +0800
Subject: [PATCH] Concurrent linked hash map cache


diff --git a/pom.xml b/pom.xml
index 2d1cbe1..7f71096 100644
--- a/pom.xml
+++ b/pom.xml
@@ -91,6 +91,24 @@
             <artifactId>trove4j</artifactId>
             <version>3.0.3</version>
         </dependency>
+		 <dependency>
+            <groupId>com.google.guava</groupId>
+            <artifactId>guava</artifactId>
+            <version>19.0-rc3</version>
+        </dependency>
+        <dependency>
+            <groupId>org.projectlombok</groupId>
+            <artifactId>lombok</artifactId>
+            <version>1.16.8</version>
+            <scope>provided</scope>
+            <!-- They aren't required to use lombok -->
+            <optional>true</optional>
+        </dependency>
+        <dependency>
+            <groupId>com.google.code.findbugs</groupId>
+            <artifactId>jsr305</artifactId>
+            <version>3.0.1</version>
+        </dependency>
         <!-- testing -->
         <dependency>
             <groupId>junit</groupId>
diff --git a/src/main/java/net/minecraft/server/Chunk.java b/src/main/java/net/minecraft/server/Chunk.java
index 4ccd05f..ee5d956 100644
--- a/src/main/java/net/minecraft/server/Chunk.java
+++ b/src/main/java/net/minecraft/server/Chunk.java
@@ -26,6 +26,8 @@ import org.hose.ChunkPopulate_Pool;
 import org.spigotmc.SpigotWorldConfig;
 import java.util.Queue;
 
+import net.techcable.pineapple.collect.CopyOnWriteMap;
+
 public class Chunk {
 
 	public final Lock blocksLock = new Lock(); // Paper - Async-Anti-Xray - Locks blocks and sections and is applied before a packet of this chunk or a neighbor-chunk is added to the obfuscation-executor-service on the main-thread until the obfuscator-thread is finished to ensure "single-thread-behavior" and thread-safety
@@ -103,7 +105,7 @@ public class Chunk {
         this.g = new byte[256];
         this.h = new int[256];
         this.i = new boolean[256];
-		this.tileEntities = Maps.newConcurrentMap();
+		this.tileEntities = new CopyOnWriteMap();
         this.x = 4096;
         this.y = Queues.newConcurrentLinkedQueue();
 		this.entitySlices = (CopyOnWriteArrayList[]) (new CopyOnWriteArrayList[16]); // Spigot
diff --git a/src/main/java/net/minecraft/server/ChunkProviderServer.java b/src/main/java/net/minecraft/server/ChunkProviderServer.java
index b429fd8..956b397 100644
--- a/src/main/java/net/minecraft/server/ChunkProviderServer.java
+++ b/src/main/java/net/minecraft/server/ChunkProviderServer.java
@@ -23,7 +23,6 @@ import org.bukkit.event.world.ChunkUnloadEvent;
 
 import com.google.common.collect.Maps;
 import java.util.Map;
-import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
 import java.util.concurrent.RecursiveTask;
 
diff --git a/src/main/java/net/minecraft/server/DataWatcher.java b/src/main/java/net/minecraft/server/DataWatcher.java
index 56a7749..47a2b3d 100644
--- a/src/main/java/net/minecraft/server/DataWatcher.java
+++ b/src/main/java/net/minecraft/server/DataWatcher.java
@@ -24,7 +24,7 @@ import com.google.common.base.Optional;
 
 public class DataWatcher {
 
-    private static final Map<Class<? extends Entity>, Integer> a = Maps.newConcurrentMap();
+    private static final Map<Class<? extends Entity>, Integer> a = new net.techcable.pineapple.collect.CopyOnWriteMap();
     private final Entity b;
     private final Int2ObjectMap<Item<?>> c = TacoSpigotConfig.useArraysForDatawatcher ? new ArrayMap<>() : new Int2ObjectOpenHashMap<>(); // Paper // TacoSpigot - use 'Int2ObjectMap' and use 'ArrayMap' if useArraysForDatawatcher
     private final ReadWriteLock d = TacoSpigotConfig.disableDataWatcherReadLocking && TacoSpigotConfig.useArraysForDatawatcher ? NoOpReadWriteLock.INSTANCE : new ReentrantReadWriteLock(); // TacoSpigot - don't lock if we're using ArrayMap
diff --git a/src/main/java/net/minecraft/server/EntityTypes.java b/src/main/java/net/minecraft/server/EntityTypes.java
new file mode 100644
index 0000000..8c2f32b
--- /dev/null
+++ b/src/main/java/net/minecraft/server/EntityTypes.java
@@ -0,0 +1,262 @@
+package net.minecraft.server;
+
+import com.google.common.collect.Lists;
+import com.google.common.collect.Maps;
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+import javax.annotation.Nullable;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import com.googlecode.concurrentlinkedhashmap.ConcurrentLinkedHashMap; // Torch
+
+public class EntityTypes {
+
+    private static final Logger b = LogManager.getLogger();
+    private static final Map<String, Class<? extends Entity>> c = Maps.newHashMap();
+    private static final Map<Class<? extends Entity>, String> d = Maps.newHashMap();
+    private static final Map<Integer, Class<? extends Entity>> e = Maps.newHashMap();
+    private static final Map<Class<? extends Entity>, Integer> f = Maps.newHashMap();
+    private static final Map<String, Integer> g = Maps.newHashMap();
+    // public static final Map<String, EntityTypes.MonsterEggInfo> eggInfo = Maps.newLinkedHashMap();
+	public static final ConcurrentLinkedHashMap<String, EntityTypes.MonsterEggInfo> eggInfo = new ConcurrentLinkedHashMap.Builder<String, EntityTypes.MonsterEggInfo>().maximumWeightedCapacity(128).build();
+
+    private static void a(Class<? extends Entity> oclass, String s, int i) {
+        if (EntityTypes.c.containsKey(s)) {
+            throw new IllegalArgumentException("ID is already registered: " + s);
+        } else if (EntityTypes.e.containsKey(Integer.valueOf(i))) {
+            throw new IllegalArgumentException("ID is already registered: " + i);
+        } else if (i == 0) {
+            throw new IllegalArgumentException("Cannot register to reserved id: " + i);
+        } else if (oclass == null) {
+            throw new IllegalArgumentException("Cannot register null clazz for id: " + i);
+        } else {
+            EntityTypes.c.put(s, oclass);
+            EntityTypes.d.put(oclass, s);
+            EntityTypes.e.put(Integer.valueOf(i), oclass);
+            EntityTypes.f.put(oclass, Integer.valueOf(i));
+            EntityTypes.g.put(s, Integer.valueOf(i));
+        }
+    }
+
+    private static void a(Class<? extends Entity> oclass, String s, int i, int j, int k) {
+        a(oclass, s, i);
+        EntityTypes.eggInfo.put(s, new EntityTypes.MonsterEggInfo(s, j, k));
+    }
+
+    @Nullable
+    public static Entity createEntityByName(String s, World world) {
+        Entity entity = null;
+
+        try {
+            Class oclass = (Class) EntityTypes.c.get(s);
+
+            if (oclass != null) {
+                entity = (Entity) oclass.getConstructor(new Class[] { World.class}).newInstance(new Object[] { world});
+            }
+        } catch (Exception exception) {
+            exception.printStackTrace();
+        }
+
+        return entity;
+    }
+
+    @Nullable
+    public static Entity a(NBTTagCompound nbttagcompound, World world) {
+        Entity entity = null;
+
+        try {
+            Class oclass = (Class) EntityTypes.c.get(nbttagcompound.getString("id"));
+
+            if (oclass != null) {
+                entity = (Entity) oclass.getConstructor(new Class[] { World.class}).newInstance(new Object[] { world});
+            }
+        } catch (Exception exception) {
+            exception.printStackTrace();
+        }
+
+        if (entity != null) {
+            entity.f(nbttagcompound);
+        } else {
+            EntityTypes.b.warn("Skipping Entity with id " + nbttagcompound.getString("id"));
+        }
+
+        return entity;
+    }
+
+    @Nullable
+    public static Entity a(int i, World world) {
+        Entity entity = null;
+
+        try {
+            Class oclass = a(i);
+
+            if (oclass != null) {
+                entity = (Entity) oclass.getConstructor(new Class[] { World.class}).newInstance(new Object[] { world});
+            }
+        } catch (Exception exception) {
+            exception.printStackTrace();
+        }
+
+        if (entity == null) {
+            EntityTypes.b.warn("Skipping Entity with id " + i);
+        }
+
+        return entity;
+    }
+
+    @Nullable
+    public static Entity b(String s, World world) {
+        return a(a(s), world);
+    }
+
+    public static int a(Entity entity) {
+        Integer integer = (Integer) EntityTypes.f.get(entity.getClass());
+
+        return integer == null ? 0 : integer.intValue();
+    }
+
+    @Nullable
+    public static Class<? extends Entity> a(int i) {
+        return (Class) EntityTypes.e.get(Integer.valueOf(i));
+    }
+
+    public static String b(Entity entity) {
+        return getName(entity.getClass());
+    }
+
+    public static String getName(Class<? extends Entity> oclass) {
+        return (String) EntityTypes.d.get(oclass);
+    }
+
+    public static int a(String s) {
+        Integer integer = (Integer) EntityTypes.g.get(s);
+
+        return integer == null ? 90 : integer.intValue();
+    }
+
+    public static void a() {}
+
+    public static List<String> b() {
+        Set set = EntityTypes.c.keySet();
+        ArrayList arraylist = Lists.newArrayList();
+        Iterator iterator = set.iterator();
+
+        while (iterator.hasNext()) {
+            String s = (String) iterator.next();
+            Class oclass = (Class) EntityTypes.c.get(s);
+
+            if ((oclass.getModifiers() & 1024) != 1024) {
+                arraylist.add(s);
+            }
+        }
+
+        arraylist.add("LightningBolt");
+        return arraylist;
+    }
+
+    public static boolean a(Entity entity, String s) {
+        String s1 = b(entity);
+
+        if (s1 == null && entity instanceof EntityHuman) {
+            s1 = "Player";
+        } else if (s1 == null && entity instanceof EntityLightning) {
+            s1 = "LightningBolt";
+        }
+
+        return s.equals(s1);
+    }
+
+    public static boolean b(String s) {
+        return "Player".equals(s) || b().contains(s);
+    }
+
+    static {
+        a(EntityItem.class, "Item", 1);
+        a(EntityExperienceOrb.class, "XPOrb", 2);
+        a(EntityAreaEffectCloud.class, "AreaEffectCloud", 3);
+        a(EntityEgg.class, "ThrownEgg", 7);
+        a(EntityLeash.class, "LeashKnot", 8);
+        a(EntityPainting.class, "Painting", 9);
+        a(EntityTippedArrow.class, "Arrow", 10);
+        a(EntitySnowball.class, "Snowball", 11);
+        a(EntityLargeFireball.class, "Fireball", 12);
+        a(EntitySmallFireball.class, "SmallFireball", 13);
+        a(EntityEnderPearl.class, "ThrownEnderpearl", 14);
+        a(EntityEnderSignal.class, "EyeOfEnderSignal", 15);
+        a(EntityPotion.class, "ThrownPotion", 16);
+        a(EntityThrownExpBottle.class, "ThrownExpBottle", 17);
+        a(EntityItemFrame.class, "ItemFrame", 18);
+        a(EntityWitherSkull.class, "WitherSkull", 19);
+        a(EntityTNTPrimed.class, "PrimedTnt", 20);
+        a(EntityFallingBlock.class, "FallingSand", 21);
+        a(EntityFireworks.class, "FireworksRocketEntity", 22);
+        a(EntitySpectralArrow.class, "SpectralArrow", 24);
+        a(EntityShulkerBullet.class, "ShulkerBullet", 25);
+        a(EntityDragonFireball.class, "DragonFireball", 26);
+        a(EntityArmorStand.class, "ArmorStand", 30);
+        a(EntityBoat.class, "Boat", 41);
+        a(EntityMinecartRideable.class, EntityMinecartAbstract.EnumMinecartType.RIDEABLE.b(), 42);
+        a(EntityMinecartChest.class, EntityMinecartAbstract.EnumMinecartType.CHEST.b(), 43);
+        a(EntityMinecartFurnace.class, EntityMinecartAbstract.EnumMinecartType.FURNACE.b(), 44);
+        a(EntityMinecartTNT.class, EntityMinecartAbstract.EnumMinecartType.TNT.b(), 45);
+        a(EntityMinecartHopper.class, EntityMinecartAbstract.EnumMinecartType.HOPPER.b(), 46);
+        a(EntityMinecartMobSpawner.class, EntityMinecartAbstract.EnumMinecartType.SPAWNER.b(), 47);
+        a(EntityMinecartCommandBlock.class, EntityMinecartAbstract.EnumMinecartType.COMMAND_BLOCK.b(), 40);
+        a(EntityInsentient.class, "Mob", 48);
+        a(EntityMonster.class, "Monster", 49);
+        a(EntityCreeper.class, "Creeper", 50, 894731, 0);
+        a(EntitySkeleton.class, "Skeleton", 51, 12698049, 4802889);
+        a(EntitySpider.class, "Spider", 52, 3419431, 11013646);
+        a(EntityGiantZombie.class, "Giant", 53);
+        a(EntityZombie.class, "Zombie", 54, '\uafaf', 7969893);
+        a(EntitySlime.class, "Slime", 55, 5349438, 8306542);
+        a(EntityGhast.class, "Ghast", 56, 16382457, 12369084);
+        a(EntityPigZombie.class, "PigZombie", 57, 15373203, 5009705);
+        a(EntityEnderman.class, "Enderman", 58, 1447446, 0);
+        a(EntityCaveSpider.class, "CaveSpider", 59, 803406, 11013646);
+        a(EntitySilverfish.class, "Silverfish", 60, 7237230, 3158064);
+        a(EntityBlaze.class, "Blaze", 61, 16167425, 16775294);
+        a(EntityMagmaCube.class, "LavaSlime", 62, 3407872, 16579584);
+        a(EntityEnderDragon.class, "EnderDragon", 63);
+        a(EntityWither.class, "WitherBoss", 64);
+        a(EntityBat.class, "Bat", 65, 4996656, 986895);
+        a(EntityWitch.class, "Witch", 66, 3407872, 5349438);
+        a(EntityEndermite.class, "Endermite", 67, 1447446, 7237230);
+        a(EntityGuardian.class, "Guardian", 68, 5931634, 15826224);
+        a(EntityShulker.class, "Shulker", 69, 9725844, 5060690);
+        a(EntityPig.class, "Pig", 90, 15771042, 14377823);
+        a(EntitySheep.class, "Sheep", 91, 15198183, 16758197);
+        a(EntityCow.class, "Cow", 92, 4470310, 10592673);
+        a(EntityChicken.class, "Chicken", 93, 10592673, 16711680);
+        a(EntitySquid.class, "Squid", 94, 2243405, 7375001);
+        a(EntityWolf.class, "Wolf", 95, 14144467, 13545366);
+        a(EntityMushroomCow.class, "MushroomCow", 96, 10489616, 12040119);
+        a(EntitySnowman.class, "SnowMan", 97);
+        a(EntityOcelot.class, "Ozelot", 98, 15720061, 5653556);
+        a(EntityIronGolem.class, "VillagerGolem", 99);
+        a(EntityHorse.class, "EntityHorse", 100, 12623485, 15656192);
+        a(EntityRabbit.class, "Rabbit", 101, 10051392, 7555121);
+        a(EntityVillager.class, "Villager", 120, 5651507, 12422002);
+        a(EntityEnderCrystal.class, "EnderCrystal", 200);
+    }
+
+    public static class MonsterEggInfo {
+
+        public final String a;
+        public final int b;
+        public final int c;
+        public final Statistic killEntityStatistic;
+        public final Statistic killedByEntityStatistic;
+
+        public MonsterEggInfo(String s, int i, int j) {
+            this.a = s;
+            this.b = i;
+            this.c = j;
+            this.killEntityStatistic = StatisticList.a(this);
+            this.killedByEntityStatistic = StatisticList.b(this);
+        }
+    }
+}
diff --git a/src/main/java/net/minecraft/server/Explosion.java b/src/main/java/net/minecraft/server/Explosion.java
index 143fcdb..58aeec5 100644
--- a/src/main/java/net/minecraft/server/Explosion.java
+++ b/src/main/java/net/minecraft/server/Explosion.java
@@ -34,7 +34,7 @@ public class Explosion {
     public final Entity source;
     private final float size;
     private final List<BlockPosition> blocks = new CopyOnWriteArrayList<BlockPosition>(); // Torch
-    private final ConcurrentHashMap<EntityHuman, Vec3D> k = new ConcurrentHashMap<EntityHuman, Vec3D>(); // Hose
+    private final net.techcable.pineapple.collect.CopyOnWriteMap<EntityHuman, Vec3D> k = new net.techcable.pineapple.collect.CopyOnWriteMap<EntityHuman, Vec3D>(); // Hose
     public boolean wasCanceled = false; // CraftBukkit - add field
 
     public Explosion(World world, Entity entity, double d0, double d1, double d2, float f, boolean flag, boolean flag1) {
diff --git a/src/main/java/net/minecraft/server/HandshakeListener.java b/src/main/java/net/minecraft/server/HandshakeListener.java
index a6712dc..d0c515d 100644
--- a/src/main/java/net/minecraft/server/HandshakeListener.java
+++ b/src/main/java/net/minecraft/server/HandshakeListener.java
@@ -9,7 +9,7 @@ public class HandshakeListener implements PacketHandshakingInListener {
 
     private static final com.google.gson.Gson gson = new com.google.gson.Gson(); // Spigot // Torch - Use FastJson but keeping legacy name
     // CraftBukkit start - add fields
-    private static final ConcurrentHashMap<InetAddress, Long> throttleTracker = new ConcurrentHashMap<InetAddress, Long>();
+    private static final net.techcable.pineapple.collect.CopyOnWriteMap<InetAddress, Long> throttleTracker = new net.techcable.pineapple.collect.CopyOnWriteMap<InetAddress, Long>();
     private static int throttleCounter = 0;
     // CraftBukkit end
 
diff --git a/src/main/java/net/minecraft/server/PersistentCollection.java b/src/main/java/net/minecraft/server/PersistentCollection.java
index fc9fde7..ff7d0e5 100644
--- a/src/main/java/net/minecraft/server/PersistentCollection.java
+++ b/src/main/java/net/minecraft/server/PersistentCollection.java
@@ -18,6 +18,7 @@ import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
 import javax.annotation.Nullable;
 
+
 public class PersistentCollection {
 
     private IDataManager b;
diff --git a/src/main/java/net/minecraft/server/PlayerList.java b/src/main/java/net/minecraft/server/PlayerList.java
index 4c1bd59..9843ad1 100644
--- a/src/main/java/net/minecraft/server/PlayerList.java
+++ b/src/main/java/net/minecraft/server/PlayerList.java
@@ -83,7 +83,7 @@ public abstract class PlayerList {
         this.operators = new OpList(PlayerList.c);
         this.whitelist = new WhiteList(PlayerList.d);
         // this.o = Maps.newHashMap();
-		this.o = new ConcurrentHashMap();
+		this.o = new net.techcable.pineapple.collect.CopyOnWriteMap();
         this.server = minecraftserver;
         this.k.a(false);
         this.l.a(false);
diff --git a/src/main/java/net/minecraft/server/RegionFile.java b/src/main/java/net/minecraft/server/RegionFile.java
index 9fe8e9c..bf5f952 100644
--- a/src/main/java/net/minecraft/server/RegionFile.java
+++ b/src/main/java/net/minecraft/server/RegionFile.java
@@ -292,7 +292,7 @@ public class RegionFile {
 
             this.b(i, j, (int) (MinecraftServer.av() / 1000L));
         } catch (IOException ioexception) {
-            org.spigotmc.SneakyThrow.sneaky(ioexception); // Paper - we want the upper try/catch to retry this
+            net.techcable.pineapple.SneakyThrow.sneakyThrow(ioexception); // Paper - we want the upper try/catch to retry this // Torch
         }
 
     }
diff --git a/src/main/java/net/minecraft/server/StatisticManager.java b/src/main/java/net/minecraft/server/StatisticManager.java
index 5d6c3de..7b536ca 100644
--- a/src/main/java/net/minecraft/server/StatisticManager.java
+++ b/src/main/java/net/minecraft/server/StatisticManager.java
@@ -2,10 +2,11 @@ package net.minecraft.server;
 
 import com.google.common.collect.Maps;
 import java.util.Map;
+import net.techcable.pineapple.collect.CopyOnWriteMap;
 
 public class StatisticManager {
 
-    protected final Map<Statistic, StatisticWrapper> a = Maps.newConcurrentMap();
+    protected final Map<Statistic, StatisticWrapper> a = new CopyOnWriteMap();
 
     public StatisticManager() {}
 
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index 0a3e6e4..2e5c6b5 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -21,7 +21,6 @@ import com.google.common.collect.Sets;
 
 import com.destroystokyo.paper.IOStatCommand;
 import com.destroystokyo.paper.PaperConfig;
-import java.util.concurrent.ConcurrentHashMap;
 
 // CraftBukkit start
 import com.google.common.collect.Maps;
@@ -94,7 +93,7 @@ public abstract class World implements IBlockAccess {
     private final Set<TileEntity> tileEntityListUnload = Sets.newConcurrentHashSet(); // Paper
     public final List<EntityHuman> players = new CopyOnWriteArrayList<EntityHuman>();
     public final Queue<Entity> j = Queues.newConcurrentLinkedQueue();
-    protected final Map<Integer, Entity> entitiesById = new ConcurrentHashMap();
+    protected final Map<Integer, Entity> entitiesById = new net.techcable.pineapple.collect.CopyOnWriteMap();
     private long I = 16777215L;
     private int J;
     protected int l = (new Random()).nextInt();
@@ -165,7 +164,7 @@ public abstract class World implements IBlockAccess {
     private org.spigotmc.TickLimiter entityLimiter;
     private org.spigotmc.TickLimiter tileLimiter;
     private int tileTickPosition;
-    public final Map<Explosion.CacheKey, Float> explosionDensityCache = new ConcurrentHashMap<>(); // Paper - Optimize explosions
+    public final Map<Explosion.CacheKey, Float> explosionDensityCache = new net.techcable.pineapple.collect.CopyOnWriteMap<>(); // Paper - Optimize explosions
 	
 	// Paper - Start Peristence counters.
     private long nextPersistenceCountersTick = System.nanoTime();
diff --git a/src/main/java/net/minecraft/server/WorldMap.java b/src/main/java/net/minecraft/server/WorldMap.java
index 200d1c3..79ace38 100644
--- a/src/main/java/net/minecraft/server/WorldMap.java
+++ b/src/main/java/net/minecraft/server/WorldMap.java
@@ -17,6 +17,7 @@ import org.bukkit.craftbukkit.map.CraftMapView;
 // CraftBukkit end
 
 import java.util.concurrent.ConcurrentHashMap;
+import com.googlecode.concurrentlinkedhashmap.ConcurrentLinkedHashMap; // Torch
 
 public class WorldMap extends PersistentBase {
 
@@ -28,8 +29,9 @@ public class WorldMap extends PersistentBase {
     public byte[] colors = new byte[16384];
     public List<WorldMap.WorldMapHumanTracker> h = Lists.newArrayList();
     // public Map<EntityHuman, WorldMap.WorldMapHumanTracker> j = Maps.newHashMap(); // Spigot
-	public final Map<EntityHuman, WorldMap.WorldMapHumanTracker> j = new ConcurrentHashMap();
-    public Map<UUID, MapIcon> decorations = Maps.newLinkedHashMap(); // Spigot
+	public final Map<EntityHuman, WorldMap.WorldMapHumanTracker> j = new net.techcable.pineapple.collect.CopyOnWriteMap();
+    // public Map<UUID, MapIcon> decorations = Maps.newLinkedHashMap(); // Spigot
+	public ConcurrentLinkedHashMap<UUID, MapIcon> decorations = new ConcurrentLinkedHashMap.Builder<UUID, MapIcon>().maximumWeightedCapacity(128).build();
     private org.bukkit.craftbukkit.map.RenderData vanillaRender = new org.bukkit.craftbukkit.map.RenderData(); // Paper
 
     // CraftBukkit start
diff --git a/src/main/java/net/techcable/pineapple/SneakyThrow.java b/src/main/java/net/techcable/pineapple/SneakyThrow.java
new file mode 100644
index 0000000..2aeaedc
--- /dev/null
+++ b/src/main/java/net/techcable/pineapple/SneakyThrow.java
@@ -0,0 +1,34 @@
+/**
+ * The MIT License
+ * Copyright (c) 2016 Techcable
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a copy
+ * of this software and associated documentation files (the "Software"), to deal
+ * in the Software without restriction, including without limitation the rights
+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+ * copies of the Software, and to permit persons to whom the Software is
+ * furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+ * THE SOFTWARE.
+ */
+package net.techcable.pineapple;
+
+public class SneakyThrow {
+    public static AssertionError sneakyThrow(Throwable t) {
+        return sneakyThrow0(t);
+    }
+
+    @SuppressWarnings("unchecked")
+    private static <T extends Throwable> AssertionError sneakyThrow0(Throwable t) throws T {
+        throw (T) t;
+    }
+}
diff --git a/src/main/java/net/techcable/pineapple/collect/CopyOnWriteMap.java b/src/main/java/net/techcable/pineapple/collect/CopyOnWriteMap.java
new file mode 100644
index 0000000..03ce049
--- /dev/null
+++ b/src/main/java/net/techcable/pineapple/collect/CopyOnWriteMap.java
@@ -0,0 +1,279 @@
+/**
+ * The MIT License
+ * Copyright (c) 2016 Techcable
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a copy
+ * of this software and associated documentation files (the "Software"), to deal
+ * in the Software without restriction, including without limitation the rights
+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+ * copies of the Software, and to permit persons to whom the Software is
+ * furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+ * THE SOFTWARE.
+ */
+package net.techcable.pineapple.collect;
+
+import java.util.AbstractMap;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.concurrent.ConcurrentMap;
+import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;
+import java.util.function.BiConsumer;
+import java.util.function.BiFunction;
+import java.util.function.Function;
+import javax.annotation.Nonnull;
+import javax.annotation.Nullable;
+import javax.annotation.ParametersAreNonnullByDefault;
+
+import com.google.common.collect.ImmutableCollection;
+import com.google.common.collect.ImmutableMap;
+import com.google.common.collect.ImmutableSet;
+
+import static com.google.common.base.Preconditions.*;
+
+@ParametersAreNonnullByDefault
+public class CopyOnWriteMap<K, V> extends AbstractMap<K, V> implements ConcurrentMap<K, V> {
+    @SuppressWarnings("AtomicFieldUpdaterIssues") // Generic.......
+    private static final AtomicReferenceFieldUpdater<CopyOnWriteMap, ImmutableMap> MAP_UPDATER = AtomicReferenceFieldUpdater.newUpdater(CopyOnWriteMap.class, ImmutableMap.class, "bakedMap");
+    private final Map<K, V> map = Collections.synchronizedMap(new HashMap<K, V>());
+    @Nullable
+    private volatile ImmutableMap<K, V> bakedMap = null;
+
+    @Nonnull
+    private ImmutableMap<K, V> bakedMap() {
+        ImmutableMap<K, V> bakedMap = this.bakedMap;
+        if (bakedMap == null) {
+            return bakeMap();
+        } else {
+            return bakedMap;
+        }
+    }
+
+    private ImmutableMap<K, V> bakeMap() {
+        synchronized (map) {
+            return this.bakedMap = ImmutableMap.copyOf(map);
+        }
+    }
+
+    @Override
+    public int size() {
+        return bakedMap().size();
+    }
+
+    @Override
+    public boolean containsKey(Object key) {
+        return bakedMap().containsKey(key);
+    }
+
+    @Override
+    public boolean containsValue(Object value) {
+        return bakedMap().containsValue(value);
+    }
+
+    @Override
+    @Nullable
+    public V get(Object key) {
+        return bakedMap().get(key);
+    }
+
+    @Override
+    @Nullable
+    public V put(K key, V value) {
+        checkNotNull(key, "Null key");
+        checkNotNull(value, "Null value");
+        synchronized (map) {
+            bakedMap = null;
+            return map.put(key, value);
+        }
+    }
+
+    @Override
+    @Nullable
+    public V remove(Object key) {
+        checkNotNull(key, "Null key");
+        synchronized (map) {
+            bakedMap = null;
+            return map.remove(key);
+        }
+    }
+
+    @Override
+    public void putAll(Map<? extends K, ? extends V> m) {
+        checkNotNull(m, "Null bakedMap");
+        synchronized (map) {
+            bakedMap = null;
+            map.putAll(m);
+        }
+    }
+
+    @Override
+    public void clear() {
+        synchronized (map) {
+            bakedMap = ImmutableMap.of();
+        }
+    }
+
+    @Override
+    @Nonnull
+    public ImmutableSet<K> keySet() {
+        return bakedMap().keySet();
+    }
+
+    @Override
+    @Nonnull
+    public ImmutableCollection<V> values() {
+        return bakedMap().values();
+    }
+
+    @Override
+    @Nonnull
+    public ImmutableSet<Entry<K, V>> entrySet() {
+        return bakedMap().entrySet();
+    }
+
+    @Override
+    @Nullable
+    public V getOrDefault(Object key, V defaultValue) {
+        return bakedMap().getOrDefault(checkNotNull(key, "Null key"), defaultValue);
+    }
+
+    @Override
+    public void forEach(BiConsumer<? super K, ? super V> action) {
+        checkNotNull(action, "Null action");
+        ImmutableMaps.forEach(bakedMap(), action);
+    }
+
+    @Override
+    public V putIfAbsent(K key, V value) {
+        checkNotNull(key, "Null key");
+        checkNotNull(value, "Null value");
+        Map<K, V> bakedMap = this.bakedMap;
+        V oldValue;
+        if (bakedMap == null || (oldValue = bakedMap.get(key)) == null) {
+            return putIfAbsent0(key, value);
+        } else {
+            return oldValue;
+        }
+    }
+
+    private V putIfAbsent0(K key, V value) {
+        synchronized (map) {
+            bakedMap = null;
+            return map.putIfAbsent(key, value);
+        }
+    }
+
+    @Override
+    public boolean remove(Object key, Object value) {
+        checkNotNull(key, "Null key");
+        checkNotNull(value, "Null value");
+        synchronized (map) {
+            bakedMap = null;
+            return map.remove(key, value);
+        }
+    }
+
+    @Override
+    public boolean replace(K key, V oldValue, V newValue) {
+        checkNotNull(key, "Null key");
+        checkNotNull(oldValue, "Null old value");
+        checkNotNull(newValue, "Null new value");
+        synchronized (map) {
+            bakedMap = null;
+            return map.replace(key, oldValue, newValue);
+        }
+    }
+
+    @Override
+    @Nullable
+    public V replace(K key, V value) {
+        checkNotNull(key, "Null key");
+        checkNotNull(value, "Null value");
+        synchronized (map) {
+            bakedMap = null;
+            return map.replace(key, value);
+        }
+    }
+
+    @Override
+    public void replaceAll(BiFunction<? super K, ? super V, ? extends V> function) {
+        checkNotNull(function, "Null function");
+        synchronized (map) {
+            bakedMap = null;
+            map.replaceAll(function);
+        }
+    }
+
+    @Override
+    @Nonnull
+    public V computeIfAbsent(K key, Function<? super K, ? extends V> mappingFunction) {
+        checkNotNull(key, "Null key");
+        checkNotNull(mappingFunction, "Null function");
+        Map<K, V> bakedMap = this.bakedMap;
+        V value;
+        if (bakedMap == null || (value = bakedMap.get(key)) == null) {
+            return computeIfAbsent0(key, mappingFunction);
+        } else {
+            return value;
+        }
+    }
+
+    @Nonnull
+    private V computeIfAbsent0(K key, Function<? super K, ? extends V> mappingFunction) {
+        synchronized (map) {
+            this.bakedMap = null;
+            V value = map.get(key);
+            if (value == null) {
+                value = mappingFunction.apply(key);
+                if (value == null) throw new IllegalArgumentException("Mapping function " + mappingFunction.getClass().getTypeName() + " returned null value for key " + key);
+            }
+            return value;
+        }
+    }
+
+    @Override
+    @Nullable
+    public V computeIfPresent(K key, BiFunction<? super K, ? super V, ? extends V> remappingFunction) {
+        checkNotNull(remappingFunction, "Null remapping function");
+        Map<K, V> bakedMap = this.bakedMap;
+        if (bakedMap == null || bakedMap.get(key) != null) {
+            synchronized (map) {
+                this.bakedMap = null;
+                return map.computeIfPresent(key, remappingFunction);
+            }
+        } else {
+            return null;
+        }
+    }
+
+    @Override
+    public V compute(K key, BiFunction<? super K, ? super V, ? extends V> remappingFunction) {
+        checkNotNull(key, "Null key");
+        checkNotNull(remappingFunction, "Null remapping function");
+        synchronized (map) {
+            bakedMap = null;
+            return map.compute(key, remappingFunction);
+        }
+    }
+
+    @Override
+    public V merge(K key, V value, BiFunction<? super V, ? super V, ? extends V> remappingFunction) {
+        checkNotNull(key, "Null key");
+        checkNotNull(value, "Null value");
+        checkNotNull(remappingFunction, "Null remapping function");
+        synchronized (map) {
+            bakedMap = null;
+            return map.merge(key, value, remappingFunction);
+        }
+    }
+}
diff --git a/src/main/java/net/techcable/pineapple/collect/ImmutableLists.java b/src/main/java/net/techcable/pineapple/collect/ImmutableLists.java
new file mode 100644
index 0000000..7aa7ec3
--- /dev/null
+++ b/src/main/java/net/techcable/pineapple/collect/ImmutableLists.java
@@ -0,0 +1,79 @@
+/**
+ * The MIT License
+ * Copyright (c) 2016 Techcable
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a copy
+ * of this software and associated documentation files (the "Software"), to deal
+ * in the Software without restriction, including without limitation the rights
+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+ * copies of the Software, and to permit persons to whom the Software is
+ * furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+ * THE SOFTWARE.
+ */
+package net.techcable.pineapple.collect;
+
+import lombok.*;
+
+import java.lang.invoke.MethodHandle;
+import java.util.List;
+import java.util.function.Function;
+import javax.annotation.Nonnull;
+import javax.annotation.ParametersAreNonnullByDefault;
+
+import com.google.common.base.Preconditions;
+import com.google.common.collect.ImmutableList;
+import com.google.common.collect.ImmutableMap;
+
+import net.techcable.pineapple.reflection.Reflection;
+
+import static com.google.common.base.Preconditions.*;
+
+@ParametersAreNonnullByDefault
+public class ImmutableLists {
+    @Nonnull
+    public static <T, U> ImmutableList<U> transform(List<T> list, Function<T, U> transformer) {
+        ImmutableList.Builder<U> resultBuilder = builder(checkNotNull(list, "Null list").size());
+        list.forEach((oldElement) -> {
+            U newElement = checkNotNull(transformer, "Null transformer").apply(oldElement);
+            if (newElement == null) throw new NullPointerException("Transformer  " + transformer.getClass().getTypeName() + " returned null.");
+            resultBuilder.add(newElement);
+        });
+        return resultBuilder.build();
+    }
+
+    @Nonnull
+    public static <T, U> ImmutableList<U> transform(ImmutableList<T> list, Function<T, U> transformer) {
+        ImmutableList.Builder<U> resultBuilder = builder(checkNotNull(list, "Null list").size());
+        for (int i = 0; i < list.size(); i++) {
+            T oldElement = list.get(i);
+            U newElement = checkNotNull(transformer, "Null transformer").apply(oldElement);
+            if (newElement == null) throw new NullPointerException("Transformer  " + transformer.getClass().getTypeName() + " returned null.");
+            resultBuilder.add(newElement);
+        }
+        return resultBuilder.build();
+    }
+
+    //
+    // Reflection and dark magic
+    //
+
+    private static final MethodHandle BUILDER_CONSTRUCTOR = Reflection.getConstructor(ImmutableList.Builder.class, int.class);
+
+    @SneakyThrows
+    @SuppressWarnings("unchecked")
+    @Nonnull
+    public static <T> ImmutableList.Builder<T> builder(int size) {
+        checkArgument(size >= 0, "Negative size %s", size);
+        return BUILDER_CONSTRUCTOR != null ? (ImmutableList.Builder<T>) BUILDER_CONSTRUCTOR.invokeExact(size) : ImmutableList.builder();
+    }
+}
diff --git a/src/main/java/net/techcable/pineapple/collect/ImmutableMaps.java b/src/main/java/net/techcable/pineapple/collect/ImmutableMaps.java
new file mode 100644
index 0000000..fd0d998
--- /dev/null
+++ b/src/main/java/net/techcable/pineapple/collect/ImmutableMaps.java
@@ -0,0 +1,95 @@
+/**
+ * The MIT License
+ * Copyright (c) 2016 Techcable
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a copy
+ * of this software and associated documentation files (the "Software"), to deal
+ * in the Software without restriction, including without limitation the rights
+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+ * copies of the Software, and to permit persons to whom the Software is
+ * furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+ * THE SOFTWARE.
+ */
+package net.techcable.pineapple.collect;
+
+import lombok.*;
+import lombok.experimental.*;
+
+import java.lang.invoke.MethodHandle;
+import java.util.Map;
+import java.util.function.BiConsumer;
+import java.util.function.Function;
+import javax.annotation.Nonnull;
+import javax.annotation.ParametersAreNonnullByDefault;
+
+import com.google.common.collect.ImmutableList;
+import com.google.common.collect.ImmutableMap;
+
+import net.techcable.pineapple.reflection.FastField;
+import net.techcable.pineapple.reflection.Reflection;
+
+import static com.google.common.base.Preconditions.*;
+
+@ParametersAreNonnullByDefault
+public class ImmutableMaps {
+
+    public static <K1, K2, V> ImmutableMap<K2, V> transformKeys(ImmutableMap<K1, V> original, Function<K1, K2> keyTransformer) {
+        return transform(original, keyTransformer, Function.identity());
+    }
+
+    @Nonnull
+    public static <K1, K2, V1, V2> ImmutableMap<K2, V2> transform(ImmutableMap<K1, V1> original, Function<K1, K2> keyTransformer, Function<V1, V2> valueTransformer) {
+        ImmutableMap.Builder<K2, V2> resultBuilder = builder(checkNotNull(original, "Null map").size());
+        forEach(original, (originalKey, originalValue) -> {
+            K2 newKey = checkNotNull(keyTransformer, "Null key transformer").apply(originalKey);
+            V2 newValue = checkNotNull(valueTransformer, "Null value transformer").apply(originalValue);
+            resultBuilder.put(newKey, newValue);
+        });
+        return resultBuilder.build();
+    }
+
+    //
+    // Dark Magic
+    //
+
+    private static final Class<? extends ImmutableMap> REGULAR_IMMUTABLE_MAP_CLASS = Reflection.getClass("com.google.common.collect.RegularImmutableMap", ImmutableMap.class);
+    private static final MethodHandle BUILDER_CONSTRUCTOR = Reflection.getConstructor(ImmutableMap.Builder.class, int.class);
+    @SuppressWarnings("unchecked")
+    private static final FastField<ImmutableMap, Map.Entry[]> ENTRIES_ARRAY_FIELD = REGULAR_IMMUTABLE_MAP_CLASS != null ? FastField.create("entries", (Class<ImmutableMap>) REGULAR_IMMUTABLE_MAP_CLASS, Map.Entry[].class) : null;
+
+    @SneakyThrows
+    @SuppressWarnings("unchecked") // Generics are a lie
+    @Nonnull
+    public static <K, V> ImmutableMap.Builder<K, V> builder(int initialCapacity) {
+        checkArgument(initialCapacity >= 0, "Negative initial capacity %s");
+        return BUILDER_CONSTRUCTOR != null ? (ImmutableMap.Builder<K, V>) BUILDER_CONSTRUCTOR.invokeExact(initialCapacity) : ImmutableMap.builder();
+    }
+
+    @SuppressWarnings("unchecked")
+    public static <K, V> void forEach(ImmutableMap<K, V> map, BiConsumer<? super K, ? super V> action) {
+        checkNotNull(map, "Null map");
+        if (ENTRIES_ARRAY_FIELD != null && ENTRIES_ARRAY_FIELD.getDeclaringType().isInstance(map)) {
+            for (Map.Entry<K, V> entry : ENTRIES_ARRAY_FIELD.get(map)) {
+                K key = entry.getKey();
+                V value = entry.getValue();
+                checkNotNull(action, "Null action").accept(key, value);
+            }
+        } else {
+            ImmutableList<Map.Entry<K, V>> entryList = map.entrySet().asList(); // Since they don't support forEach this is the fastest way to iterate
+            for (int i = 0; i < entryList.size(); i++) {
+                Map.Entry<K, V> entry = entryList.get(i);
+                action.accept(entry.getKey(), entry.getValue());
+            }
+        }
+    }
+}
diff --git a/src/main/java/net/techcable/pineapple/reflection/FastField.java b/src/main/java/net/techcable/pineapple/reflection/FastField.java
new file mode 100644
index 0000000..f5648d4
--- /dev/null
+++ b/src/main/java/net/techcable/pineapple/reflection/FastField.java
@@ -0,0 +1,111 @@
+/**
+ * The MIT License
+ * Copyright (c) 2016 Techcable
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a copy
+ * of this software and associated documentation files (the "Software"), to deal
+ * in the Software without restriction, including without limitation the rights
+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+ * copies of the Software, and to permit persons to whom the Software is
+ * furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+ * THE SOFTWARE.
+ */
+package net.techcable.pineapple.reflection;
+
+import lombok.*;
+import sun.misc.Unsafe;
+
+import java.lang.reflect.Field;
+import java.lang.reflect.Modifier;
+
+import com.google.common.base.Verify;
+import com.google.common.primitives.Primitives;
+
+import static com.google.common.base.Preconditions.*;
+
+@Getter
+public class FastField<T, V> {
+    private final Field field;
+    private final Class<T> declaringType;
+    private final Class<V> fieldType;
+
+    private FastField(Field field, Class<T> declaringType, Class<V> fieldType) {
+        this.field = checkNotNull(field, "Null field");
+        this.declaringType = checkNotNull(declaringType, "Null declaring type");
+        this.fieldType = checkNotNull(fieldType, "Null field type");
+        field.setAccessible(true);
+        checkArgument(fieldType.isAssignableFrom(Primitives.wrap(field.getType())));
+        checkArgument(declaringType == field.getDeclaringClass());
+    }
+
+    private static final Unsafe UNSAFE;
+    static {
+        Unsafe u;
+        try {
+            Class.forName("sun.misc.Unsafe");
+            Field field = Unsafe.class.getDeclaredField("theUnsafe");
+            field.setAccessible(true);
+            u = (Unsafe) field.get(null);
+        } catch (ClassNotFoundException | NoSuchFieldException | SecurityException | IllegalAccessException e) {
+            u = null;
+        }
+        UNSAFE = u;
+    }
+
+    public static <T> FastField<T, ?> create(String name, Class<T> declaringType) {
+        return create(name, declaringType, Object.class);
+    }
+
+    public static <T, V> FastField<T, V> create(String name, Class<T> declaringType, Class<V> fieldType) {
+        Field field;
+        try {
+            field = checkNotNull(declaringType, "Null declaring type").getDeclaredField(checkNotNull(name, "Null fieldName"));
+        } catch (NoSuchFieldException e) {
+            return null;
+        }
+        checkArgument(checkNotNull(fieldType, "Null field type").isAssignableFrom(Primitives.wrap(field.getType())), "Field type %s doesn't equal expected field type %s", fieldType);
+        if (!fieldType.isPrimitive() && UNSAFE != null) {
+            return new UnsafeFastField<>(field, declaringType, fieldType);
+        } else {
+            return new FastField<>(field, declaringType, fieldType);
+        }
+    }
+
+    @SuppressWarnings("unchecked") // The caller will check ;)
+    public V get(T instance) {
+        try {
+            return (V) field.get(instance);
+        } catch (IllegalAccessException e) {
+            throw new AssertionError("Field " + field + " should've been set accessible!");
+        }
+    }
+
+    public static class UnsafeFastField<T, V> extends FastField<T, V> {
+
+        private long fieldOffset;
+        private UnsafeFastField(Field field, Class<T> declaringType, Class<V> fieldType) {
+            super(field, declaringType, fieldType);
+            checkArgument(!field.getType().isPrimitive(), "Field is a primitive type %s", field.getType());
+            checkArgument(!Modifier.isStatic(field.getType().getModifiers()), "Static field %s", field);
+            fieldOffset = UNSAFE.objectFieldOffset(field);
+            Verify.verify(fieldOffset >= 0);
+        }
+
+        @Override
+        @SuppressWarnings("unchecked")
+        public V get(T instance) {
+            getDeclaringType().cast(checkNotNull(instance, "Null instance"));
+            return (V) UNSAFE.getObject(instance, fieldOffset);
+        }
+    }
+}
diff --git a/src/main/java/net/techcable/pineapple/reflection/Reflection.java b/src/main/java/net/techcable/pineapple/reflection/Reflection.java
new file mode 100644
index 0000000..b3eaa46
--- /dev/null
+++ b/src/main/java/net/techcable/pineapple/reflection/Reflection.java
@@ -0,0 +1,60 @@
+/**
+ * The MIT License
+ * Copyright (c) 2016 Techcable
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a copy
+ * of this software and associated documentation files (the "Software"), to deal
+ * in the Software without restriction, including without limitation the rights
+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+ * copies of the Software, and to permit persons to whom the Software is
+ * furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+ * THE SOFTWARE.
+ */
+package net.techcable.pineapple.reflection;
+
+import java.lang.invoke.MethodHandle;
+import java.lang.invoke.MethodHandles;
+import java.lang.reflect.Constructor;
+import javax.annotation.ParametersAreNonnullByDefault;
+
+import static com.google.common.base.Preconditions.*;
+
+@ParametersAreNonnullByDefault
+public class Reflection {
+    public static MethodHandle getConstructor(Class<?> declaringType, Class<?>... parameterTypes) {
+        try {
+            checkNotNull(parameterTypes, "Null parameters");
+            Constructor<?> constructor = checkNotNull(declaringType, "Null declaring type").getConstructor(parameterTypes);
+            constructor.setAccessible(true);
+            return MethodHandles.lookup().unreflectConstructor(constructor);
+        } catch (NoSuchMethodException e) {
+            return null;
+        } catch (IllegalAccessException e) {
+            throw new AssertionError(e);
+        }
+    }
+
+
+    public static <T> Class<? extends T> getClass(String name, Class<T> superclass) {
+        Class<?> raw = getClass(name);
+        return raw == null ? null : raw.asSubclass(checkNotNull(superclass, "Null superclass"));
+    }
+
+    public static Class<?> getClass(String name) {
+        try {
+            return Class.forName(checkNotNull(name, "Null name"));
+        } catch (ClassNotFoundException e) {
+            return null;
+        }
+    }
+}
diff --git a/src/main/java/org/bukkit/craftbukkit/potion/CraftPotionBrewer.java b/src/main/java/org/bukkit/craftbukkit/potion/CraftPotionBrewer.java
index b7643bd..de318ab 100644
--- a/src/main/java/org/bukkit/craftbukkit/potion/CraftPotionBrewer.java
+++ b/src/main/java/org/bukkit/craftbukkit/potion/CraftPotionBrewer.java
@@ -18,10 +18,12 @@ import org.bukkit.potion.PotionEffect;
 
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Maps;
+import net.techcable.pineapple.collect.CopyOnWriteMap;
 
 public class CraftPotionBrewer implements PotionBrewer {
     // private static final Map<PotionType, Collection<PotionEffect>> cache = Maps.newHashMap();
-    private static final ConcurrentMap<PotionType, Collection<PotionEffect>> cache = new ConcurrentHashMap<PotionType, Collection<PotionEffect>>(); // Hose
+    // pivate static final ConcurrentMap<PotionType, Collection<PotionEffect>> cache = new ConcurrentHashMap<PotionType, Collection<PotionEffect>>(); // Hose
+	private static final CopyOnWriteMap<PotionType, Collection<PotionEffect>> cache = new CopyOnWriteMap<PotionType, Collection<PotionEffect>>(); // Torch
 
     public Collection<PotionEffect> getEffects(PotionType damage, boolean upgraded, boolean extended) {
         if (cache.containsKey(damage))
diff --git a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java
index c679cac..6f0706b 100644
--- a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java
+++ b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java
@@ -73,7 +73,7 @@ public class CraftScheduler implements BukkitScheduler {
     /**
      * These are tasks that are currently active. It's provided for 'viewing' the current state.
      */
-    private final ConcurrentHashMap<Integer, CraftTask> runners = new ConcurrentHashMap<Integer, CraftTask>();
+    private final net.techcable.pineapple.collect.CopyOnWriteMap<Integer, CraftTask> runners = new net.techcable.pineapple.collect.CopyOnWriteMap<Integer, CraftTask>();
     private volatile int currentTick = -1;
     private final Executor executor = Executors.newCachedThreadPool(new com.google.common.util.concurrent.ThreadFactoryBuilder().setNameFormat("Craft Scheduler Thread - %1$d").build()); // Spigot
     private CraftAsyncDebugger debugHead = new CraftAsyncDebugger(-1, null, null) {@Override StringBuilder debugTo(StringBuilder string) {return string;}};
diff --git a/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java b/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java
index bbd0ade..0a321ef 100644
--- a/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java
+++ b/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java
@@ -47,7 +47,7 @@ import org.yaml.snakeyaml.error.YAMLException;
 public final class JavaPluginLoader implements PluginLoader {
     final Server server;
     private final Pattern[] fileFilters = new Pattern[] { Pattern.compile("\\.jar$"), };
-    private final Map<String, Class<?>> classes = new java.util.concurrent.ConcurrentHashMap<String, Class<?>>(); // Spigot
+    private final Map<String, Class<?>> classes = new net.techcable.pineapple.collect.CopyOnWriteMap<String, Class<?>>(); // Spigot
     private final Map<String, PluginClassLoader> loaders = new LinkedHashMap<String, PluginClassLoader>();
 
     /**
diff --git a/src/main/java/org/bukkit/plugin/java/PluginClassLoader.java b/src/main/java/org/bukkit/plugin/java/PluginClassLoader.java
index 9c7c5d7..dfb8800 100644
--- a/src/main/java/org/bukkit/plugin/java/PluginClassLoader.java
+++ b/src/main/java/org/bukkit/plugin/java/PluginClassLoader.java
@@ -18,7 +18,7 @@ import org.bukkit.plugin.PluginDescriptionFile;
 public final class PluginClassLoader extends URLClassLoader { // Spigot
     public JavaPlugin getPlugin() { return plugin; } // Spigot
     private final JavaPluginLoader loader;
-    private final Map<String, Class<?>> classes = new java.util.concurrent.ConcurrentHashMap<String, Class<?>>(); // Spigot
+    private final Map<String, Class<?>> classes = new net.techcable.pineapple.collect.CopyOnWriteMap<String, Class<?>>(); // Spigot
     private final PluginDescriptionFile description;
     private final File dataFolder;
     private final File file;
-- 
2.8.2.windows.1

