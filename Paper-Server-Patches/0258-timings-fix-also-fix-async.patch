From efb831690a605ee8f05de3235dc97a45d0c2015a Mon Sep 17 00:00:00 2001
From: SotrForgotten <i@omc.hk>
Date: Fri, 22 Jul 2016 12:51:07 +0800
Subject: [PATCH] timings fix also fix async


diff --git a/src/main/java/net/minecraft/server/StructureGenerator.java b/src/main/java/net/minecraft/server/StructureGenerator.java
index 85b34ce..f48a692 100644
--- a/src/main/java/net/minecraft/server/StructureGenerator.java
+++ b/src/main/java/net/minecraft/server/StructureGenerator.java
@@ -5,14 +5,14 @@ import it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Random;
-import co.aikar.timings.MinecraftTimings;
-import co.aikar.timings.Timing;
+// import co.aikar.timings.MinecraftTimings;
+// import co.aikar.timings.Timing;
 
 import java.util.concurrent.RecursiveAction;
 
 public abstract class StructureGenerator extends WorldGenBase {
 
-	private final Timing timing = MinecraftTimings.getStructureTiming(this); // Paper
+	// private final Timing timing = MinecraftTimings.getStructureTiming(this); // Paper
     private PersistentStructure a;
     protected Long2ObjectMap<StructureStart> c = new Long2ObjectOpenHashMap(1024);
 
@@ -74,7 +74,7 @@ public abstract class StructureGenerator extends WorldGenBase {
     }
 
     public synchronized boolean a(World world, Random random, ChunkCoordIntPair chunkcoordintpair) {
-		timing.startTiming(); // Paper
+		// timing.startTiming(); // Paper
         this.a(world);
         int i = (chunkcoordintpair.x << 4) + 8;
         int j = (chunkcoordintpair.z << 4) + 8;
@@ -94,7 +94,7 @@ public abstract class StructureGenerator extends WorldGenBase {
             }
         }
 
-		timing.stopTiming(); // Paper
+		// timing.stopTiming(); // Paper
         return flag;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/chunkio/ChunkIOExecutor.java b/src/main/java/org/bukkit/craftbukkit/chunkio/ChunkIOExecutor.java
index 5c738e9..67c13fc 100644
--- a/src/main/java/org/bukkit/craftbukkit/chunkio/ChunkIOExecutor.java
+++ b/src/main/java/org/bukkit/craftbukkit/chunkio/ChunkIOExecutor.java
@@ -15,7 +15,7 @@ public class ChunkIOExecutor {
     private static final AsynchronousExecutor<QueuedChunk, Chunk, Runnable, RuntimeException> instance = new AsynchronousExecutor<QueuedChunk, Chunk, Runnable, RuntimeException>(new ChunkIOProvider(), BASE_THREADS);
 
     public static Chunk syncChunkLoad(World world, IChunkLoader loader, ChunkProviderServer provider, int x, int z) {
-			return MCUtil.ensureMain("Async Chunk Load", () -> instance.getSkipQueue(new QueuedChunk(x, z, loader, world, provider))); // Paper
+			return instance.getSkipQueue(new QueuedChunk(x, z, loader, world, provider));
     }
 
     public static void queueChunkLoad(World world, IChunkLoader loader, ChunkProviderServer provider, int x, int z, Runnable runnable) {
diff --git a/src/main/java/org/bukkit/craftbukkit/util/AsynchronousExecutor.java b/src/main/java/org/bukkit/craftbukkit/util/AsynchronousExecutor.java
index b8e3c96..0bd34c3 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/AsynchronousExecutor.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/AsynchronousExecutor.java
@@ -118,13 +118,13 @@ public final class AsynchronousExecutor<P, T, C, E extends Throwable> {
             }
         }
 
-        void initSync() {
+        synchronized void initSync() {
             if (set(this, PENDING, STAGE_1_COMPLETE)) {
                 // If we succeed that variable switch, good as done
                 init();
             } else if (set(this, STAGE_1_ASYNC, STAGE_1_SYNC)) {
                 // Async thread is running, but this shouldn't be likely; we need to sync to wait on them because of it.
-                // synchronized (this) {
+                synchronized (this) {
                     if (set(this, STAGE_1_SYNC, PENDING)) { // They might NOT synchronized yet, atomic lock IS needed
                         // We are the first into the lock
                         while (state != STAGE_1_COMPLETE) {
@@ -138,7 +138,7 @@ public final class AsynchronousExecutor<P, T, C, E extends Throwable> {
                     } else {
                         // They beat us to the synchronized block
                     }
-                // }
+                }
             } else {
                 // Async thread is not pending, the more likely situation for a task not pending
             }
-- 
2.8.2.windows.1

