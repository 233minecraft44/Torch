From 78d5d67babbc5764f6c2d3fa20e0709377e04318 Mon Sep 17 00:00:00 2001
From: SotrForgotten <i@omc.hk>
Date: Mon, 11 Jul 2016 16:26:35 +0800
Subject: [PATCH] Threaded entity, misc io fix


diff --git a/src/main/java/com/destroystokyo/paper/PaperConfig.java b/src/main/java/com/destroystokyo/paper/PaperConfig.java
index 058720f..6518b43 100644
--- a/src/main/java/com/destroystokyo/paper/PaperConfig.java
+++ b/src/main/java/com/destroystokyo/paper/PaperConfig.java
@@ -193,10 +193,12 @@ public class PaperConfig {
         }
     }
 
+	/*
     public static int minChunkLoadThreads = 2;
     private static void chunkLoadThreads() {
         minChunkLoadThreads = Math.min(6, getInt("settings.min-chunk-load-threads", 2)); // Keep people from doing stupid things with max of 6
     }
+	*/
 
     public static boolean enableFileIOThreadSleep;
     private static void enableFileIOThreadSleep() {
diff --git a/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java b/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java
index 6e50e8d..09249c8 100644
--- a/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java
+++ b/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java
@@ -164,7 +164,7 @@ public class PaperWorldConfig {
 
     public boolean queueLightUpdates;
     private void queueLightUpdates() {
-        queueLightUpdates = getBoolean("queue-light-updates", false);
+        queueLightUpdates = getBoolean("queue-light-updates", true); // Torch
         log("Lighting Queue enabled: " + queueLightUpdates);
     }
 
@@ -207,8 +207,8 @@ public class PaperWorldConfig {
     public boolean fastDrainLava;
     public boolean fastDrainWater;
     private void fastDrain() {
-        fastDrainLava = getBoolean("fast-drain.lava", false);
-        fastDrainWater = getBoolean("fast-drain.water", false);
+        fastDrainLava = getBoolean("fast-drain.lava", true); // Torch
+        fastDrainWater = getBoolean("fast-drain.water", true); // Torch
     }
 
     public int lavaFlowSpeedNormal;
diff --git a/src/main/java/net/minecraft/server/Entity.java b/src/main/java/net/minecraft/server/Entity.java
index b28caa8..af13bb1 100644
--- a/src/main/java/net/minecraft/server/Entity.java
+++ b/src/main/java/net/minecraft/server/Entity.java
@@ -389,6 +389,10 @@ public abstract class Entity implements ICommandListener {
             this.world.methodProfiler.b();
         }
 
+		us_task = new U_sub();
+        us_task.fork();
+		// Hose start
+		/*
         this.al();
         this.aj();
         if (this.world.isClientSide) {
@@ -407,6 +411,8 @@ public abstract class Entity implements ICommandListener {
                 --this.fireTicks;
             }
         }
+		*/
+		// Hose end
 
         if (this.an()) {
             this.burnFromLava();
@@ -432,6 +438,7 @@ public abstract class Entity implements ICommandListener {
     }
 	
 	// Hose start
+	U_sub us_task; // Hose - fork
 	public void U() {
         U u_task = new U();
         u_task.fork();
@@ -1554,7 +1561,7 @@ public abstract class Entity implements ICommandListener {
 
     public void d(EntityHuman entityhuman) {}
 
-    public void collide(Entity entity) {
+    public void collide_hose(Entity entity) { // Hose
         if (!this.x(entity)) {
             if (!entity.noclip && !this.noclip) {
                 double d0 = entity.locX - this.locX;
@@ -1589,6 +1596,12 @@ public abstract class Entity implements ICommandListener {
             }
         }
     }
+	
+    collide c_task;
+    public void collide(Entity entity) { // Hose - fork it
+        c_task = new collide(entity);
+        c_task.fork();
+    }
 
     public void g(double d0, double d1, double d2) {
         // Paper start - OBFHELPER
@@ -3079,6 +3092,19 @@ public abstract class Entity implements ICommandListener {
         }
     }
 	
+    class collide extends RecursiveAction {
+        Entity entity;
+        
+        public collide(Entity entity) {
+            this.entity = entity;
+        }
+
+        @Override
+        protected void compute() {
+            collide_hose(entity);
+        }
+	}
+	
 	class move extends RecursiveAction {
         double d0, d1, d2;
         
@@ -3120,4 +3146,34 @@ public abstract class Entity implements ICommandListener {
         }
                  
     }
-}
+	
+	class U_sub extends RecursiveAction {
+        
+        public U_sub() {
+			
+		}
+
+        @Override
+        protected void compute() {
+			al();
+			aj();
+            if (world.isClientSide) {
+                fireTicks = 0;
+            } else if (fireTicks > 0) {
+                if (fireProof) {
+                    fireTicks -= 4;
+                    if (fireTicks < 0) {
+                        fireTicks = 0;
+                    }
+                } else {
+                    if (fireTicks % 20 == 0) {
+                        damageEntity(DamageSource.BURN, 1.0F);
+                    }
+
+                    --fireTicks;
+                }
+            }
+        }
+    }
+
+}
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/server/EntityTrackerEntry.java b/src/main/java/net/minecraft/server/EntityTrackerEntry.java
index a783ecb..2afdd77 100644
--- a/src/main/java/net/minecraft/server/EntityTrackerEntry.java
+++ b/src/main/java/net/minecraft/server/EntityTrackerEntry.java
@@ -12,6 +12,7 @@ import org.apache.logging.log4j.Logger;
 // CraftBukkit start
 import org.bukkit.entity.Player;
 import org.bukkit.event.player.PlayerVelocityEvent;
+import java.util.concurrent.ConcurrentHashMap;
 // CraftBukkit end
 
 public class EntityTrackerEntry {
@@ -44,7 +45,7 @@ public class EntityTrackerEntry {
     // Paper start
     // Replace trackedPlayers Set with a Map. The value is true until the player receives
     // their first update (which is forced to have absolute coordinates), false afterward.
-    public java.util.Map<EntityPlayer, Boolean> trackedPlayerMap = new java.util.HashMap<EntityPlayer, Boolean>();
+    public java.util.Map<EntityPlayer, Boolean> trackedPlayerMap = new ConcurrentHashMap<EntityPlayer, Boolean>();
     public Set<EntityPlayer> trackedPlayers = trackedPlayerMap.keySet();
     // Paper end
 
diff --git a/src/main/java/net/minecraft/server/PlayerChunkMap.java b/src/main/java/net/minecraft/server/PlayerChunkMap.java
index 281f48e..d04c8bb 100644
--- a/src/main/java/net/minecraft/server/PlayerChunkMap.java
+++ b/src/main/java/net/minecraft/server/PlayerChunkMap.java
@@ -27,6 +27,7 @@ import com.google.common.collect.Maps;
 import com.google.common.collect.Queues;
 import java.util.Map;
 import java.util.Queue;
+import java.util.concurrent.ConcurrentLinkedQueue;
 
 public class PlayerChunkMap {
 
@@ -48,6 +49,7 @@ public class PlayerChunkMap {
             return this.a((EntityPlayer) object);
         }
     };
+	
     private final WorldServer world;
     // TacoSpigot start - catch async access
     private final List<EntityPlayer> managedPlayers = AsyncCatcher.catchAsyncUsage(Lists.newArrayList(), "list access PlayerChunkMap.managedPlayers");
@@ -55,8 +57,8 @@ public class PlayerChunkMap {
 	private final Map<Long, PlayerChunk> e = Maps.newConcurrentMap();
     // private final Set<PlayerChunk> f = AsyncCatcher.catchAsyncUsage(Sets.newHashSet(), "set access PlayerChunkMap.f");
 	private final Set<PlayerChunk> f = Sets.newConcurrentHashSet();
-    private final List<PlayerChunk> g = AsyncCatcher.catchAsyncUsage(Lists.newLinkedList(), "list access PlayerChunkMap.g");
-    private final List<PlayerChunk> h = AsyncCatcher.catchAsyncUsage(Lists.newLinkedList(), "list access PlayerChunkMap.h");
+    private final Queue<PlayerChunk> g = new ConcurrentLinkedQueue<PlayerChunk>();
+    private final Queue<PlayerChunk> h = new ConcurrentLinkedQueue<PlayerChunk>();
     // private final List<PlayerChunk> i = AsyncCatcher.catchAsyncUsage(Lists.newArrayList(), "list access PlayerChunkMap.i");
 	private final Queue<PlayerChunk> i = Queues.newConcurrentLinkedQueue();
     // TacoSpigot end
@@ -157,6 +159,7 @@ public class PlayerChunkMap {
         if (this.l && i % 4L == 0L) {
             this.l = false;
             try (Timing ignored = world.timings.doChunkMapSortMissing.startTiming()) { // Paper
+			/*
             Collections.sort(this.h, new Comparator() {
                 public int a(PlayerChunk playerchunk, PlayerChunk playerchunk1) {
                     return ComparisonChain.start().compare(playerchunk.g(), playerchunk1.g()).result();
@@ -166,12 +169,14 @@ public class PlayerChunkMap {
                     return this.a((PlayerChunk) object, (PlayerChunk) object1);
                 }
             });
+			*/
             } // Paper timing
         }
 
         if (this.m && i % 4L == 2L) {
             this.m = false;
             try (Timing ignored = world.timings.doChunkMapSortSendToPlayers.startTiming()) { // Paper
+			/*
             Collections.sort(this.g, new Comparator() {
                 public int a(PlayerChunk playerchunk, PlayerChunk playerchunk1) {
                     return ComparisonChain.start().compare(playerchunk.g(), playerchunk1.g()).result();
@@ -181,6 +186,7 @@ public class PlayerChunkMap {
                     return this.a((PlayerChunk) object, (PlayerChunk) object1);
                 }
             });
+			*/
             } // Paper timing
         }
 
diff --git a/src/main/java/net/minecraft/server/PlayerList.java b/src/main/java/net/minecraft/server/PlayerList.java
index 89756fa..07426c3 100644
--- a/src/main/java/net/minecraft/server/PlayerList.java
+++ b/src/main/java/net/minecraft/server/PlayerList.java
@@ -358,7 +358,7 @@ public abstract class PlayerList {
             }
         }
 
-        ChunkIOExecutor.adjustPoolSize(getPlayerCount());
+        // ChunkIOExecutor.adjustPoolSize(getPlayerCount());
         // CraftBukkit end
 
         // CraftBukkit start - sendAll above replaced with this loop
@@ -454,7 +454,7 @@ public abstract class PlayerList {
         cserver.getScoreboardManager().removePlayer(entityplayer.getBukkitEntity());
         // CraftBukkit end
 
-        ChunkIOExecutor.adjustPoolSize(this.getPlayerCount()); // CraftBukkit
+        // ChunkIOExecutor.adjustPoolSize(this.getPlayerCount()); // CraftBukkit
 
         return playerQuitEvent.getQuitMessage(); // CraftBukkit
     }
diff --git a/src/main/java/net/techcable/tacospigot/TacoSpigotConfig.java b/src/main/java/net/techcable/tacospigot/TacoSpigotConfig.java
index b64399b..ac62a88 100644
--- a/src/main/java/net/techcable/tacospigot/TacoSpigotConfig.java
+++ b/src/main/java/net/techcable/tacospigot/TacoSpigotConfig.java
@@ -104,21 +104,21 @@ public class TacoSpigotConfig {
 
     public static boolean useArraysForBlockStates;
     private static void useArraysForBlockStates() {
-        useArraysForBlockStates = getBoolean("useArraysForBlockStates", true); // Torch - default use
+        useArraysForBlockStates = getBoolean("useArraysForBlockStates", false); // Torch
     }
 
     public static boolean betterPvp;
     private static void betterPvp() {
-        betterPvp = getBoolean("betterPvp", true); // Torch - default use
+        betterPvp = getBoolean("betterPvp", false); // Torch
     }
 	
 	public static boolean useArraysForDatawatcher;
     private static void useArraysForDatawatcher() {
-        useArraysForDatawatcher = getBoolean("useArraysForDatawatcher", true); // Torch - default use
+        useArraysForDatawatcher = getBoolean("useArraysForDatawatcher", false); // Torch
     }
 	
 	public static boolean disableDataWatcherReadLocking;
     private static void disableDataWatcherReadLocking() {
-        disableDataWatcherReadLocking = getBoolean("disableDataWatcherReadLocking", true); // Torch - default use
+        disableDataWatcherReadLocking = getBoolean("disableDataWatcherReadLocking", false); // Torch
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/chunkio/ChunkIOExecutor.java b/src/main/java/org/bukkit/craftbukkit/chunkio/ChunkIOExecutor.java
index 3a3b0b0..4e458bc 100644
--- a/src/main/java/org/bukkit/craftbukkit/chunkio/ChunkIOExecutor.java
+++ b/src/main/java/org/bukkit/craftbukkit/chunkio/ChunkIOExecutor.java
@@ -1,6 +1,5 @@
 package org.bukkit.craftbukkit.chunkio;
 
-import com.destroystokyo.paper.PaperConfig;
 import net.minecraft.server.Chunk;
 import net.minecraft.server.ChunkProviderServer;
 import net.minecraft.server.ChunkRegionLoader;
@@ -9,8 +8,9 @@ import net.minecraft.server.World;
 import org.bukkit.craftbukkit.util.AsynchronousExecutor;
 
 public class ChunkIOExecutor {
-    static final int BASE_THREADS = PaperConfig.minChunkLoadThreads; // Paper
-    static final int PLAYERS_PER_THREAD = 50;
+    // static final int BASE_THREADS = PaperConfig.minChunkLoadThreads; // Paper
+    // static final int PLAYERS_PER_THREAD = 50;
+	static final int BASE_THREADS =  Runtime.getRuntime().availableProcessors(); // Paper // Hose - threaded
 
     private static final AsynchronousExecutor<QueuedChunk, Chunk, Runnable, RuntimeException> instance = new AsynchronousExecutor<QueuedChunk, Chunk, Runnable, RuntimeException>(new ChunkIOProvider(), BASE_THREADS);
 
@@ -27,10 +27,12 @@ public class ChunkIOExecutor {
         instance.drop(new QueuedChunk(x, z, null, world, null), runnable);
     }
 
+	/*
     public static void adjustPoolSize(int players) {
         int size = Math.max(BASE_THREADS, (int) Math.ceil(players / PLAYERS_PER_THREAD));
         instance.setActiveThreads(size);
     }
+	*/
 
     public static void tick() {
         instance.finishActive();
-- 
2.8.2.windows.1

