From 2266895832398acda7f329a288893b051e3ddc5f Mon Sep 17 00:00:00 2001
From: SotrForgotten <i@omc.hk>
Date: Thu, 25 Aug 2016 15:12:25 +0800
Subject: [PATCH] Add PlayerPickupExpOrbEvent


diff --git a/src/main/java/com/destroystokyo/paper/event/player/PlayerPickupExpOrbEvent.java b/src/main/java/com/destroystokyo/paper/event/player/PlayerPickupExpOrbEvent.java
new file mode 100644
index 0000000..999784d
--- /dev/null
+++ b/src/main/java/com/destroystokyo/paper/event/player/PlayerPickupExpOrbEvent.java
@@ -0,0 +1,64 @@
+package com.destroystokyo.paper.event.player;
+
+import org.bukkit.entity.ExperienceOrb;
+import org.bukkit.entity.Player;
+import org.bukkit.event.Cancellable;
+import org.bukkit.event.HandlerList;
+import org.bukkit.event.player.PlayerEvent;
+
+/**
+ * Called when a player picks up an experience orb
+ */
+public class PlayerPickupExpOrbEvent extends PlayerEvent implements Cancellable {
+    private static final HandlerList handlers = new HandlerList();
+    private final ExperienceOrb orb;
+    private int change;
+    private boolean cancel;
+
+    public PlayerPickupExpOrbEvent(final Player player, final ExperienceOrb orb, final int change) {
+        super(player);
+        this.orb = orb;
+        this.change = change;
+    }
+
+    /**
+     * Gets the experience orb that is being picked up
+     * @return the experience orb that is being picked up
+     */
+    public ExperienceOrb getOrb() {
+        return orb;
+    }
+
+    /**
+     * Gets the amount of experience the player will get
+     * @return the change in experience the player will get
+     */
+    public int getChangedExperience() {
+        return change;
+    }
+
+    /**
+     * Sets the amount of experience the player will get
+     * @param change the amount of experience the player will get
+     */
+    public void setChangedExperience(int change) {
+        this.change = change;
+    }
+
+    public boolean isCancelled() {
+        return cancel;
+    }
+
+    public void setCancelled(boolean cancel) {
+        this.cancel = cancel;
+    }
+
+    @Override
+    public HandlerList getHandlers() {
+        return handlers;
+    }
+
+    public static HandlerList getHandlerList() {
+        return handlers;
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/server/EntityExperienceOrb.java b/src/main/java/net/minecraft/server/EntityExperienceOrb.java
index 0ac1986..8bdc131 100644
--- a/src/main/java/net/minecraft/server/EntityExperienceOrb.java
+++ b/src/main/java/net/minecraft/server/EntityExperienceOrb.java
@@ -1,8 +1,14 @@
 package net.minecraft.server;
 
+import java.util.concurrent.ThreadLocalRandom;
+
 // CraftBukkit start
 import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.entity.ExperienceOrb;
+import org.bukkit.entity.Player;
 import org.bukkit.event.entity.EntityTargetEvent;
+
+import com.destroystokyo.paper.event.player.PlayerPickupExpOrbEvent;
 // CraftBukkit end
 
 public class EntityExperienceOrb extends Entity {
@@ -19,10 +25,10 @@ public class EntityExperienceOrb extends Entity {
 		super(world);
 		this.setSize(0.5F, 0.5F);
 		this.setPosition(d0, d1, d2);
-		this.yaw = (float) (Math.random() * 360.0D);
-		this.motX = (float) (Math.random() * 0.20000000298023224D - 0.10000000149011612D) * 2.0F;
-		this.motY = (float) (Math.random() * 0.2D) * 2.0F;
-		this.motZ = (float) (Math.random() * 0.20000000298023224D - 0.10000000149011612D) * 2.0F;
+		this.yaw = (float) (ThreadLocalRandom.current().nextFloat() * 360.0D);
+		this.motX = (float) (ThreadLocalRandom.current().nextFloat() * 0.20000000298023224D - 0.10000000149011612D) * 2.0F;
+		this.motY = (float) (ThreadLocalRandom.current().nextFloat() * 0.2D) * 2.0F;
+		this.motZ = (float) (ThreadLocalRandom.current().nextFloat() * 0.20000000298023224D - 0.10000000149011612D) * 2.0F;
 		this.value = i;
 	}
 
@@ -174,30 +180,33 @@ public class EntityExperienceOrb extends Entity {
 	public void d(EntityHuman entityhuman) {
 		if (!this.world.isClientSide) {
 			if (this.c == 0 && entityhuman.bz == 0) {
-				entityhuman.bz = 2;
-				this.world.a((EntityHuman) null, entityhuman.locX, entityhuman.locY, entityhuman.locZ, SoundEffects.bj,
-						SoundCategory.PLAYERS, 0.1F,
-						0.5F * ((this.random.nextFloat() - this.random.nextFloat()) * 0.7F + 1.8F));
-				entityhuman.receive(this, 1);
-				ItemStack itemstack = EnchantmentManager.b(Enchantments.A, entityhuman);
-
-				if (itemstack != null && itemstack.g()) {
-					int i = Math.min(this.d(this.value), itemstack.h());
-
-					this.value -= this.b(i);
-					itemstack.setData(itemstack.h() - i);
+				// Paper start
+				PlayerPickupExpOrbEvent event = new PlayerPickupExpOrbEvent((Player) entityhuman.getBukkitEntity(), (ExperienceOrb) this.getBukkitEntity(), this.value);
+				this.getBukkitEntity().getServer().getPluginManager().callEvent(event);
+				this.value = event.getChangedExperience();
+
+				///
+				if (!event.isCancelled()) {
+					 entityhuman.bz = 2;
+					 this.world.a((EntityHuman) null, entityhuman.locX, entityhuman.locY, entityhuman.locZ, SoundEffects.bj, SoundCategory.PLAYERS, 0.1F, 0.5F * ((this.random.nextFloat() - this.random.nextFloat()) * 0.7F + 1.8F));
+						entityhuman.receive(this, 1);
+						ItemStack itemstack = EnchantmentManager.b(Enchantments.A, entityhuman);
+					 
+					 if (itemstack != null && itemstack.g()) {
+						 int i = Math.min(this.d(this.value), itemstack.h());
+
+						 this.value -= this.b(i);
+						 itemstack.setData(itemstack.h() - i);
+					}
+				
 				}
 
 				if (this.value > 0) {
-					entityhuman
-							.giveExp(CraftEventFactory.callPlayerExpChangeEvent(entityhuman, this.value).getAmount()); // CraftBukkit
-																														// -
-																														// this.value
-																														// ->
-																														// event.getAmount()
+					 	entityhuman.giveExp(CraftEventFactory.callPlayerExpChangeEvent(entityhuman, this.value).getAmount()); // CraftBukkit - this.value -> event.getAmount()
 				}
-
+					 
 				this.die();
+				// Paper end
 			}
 
 		}
-- 
2.8.2.windows.1

