From 6ecba86ec92a5f03f3c851c47a1fdc361d9df823 Mon Sep 17 00:00:00 2001
From: SotrForgotten <i@omc.hk>
Date: Sat, 16 Jul 2016 05:32:00 +0800
Subject: [PATCH] Component support for signs


diff --git a/src/main/java/net/minecraft/server/PlayerConnection.java b/src/main/java/net/minecraft/server/PlayerConnection.java
index e688d18..a75f9ec 100644
--- a/src/main/java/net/minecraft/server/PlayerConnection.java
+++ b/src/main/java/net/minecraft/server/PlayerConnection.java
@@ -16,7 +16,9 @@ import java.util.Set;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
-
+import net.md_5.bungee.api.chat.BaseComponent;
+import net.md_5.bungee.api.chat.TextComponent;
+import org.bukkit.craftbukkit.util.BungeeChatUtils;
 import io.netty.util.AttributeKey; // Torch
 
 // CraftBukkit start
@@ -2182,16 +2184,18 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
             int x = packetplayinupdatesign.a().getX();
             int y = packetplayinupdatesign.a().getY();
             int z = packetplayinupdatesign.a().getZ();
-            String[] lines = new String[4];
+            BaseComponent[] lines = new BaseComponent[4];
 
             for (int i = 0; i < astring.length; ++i) {
-                lines[i] = EnumChatFormat.a(new ChatComponentText(EnumChatFormat.a(astring[i])).toPlainText());
+                lines[i] = new TextComponent(EnumChatFormat.a(astring[i]));
             }
             SignChangeEvent event = new SignChangeEvent((org.bukkit.craftbukkit.block.CraftBlock) player.getWorld().getBlockAt(x, y, z), this.server.getPlayer(this.player), lines);
             this.server.getPluginManager().callEvent(event);
 
             if (!event.isCancelled()) {
-                System.arraycopy(org.bukkit.craftbukkit.block.CraftSign.sanitizeLines(event.getLines()), 0, tileentitysign.lines, 0, 4);
+                for(int i = 0; i < tileentitysign.lines.length; i++) {
+                    tileentitysign.lines[i] = BungeeChatUtils.toNms(event.line(i));
+                }
                 tileentitysign.isEditable = false;
              }
             // CraftBukkit end
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftSign.java b/src/main/java/org/bukkit/craftbukkit/block/CraftSign.java
index 43adfcc..84ea4f5 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftSign.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftSign.java
@@ -1,17 +1,17 @@
 package org.bukkit.craftbukkit.block;
 
-import net.minecraft.server.ChatComponentText;
-import net.minecraft.server.IChatBaseComponent;
+import net.md_5.bungee.api.chat.BaseComponent;
+import net.md_5.bungee.api.chat.TextComponent;
 import net.minecraft.server.TileEntitySign;
 import org.bukkit.Material;
 import org.bukkit.block.Block;
 import org.bukkit.block.Sign;
 import org.bukkit.craftbukkit.CraftWorld;
-import org.bukkit.craftbukkit.util.CraftChatMessage;
+import org.bukkit.craftbukkit.util.BungeeChatUtils;
 
 public class CraftSign extends CraftBlockState implements Sign {
     private final TileEntitySign sign;
-    private final String[] lines;
+    private final BaseComponent[] lines = new BaseComponent[4];
 
     public CraftSign(final Block block) {
         super(block);
@@ -24,68 +24,63 @@ public class CraftSign extends CraftBlockState implements Sign {
             return;
         }
         // Spigot end
-        lines = new String[sign.lines.length];
-        System.arraycopy(revertComponents(sign.lines), 0, lines, 0, lines.length);
+        importFromNms();
     }
 
     public CraftSign(final Material material, final TileEntitySign te) {
         super(material);
         sign = te;
-        lines = new String[sign.lines.length];
-        System.arraycopy(revertComponents(sign.lines), 0, lines, 0, lines.length);
+        importFromNms();
     }
 
-    public String[] getLines() {
+    private void importFromNms() {
+        for(int i = 0; i < lines.length; i++) {
+            lines[i] = sign.lines.length > i ? BungeeChatUtils.toBungee(sign.lines[i])
+                                             : new TextComponent();
+        }
+    }
+
+	@Override
+    public BaseComponent[] lines() {
         return lines;
     }
 
-    public String getLine(int index) throws IndexOutOfBoundsException {
+    @Override
+    public BaseComponent line(int index) {
         return lines[index];
     }
 
-    public void setLine(int index, String line) throws IndexOutOfBoundsException {
+    @Override
+    public void setLine(int index, BaseComponent line) {
         lines[index] = line;
     }
+	
+	public String[] getLines() {
+        return BaseComponent.toLegacyArray(lines);
+    }
+
+    public String getLine(int index) throws IndexOutOfBoundsException {
+        return lines[index].toLegacyText();
+    }
+
+    public void setLine(int index, String line) throws IndexOutOfBoundsException {
+        lines[index] = TextComponent.fromLegacyToComponent(line, false);
+    }
 
     @Override
     public boolean update(boolean force, boolean applyPhysics) {
         boolean result = super.update(force, applyPhysics);
 
         if (result) {
-            IChatBaseComponent[] newLines = sanitizeLines(lines);
-            System.arraycopy(newLines, 0, sign.lines, 0, 4);
+            for(int i = 0; i < sign.lines.length; i++) {
+                sign.lines[i] = BungeeChatUtils.toNms(lines[i]);
+            }
             sign.update();
         }
 
         return result;
     }
 
-    public static IChatBaseComponent[] sanitizeLines(String[] lines) {
-        IChatBaseComponent[] components = new IChatBaseComponent[4];
-
-        for (int i = 0; i < 4; i++) {
-            if (i < lines.length && lines[i] != null) {
-                components[i] = CraftChatMessage.fromString(lines[i])[0];
-            } else {
-                components[i] = new ChatComponentText("");
-            }
-        }
-
-        return components;
-    }
-
-    public static String[] revertComponents(IChatBaseComponent[] components) {
-        String[] lines = new String[components.length];
-        for (int i = 0; i < lines.length; i++) {
-            lines[i] = revertComponent(components[i]);
-        }
-        return lines;
-    }
-
-    private static String revertComponent(IChatBaseComponent component) {
-        return CraftChatMessage.fromComponent(component);
-    }
-
     @Override
     public TileEntitySign getTileEntity() {
         return sign;
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index 62bc505..1667c01 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -3,6 +3,7 @@ package org.bukkit.craftbukkit.entity;
 import com.destroystokyo.paper.Title;
 import com.google.common.base.Preconditions;
 import com.google.common.collect.ImmutableSet;
+import org.bukkit.craftbukkit.util.BungeeChatUtils;
 import com.mojang.authlib.GameProfile;
 import io.netty.buffer.Unpooled;
 
@@ -477,23 +478,41 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     @Override
     public void sendSignChange(Location loc, String[] lines) {
-        if (getHandle().playerConnection == null) {
-            return;
-        }
 
         if (lines == null) {
             lines = new String[4];
         }
+		final IChatBaseComponent[] nms = new IChatBaseComponent[4];
+        for(int i = 0; i < 4; i++) {
+            nms[i] = lines != null && lines[i] == null ? new ChatComponentText("")
+                                                       : CraftChatMessage.fromString(lines[i])[0];
+        }
+        sendSignChange(loc, nms);
+    }
+ 
+    @Override
+    public void sendSignChange(Location loc, BaseComponent[] lines) {
+        final IChatBaseComponent[] nms = new IChatBaseComponent[4];
+        for(int i = 0; i < 4; i++) {
+            nms[i] = lines != null && lines[i] == null ? new ChatComponentText("")
+                                                       : BungeeChatUtils.toNms(lines[i]);
+        }
+        sendSignChange(loc, nms);
+    }
 
+    private void sendSignChange(Location loc, IChatBaseComponent[] lines) {
         Validate.notNull(loc, "Location can not be null");
         if (lines.length < 4) {
             throw new IllegalArgumentException("Must have at least 4 lines");
         }
 
-        IChatBaseComponent[] components = CraftSign.sanitizeLines(lines);
+        if (getHandle().playerConnection == null) {
+            return;
+        }
+		
         TileEntitySign sign = new TileEntitySign();
         sign.a(new BlockPosition(loc.getBlockX(), loc.getBlockY(), loc.getBlockZ())); // PAIL: rename
-        System.arraycopy(components, 0, sign.lines, 0, sign.lines.length);
+        System.arraycopy(lines, 0, sign.lines, 0, sign.lines.length);
 
         getHandle().playerConnection.sendPacket(sign.getUpdatePacket());
     }
-- 
2.8.2.windows.1

