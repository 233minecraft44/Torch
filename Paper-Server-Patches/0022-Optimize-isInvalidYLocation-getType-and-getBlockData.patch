From 732622cd35217b9fdce38479527ca00a2aa019f8 Mon Sep 17 00:00:00 2001
From: SotrForgotten <i@omc.hk>
Date: Fri, 1 Jul 2016 16:47:09 +0800
Subject: [PATCH] Optimize isInvalidYLocation, getType and getBlockData


diff --git a/src/main/java/net/minecraft/server/BaseBlockPosition.java b/src/main/java/net/minecraft/server/BaseBlockPosition.java
index 4326c44..6bbdb66 100644
--- a/src/main/java/net/minecraft/server/BaseBlockPosition.java
+++ b/src/main/java/net/minecraft/server/BaseBlockPosition.java
@@ -12,10 +12,13 @@ public class BaseBlockPosition implements Comparable<BaseBlockPosition> {
     protected int b;
     protected int c;
     // TacoSpigot end
-    // Paper start
-    public final boolean isValidLocation() { // TacoSpigot - final for no overrides
+	// Paper start
+    public boolean isValidLocation() {
         return a >= -30000000 && c >= -30000000 && a < 30000000 && c < 30000000 && b >= 0 && b < 256;
     }
+    public boolean isInvalidYLocation() {
+        return b < 0 || b >= 256;
+    }
     // Paper end
 
     public BaseBlockPosition(int i, int j, int k) {
diff --git a/src/main/java/net/minecraft/server/BlockPosition.java b/src/main/java/net/minecraft/server/BlockPosition.java
index cd35a0c..960d524 100644
--- a/src/main/java/net/minecraft/server/BlockPosition.java
+++ b/src/main/java/net/minecraft/server/BlockPosition.java
@@ -367,6 +367,12 @@ public class BlockPosition extends BaseBlockPosition {
 
 		*/
         // TacoSpigot end
+		 // Paper start
+        @Override
+        public boolean isInvalidYLocation() {
+            return c < 0 || c >= 256;
+        }
+        // Paper end
 		
         public MutableBlockPosition() {
             this(0, 0, 0);
diff --git a/src/main/java/net/minecraft/server/Chunk.java b/src/main/java/net/minecraft/server/Chunk.java
index a6cce55..0eff991 100644
--- a/src/main/java/net/minecraft/server/Chunk.java
+++ b/src/main/java/net/minecraft/server/Chunk.java
@@ -407,15 +407,8 @@ public class Chunk {
         return this.a(i, j, k).c();
     }
 
-    // Paper - Optimize getBlockData
     public IBlockData getBlockData(BlockPosition blockposition) {
-        if (blockposition.getY() >= 0 && blockposition.getY() >> 4 < this.sections.length) {
-            ChunkSection chunksection = this.sections[blockposition.getY() >> 4];
-            if (chunksection != null) {
-                return chunksection.getType(blockposition.getX() & 15, blockposition.getY() & 15, blockposition.getZ() & 15);
-            }
-        }
-        return Blocks.AIR.getBlockData();
+        return this.a(blockposition.getX(), blockposition.getY(), blockposition.getZ());
     }
 
     public IBlockData a(final int i, final int j, final int k) {
diff --git a/src/main/java/net/minecraft/server/ChunkSection.java b/src/main/java/net/minecraft/server/ChunkSection.java
index 94aea80..ec807bc 100644
--- a/src/main/java/net/minecraft/server/ChunkSection.java
+++ b/src/main/java/net/minecraft/server/ChunkSection.java
@@ -5,7 +5,7 @@ public class ChunkSection {
     private int yPos;
     private int nonEmptyBlockCount;
     private int tickingBlockCount;
-    private DataPaletteBlock blockIds;
+     final DataPaletteBlock blockIds; // Paper - package
     private NibbleArray emittedLight;
     private NibbleArray skyLight;
 
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index c7194b4..1321145 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -276,12 +276,12 @@ public abstract class World implements IBlockAccess {
         return this.getType(blockposition1);
     }
 
-    private static boolean isValidLocation(BlockPosition blockposition) { // Paper
+    private static boolean isValidLocation(BlockPosition blockposition) { // Paper - unused but incase reflection / future uses
         return blockposition.isValidLocation(); // Paper
     }
 
-    private boolean E(BlockPosition blockposition) {
-        return blockposition.getY() < 0 || blockposition.getY() >= 256;
+    private static boolean E(BlockPosition blockposition) { // Paper - unused but incase reflection / future uses
+        return blockposition.isInvalidYLocation(); // Paper
     }
 
     public boolean isEmpty(BlockPosition blockposition) {
@@ -373,7 +373,7 @@ public abstract class World implements IBlockAccess {
             return true;
         }
         // CraftBukkit end
-        if (this.E(blockposition)) {
+        if (blockposition.isInvalidYLocation()) { // Paper
             return false;
         } else if (!this.isClientSide && this.worldData.getType() == WorldType.DEBUG_ALL_BLOCK_STATES) {
             return false;
@@ -793,19 +793,19 @@ public abstract class World implements IBlockAccess {
     // Paper start - reduces need to do isLoaded before getType
     public IBlockData getTypeIfLoaded(BlockPosition blockposition) {
         // CraftBukkit start - tree generation
+		final int x = blockposition.getX();
+        final int y = blockposition.getY();
+        final int z = blockposition.getZ();
         if (captureTreeGeneration) {
-            Iterator<BlockState> it = capturedBlockStates.iterator();
-            while (it.hasNext()) {
-                BlockState previous = it.next();
-                if (previous.getX() == blockposition.getX() && previous.getY() == blockposition.getY() && previous.getZ() == blockposition.getZ()) {
-                    return CraftMagicNumbers.getBlock(previous.getTypeId()).fromLegacyData(previous.getRawData());
-                }
+            final IBlockData previous = getCapturedBlockType(x, y, z);
+            if (previous != null) {
+                return previous;
             }
         }
         // CraftBukkit end
-        Chunk chunk = this.getChunkIfLoaded(blockposition);
+        Chunk chunk = ((ChunkProviderServer) this.chunkProvider).getChunkIfLoaded(x >> 4, z >> 4);
         if (chunk != null) {
-            return blockposition.isValidLocation() ? chunk.getBlockData(blockposition) : Blocks.AIR.getBlockData();
+            return chunk.getBlockData(x, y, z);
         }
         return null;
     }
@@ -813,24 +813,34 @@ public abstract class World implements IBlockAccess {
 
     public IBlockData getType(BlockPosition blockposition) {
         // CraftBukkit start - tree generation
+		// Paper start - optimize getType lookup to reduce instructions - getBlockData already enforces valid Y, move tree out
+        final int x = blockposition.getX();
+        final int y = blockposition.getY();
+        final int z = blockposition.getZ();
         if (captureTreeGeneration) {
             Iterator<BlockState> it = capturedBlockStates.iterator();
-            while (it.hasNext()) {
-                BlockState previous = it.next();
-                if (previous.getX() == blockposition.getX() && previous.getY() == blockposition.getY() && previous.getZ() == blockposition.getZ()) {
-                    return CraftMagicNumbers.getBlock(previous.getTypeId()).fromLegacyData(previous.getRawData());
-                }
+            final IBlockData previous = getCapturedBlockType(x, y, z);
+            if (previous != null) {
+                return previous;
             }
         }
         // CraftBukkit end
-        if (this.E(blockposition)) {
-            return Blocks.AIR.getBlockData();
-        } else {
-            Chunk chunk = this.getChunkAtWorldCoords(blockposition);
-
-            return chunk.getBlockData(blockposition);
-        }
+        return this.chunkProvider.getChunkAt(x >> 4, z >> 4).getBlockData(x, y, z);
+        // Paper end
     }
+	
+	// Paper start
+    private IBlockData getCapturedBlockType(int x, int y, int z) {
+        Iterator<BlockState> it = capturedBlockStates.iterator();
+        while (it.hasNext()) {
+            BlockState previous = it.next();
+            if (previous.getX() == x && previous.getY() == y && previous.getZ() == z) {
+                return CraftMagicNumbers.getBlock(previous.getTypeId()).fromLegacyData(previous.getRawData());
+            }
+         }
+        return null;
+    }
+    // Paper end
 
     public boolean B() {
         return this.J < 4;
@@ -2062,7 +2072,7 @@ public abstract class World implements IBlockAccess {
 
     public TileEntity getTileEntity(BlockPosition blockposition, boolean isRemoving) {
         // Paper end
-        if (this.E(blockposition)) {
+        if (blockposition.isInvalidYLocation()) { // Paper
             return null;
         } else {
             // CraftBukkit start
@@ -2103,7 +2113,7 @@ public abstract class World implements IBlockAccess {
     }
 
     public void setTileEntity(BlockPosition blockposition, @Nullable TileEntity tileentity) {
-        if (!this.E(blockposition)) {
+        if (!blockposition.isInvalidYLocation()) { // Paper
             if (tileentity != null && !tileentity.x()) {
             // CraftBukkit start
             if (captureBlockStates) {
@@ -2166,7 +2176,7 @@ public abstract class World implements IBlockAccess {
     }
 
     public boolean d(BlockPosition blockposition, boolean flag) {
-        if (this.E(blockposition)) {
+        if (blockposition.isInvalidYLocation()) { // Paper
             return false;
         } else {
             Chunk chunk = this.chunkProvider.getLoadedChunkAt(blockposition.getX() >> 4, blockposition.getZ() >> 4);
-- 
2.8.2.windows.1

