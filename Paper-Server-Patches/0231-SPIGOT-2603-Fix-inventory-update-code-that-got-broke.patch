From 0fab83e0f00a5873e36ab7660fc6fe066094d351 Mon Sep 17 00:00:00 2001
From: SotrForgotten <i@omc.hk>
Date: Mon, 15 Aug 2016 22:44:42 +0800
Subject: [PATCH] SPIGOT-2603: Fix inventory update code that got broken in
 update


diff --git a/src/main/java/net/minecraft/server/Container.java b/src/main/java/net/minecraft/server/Container.java
index bc1c125..a6449a1 100644
--- a/src/main/java/net/minecraft/server/Container.java
+++ b/src/main/java/net/minecraft/server/Container.java
@@ -89,9 +89,7 @@ public abstract class Container {
 			ItemStack itemstack = this.c.get(i).getItem();
 			ItemStack itemstack1 = this.b.get(i);
 
-			if (!ItemStack.fastMatches(itemstack1, itemstack)
-					|| (tickCount++ % org.spigotmc.SpigotConfig.itemDirtyTicks == 0
-							&& !ItemStack.matches(itemstack1, itemstack))) { // Spigot
+			if (!ItemStack.fastMatches(itemstack1, itemstack) || (tickCount % org.spigotmc.SpigotConfig.itemDirtyTicks == 0 && !ItemStack.matches(itemstack1, itemstack))) { // Spigot
 				itemstack1 = itemstack == null ? null : itemstack.cloneItemStack();
 				this.b.set(i, itemstack1);
 
@@ -101,6 +99,7 @@ public abstract class Container {
 			}
 		}
 
+	tickCount++; // Spigot
 	}
 
 	public boolean a(EntityHuman entityhuman, int i) {
diff --git a/src/main/java/net/minecraft/server/PacketStatusInPing.java b/src/main/java/net/minecraft/server/PacketStatusInPing.java
deleted file mode 100644
index a638cc8..0000000
--- a/src/main/java/net/minecraft/server/PacketStatusInPing.java
+++ /dev/null
@@ -1,54 +0,0 @@
-package net.minecraft.server;
-
-import java.io.IOException;
-import java.util.concurrent.RecursiveAction;
-
-public class PacketStatusInPing implements Packet<PacketStatusInListener> {
-
-	private long a;
-
-	public PacketStatusInPing() {
-	}
-
-	@Override
-	public void a(PacketDataSerializer packetdataserializer) throws IOException {
-		this.a = packetdataserializer.readLong();
-	}
-
-	@Override
-	public void b(PacketDataSerializer packetdataserializer) throws IOException {
-		packetdataserializer.writeLong(this.a);
-	}
-
-	class InTask extends RecursiveAction {
-		PacketStatusInListener packetstatusinlistener;
-
-		InTask(PacketStatusInListener packetstatusinlistener) {
-			this.packetstatusinlistener = packetstatusinlistener;
-		}
-
-		@Override
-		protected void compute() {
-			a_task(packetstatusinlistener);
-		}
-
-	}
-
-	@Override
-	public void a(PacketStatusInListener packetstatusinlistener) {
-		if (de.minetick.MigotConfig.enabledForkPing) {
-			InTask a_task = new InTask(packetstatusinlistener);
-			a_task.fork();
-		} else {
-			packetstatusinlistener.a(this);
-		}
-	}
-
-	public void a_task(PacketStatusInListener packetstatusinlistener) {
-		packetstatusinlistener.a(this);
-	}
-
-	public long a() {
-		return this.a;
-	}
-}
diff --git a/src/main/java/net/minecraft/server/PacketStatusInStart.java b/src/main/java/net/minecraft/server/PacketStatusInStart.java
deleted file mode 100644
index 887923a..0000000
--- a/src/main/java/net/minecraft/server/PacketStatusInStart.java
+++ /dev/null
@@ -1,47 +0,0 @@
-package net.minecraft.server;
-
-import java.io.IOException;
-import java.util.concurrent.RecursiveAction;
-
-public class PacketStatusInStart implements Packet<PacketStatusInListener> {
-
-	public PacketStatusInStart() {
-	}
-
-	@Override
-	public void a(PacketDataSerializer packetdataserializer) throws IOException {
-	}
-
-	@Override
-	public void b(PacketDataSerializer packetdataserializer) throws IOException {
-	}
-
-	class InTask extends RecursiveAction {
-		PacketStatusInListener packetstatusinlistener;
-
-		InTask(PacketStatusInListener packetstatusinlistener) {
-			this.packetstatusinlistener = packetstatusinlistener;
-		}
-
-		@Override
-		protected void compute() {
-			a_task(packetstatusinlistener);
-		}
-
-	}
-
-	@Override
-	public void a(PacketStatusInListener packetstatusinlistener) {
-		if (de.minetick.MigotConfig.enabledForkPing) {
-			InTask a_task = new InTask(packetstatusinlistener);
-			a_task.fork();
-		} else {
-			packetstatusinlistener.a(this);
-		}
-	}
-
-	public void a_task(PacketStatusInListener packetstatusinlistener) {
-		packetstatusinlistener.a(this);
-	}
-
-}
diff --git a/src/main/java/net/minecraft/server/PacketStatusListener.java b/src/main/java/net/minecraft/server/PacketStatusListener.java
index 0cf92e1..3fc0b0c 100644
--- a/src/main/java/net/minecraft/server/PacketStatusListener.java
+++ b/src/main/java/net/minecraft/server/PacketStatusListener.java
@@ -2,6 +2,7 @@ package net.minecraft.server;
 
 import java.net.InetSocketAddress;
 import java.util.Iterator;
+import java.util.concurrent.RecursiveAction;
 
 import org.bukkit.craftbukkit.util.CraftIconCache;
 import org.bukkit.entity.Player;
@@ -22,13 +23,36 @@ public class PacketStatusListener implements PacketStatusInListener {
 		this.minecraftServer = minecraftserver;
 		this.networkManager = networkmanager;
 	}
-
+	
 	@Override
 	public void a(IChatBaseComponent ichatbasecomponent) {
 	}
+	
+	class StatusTask extends RecursiveAction {
+		PacketStatusInStart packetstatusinstart;
+
+		StatusTask(PacketStatusInStart packetstatusinstart) {
+			this.packetstatusinstart = packetstatusinstart;
+		}
+
+		@Override
+		protected void compute() {
+			a_task(packetstatusinstart);
+		}
+
+	}
 
 	@Override
 	public void a(PacketStatusInStart packetstatusinstart) {
+		if (de.minetick.MigotConfig.enabledForkPing) {
+			StatusTask a_task = new StatusTask(packetstatusinstart);
+			a_task.fork();
+		} else {
+			a_task(packetstatusinstart);
+		}
+	}
+	
+	public void a_task(PacketStatusInStart packetstatusinstart) {
 		if (this.d) {
 			this.networkManager.close(PacketStatusListener.a);
 		} else {
diff --git a/src/main/java/net/minecraft/server/PlayerConnection.java b/src/main/java/net/minecraft/server/PlayerConnection.java
index 2bf92cd..4a85b45 100644
--- a/src/main/java/net/minecraft/server/PlayerConnection.java
+++ b/src/main/java/net/minecraft/server/PlayerConnection.java
@@ -1231,8 +1231,8 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
 		}
 
 	}
-
-	/*
+	
+	// Torch start
 	class SendTask extends RecursiveAction {
 		Packet<?> packet;
 
@@ -1247,12 +1247,19 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
 	}
 
 	public void sendPacket(Packet<?> packet) {
+		if (packet == null || this.processedDisconnect) { // Spigot
+			return;
+		}
+		if (packet instanceof PacketPlayOutRespawn) {
+			this.networkManager.sendPacket(packet);
+			return;
+		}
+		
 		SendTask task = new SendTask(packet);
 		task.fork();
 	}
-	*/
-
-	public void sendPacket(final Packet<?> packet) {
+	
+	public void sendPacket_sub(final Packet<?> packet) {
 		if (packet instanceof PacketPlayOutChat) {
 			PacketPlayOutChat packetplayoutchat = (PacketPlayOutChat) packet;
 			EntityHuman.EnumChatVisibility entityhuman_enumchatvisibility = this.player.getChatFlags();
@@ -1267,12 +1274,10 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
 		}
 
 		// CraftBukkit start
-		if (packet == null || this.processedDisconnect) { // Spigot
-			return;
-		} else if (packet instanceof PacketPlayOutSpawnPosition) {
+		// Torch end
+		if (packet instanceof PacketPlayOutSpawnPosition) {
 			PacketPlayOutSpawnPosition packet6 = (PacketPlayOutSpawnPosition) packet;
-			this.player.compassTarget = new Location(this.getPlayer().getWorld(), packet6.position.getX(),
-					packet6.position.getY(), packet6.position.getZ());
+			this.player.compassTarget = new Location(this.getPlayer().getWorld(), packet6.position.getX(), packet6.position.getY(), packet6.position.getZ());
 		}
 		// CraftBukkit end
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftZombie.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftZombie.java
index 9dd904a..6c44dee 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftZombie.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftZombie.java
@@ -63,8 +63,7 @@ public class CraftZombie extends CraftMonster implements Zombie {
 
 	@Override
 	public Villager.Profession getVillagerProfession() {
-		// if (!isVillager()) return null; // Torch - better map Zombie/Villager
-		// professions.
-		return Villager.Profession.getProfession(getHandle().getVillagerType());
+		if (!isVillager()) return null;
+        return Villager.Profession.getProfession(getHandle().getVillagerType());
 	}
 }
-- 
2.8.2.windows.1

