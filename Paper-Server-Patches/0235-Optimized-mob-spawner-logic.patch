From 8bc0fec5649dd375e441fcdd6e9d863eda67cba0 Mon Sep 17 00:00:00 2001
From: SotrForgotten <i@omc.hk>
Date: Sat, 13 Aug 2016 13:12:49 +0800
Subject: [PATCH] Optimized mob spawner logic


diff --git a/src/main/java/net/minecraft/server/LoginListener.java b/src/main/java/net/minecraft/server/LoginListener.java
index e7df757..50da499 100644
--- a/src/main/java/net/minecraft/server/LoginListener.java
+++ b/src/main/java/net/minecraft/server/LoginListener.java
@@ -77,12 +77,6 @@ public class LoginListener implements PacketLoginInListener, ITickable {
 	}
 
 	public void disconnect(String s) {
-		// Torch start - postpone disconnect until after pre-login event
-		if (!this.preLoginEventFired) {
-			this.disconnectReason = s;
-			return;
-		}
-		// Torch end
 		try {
 			LoginListener.c.info("Disconnecting " + this.d() + ": " + s);
 			ChatComponentText chatcomponenttext = new ChatComponentText(s);
@@ -257,17 +251,15 @@ public class LoginListener implements PacketLoginInListener, ITickable {
 						if (LoginListener.this.i != null) {
 							// CraftBukkit start - fire PlayerPreLoginEvent
 							if (!networkManager.isConnected()) {
-								return; // Ensure player is still connected
-							}
-							LoginListener.c.info("UUID of player " + LoginListener.this.i.getName() + " is "
-									+ LoginListener.this.i.getId());
-							// new LoginHandler().fireEvents(); // Torch - use
+                                return;
+                            }
+
+                            new LoginHandler().fireEvents();
 							// our call event
 						} else if (LoginListener.this.server.R()) {
 							LoginListener.c.warn("Failed to verify username but will let them in anyway!");
 							LoginListener.this.i = LoginListener.this.a(gameprofile);
-							// LoginListener.this.g =
-							// LoginListener.EnumProtocolState.READY_TO_ACCEPT;
+							LoginListener.this.g = LoginListener.EnumProtocolState.READY_TO_ACCEPT;
 						} else {
 							LoginListener.this.disconnect("Failed to verify username!");
 							LoginListener.c.error(
@@ -281,8 +273,7 @@ public class LoginListener implements PacketLoginInListener, ITickable {
 						if (LoginListener.this.server.R()) {
 							LoginListener.c.warn("Authentication servers are down but will let them in anyway!");
 							LoginListener.this.i = LoginListener.this.a(gameprofile);
-							// LoginListener.this.g =
-							// LoginListener.EnumProtocolState.READY_TO_ACCEPT;
+							LoginListener.this.g = LoginListener.EnumProtocolState.READY_TO_ACCEPT;
 						} else {
 							LoginListener.this
 									.disconnect("Authentication servers are down. Please try again later, sorry!");
@@ -296,7 +287,6 @@ public class LoginListener implements PacketLoginInListener, ITickable {
 						// CraftBukkit end
 					}
 
-					callPreLoginEvent(); // Torch
 				}
 			}).start();
 		}
@@ -394,8 +384,7 @@ public class LoginListener implements PacketLoginInListener, ITickable {
 			// CraftBukkit end
 			LoginListener.c
 					.info("UUID of player " + LoginListener.this.i.getName() + " is " + LoginListener.this.i.getId());
-			// LoginListener.this.g =
-			// LoginListener.EnumProtocolState.READY_TO_ACCEPT;
+			LoginListener.this.g = LoginListener.EnumProtocolState.READY_TO_ACCEPT;
 		}
 	}
 	// Spigot end
diff --git a/src/main/java/net/minecraft/server/MobSpawnerAbstract.java b/src/main/java/net/minecraft/server/MobSpawnerAbstract.java
index ec0fa49..44c4fc2 100644
--- a/src/main/java/net/minecraft/server/MobSpawnerAbstract.java
+++ b/src/main/java/net/minecraft/server/MobSpawnerAbstract.java
@@ -45,6 +45,7 @@ public abstract class MobSpawnerAbstract {
 																												// filter
 	}
 
+	// Torch start
 	public void c() {
 		// Paper start - Configurable mob spawner tick rate
 		if (spawnDelay > 0 && --tickDelay > 0) {
@@ -52,113 +53,60 @@ public abstract class MobSpawnerAbstract {
 		}
 		tickDelay = this.a().paperConfig.mobSpawnerTickRate;
 		// Paper end
-		if (!this.h()) {
+		
+		if (this.spawnDelay < -tickDelay) { // Paper
+            this.i();
+        }
+		if (this.spawnDelay > 0) {
+            this.spawnDelay -= tickDelay; // Paper
+            return;
+        }
+        if (!this.h()) {
 			this.e = this.d;
-		} else {
-			BlockPosition blockposition = this.b();
-
-			if (this.a().isClientSide) {
-				double d0 = blockposition.getX() + this.a().random.nextFloat();
-				double d1 = blockposition.getY() + this.a().random.nextFloat();
-				double d2 = blockposition.getZ() + this.a().random.nextFloat();
-
-				this.a().addParticle(EnumParticle.SMOKE_NORMAL, d0, d1, d2, 0.0D, 0.0D, 0.0D, new int[0]);
-				this.a().addParticle(EnumParticle.FLAME, d0, d1, d2, 0.0D, 0.0D, 0.0D, new int[0]);
-				if (this.spawnDelay > 0) {
-					this.spawnDelay -= tickDelay; // Paper
-				}
-
-				this.e = this.d;
-				this.d = (this.d + 1000.0F / (this.spawnDelay + 200.0F)) % 360.0D;
-			} else {
-				if (this.spawnDelay < -tickDelay) { // Paper
-					this.i();
-				}
-
-				if (this.spawnDelay > 0) {
-					this.spawnDelay -= tickDelay; // Paper
-					return;
-				}
+            this.i();
+            return;
+        }
+		
+		World world = this.a();
+		BlockPosition blockposition = this.b();
+		
+        for (int i = 0; i < this.spawnCount; ++i) {
+            Entity entity = EntityTypes.createEntityByName(this.getMobName(), this.a());
+			 
+			if (entity == null) {
+                return;
+            }
+			
+			int k = world.a(entity.getClass(), (new AxisAlignedBB(blockposition.getX(), blockposition.getY(), blockposition.getZ(), blockposition.getX() + 1, blockposition.getY() + 1, blockposition.getZ() + 1)).g(this.spawnRange)).size();
+			
+			if (k >= this.maxNearbyEntities) {
+				this.i();
+				return;
+			}
 
-				boolean flag = false;
-
-				for (int i = 0; i < this.spawnCount; ++i) {
-					NBTTagCompound nbttagcompound = this.spawnData.b();
-					NBTTagList nbttaglist = nbttagcompound.getList("Pos", 6);
-					World world = this.a();
-					int j = nbttaglist.size();
-					double d3 = j >= 1 ? nbttaglist.e(0)
-							: blockposition.getX()
-									+ (world.random.nextDouble() - world.random.nextDouble()) * this.spawnRange + 0.5D;
-					double d4 = j >= 2 ? nbttaglist.e(1)
-							: (double) (blockposition.getY() + world.random.nextInt(3) - 1);
-					double d5 = j >= 3 ? nbttaglist.e(2)
-							: blockposition.getZ()
-									+ (world.random.nextDouble() - world.random.nextDouble()) * this.spawnRange + 0.5D;
-					Entity entity = ChunkRegionLoader.a(nbttagcompound, world, d3, d4, d5, false);
-
-					if (entity == null) {
-						return;
-					}
-
-					int k = world.a(entity.getClass(),
-							(new AxisAlignedBB(blockposition.getX(), blockposition.getY(), blockposition.getZ(),
-									blockposition.getX() + 1, blockposition.getY() + 1, blockposition.getZ() + 1))
-											.g(this.spawnRange))
-							.size();
-
-					if (k >= this.maxNearbyEntities) {
-						this.i();
-						return;
-					}
-
-					EntityInsentient entityinsentient = entity instanceof EntityInsentient ? (EntityInsentient) entity
-							: null;
-
-					entity.setPositionRotation(entity.locX, entity.locY, entity.locZ, world.random.nextFloat() * 360.0F,
-							0.0F);
-					if (entityinsentient == null || entityinsentient.cG() && entityinsentient.canSpawn()) {
-						if (this.spawnData.b().d() == 1 && this.spawnData.b().hasKeyOfType("id", 8)
-								&& entity instanceof EntityInsentient) {
-							((EntityInsentient) entity).prepare(world.D(new BlockPosition(entity)),
-									(GroupDataEntity) null);
-						}
-						// Spigot Start
-						if (entity.world.spigotConfig.nerfSpawnerMobs) {
-							entity.fromMobSpawner = true;
-						}
-						if (org.bukkit.craftbukkit.event.CraftEventFactory.callSpawnerSpawnEvent(entity, blockposition)
-								.isCancelled()) {
-							continue;
-						}
-						// Spigot End
-						ChunkRegionLoader.a(entity, world,
-								org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.SPAWNER); // CraftBukkit
-						world.triggerEffect(2004, blockposition, 0);
-						if (entityinsentient != null) {
-							entityinsentient.doSpawnEffect();
-						}
-
-						flag = true;
-					}
+            EntityInsentient entityinsentient = entity instanceof EntityInsentient ? (EntityInsentient) entity : null;
+			entity.setPositionRotation(entity.locX, entity.locY, entity.locZ, world.random.nextFloat() * 360.0F, 0.0F);
+			
+            if (entityinsentient == null || entityinsentient.cG() && entityinsentient.canSpawn()) {
+                // Spigot Start
+				if (entity.world.spigotConfig.nerfSpawnerMobs) {
+					entity.fromMobSpawner = true;
 				}
-
-				if (flag) {
-					this.i();
+				if (org.bukkit.craftbukkit.event.CraftEventFactory.callSpawnerSpawnEvent(entity, blockposition).isCancelled()) {
+					continue;
 				}
-				// Migot start
-				else {
-					this.spawnDelay += this.spawningPenalty;
-					if (this.spawningPenalty < 40) {
-						this.spawningPenalty++;
-					}
+				// Spigot End
+				ChunkRegionLoader.a(entity, world, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.SPAWNER); // CraftBukkit
+                world.triggerEffect(2004, blockposition, 0);
+                if (entityinsentient != null) {
+                    entityinsentient.doSpawnEffect();
 				}
-				// Migot end
-
-			}
-
-		}
+            }
+        }
+		
+        this.i();
 	}
+	// Torch end
 
 	private void i() {
 		if (this.maxSpawnDelay <= this.minSpawnDelay) {
diff --git a/src/main/java/net/minecraft/server/PlayerConnection.java b/src/main/java/net/minecraft/server/PlayerConnection.java
index fa18fde..016616a 100644
--- a/src/main/java/net/minecraft/server/PlayerConnection.java
+++ b/src/main/java/net/minecraft/server/PlayerConnection.java
@@ -400,13 +400,6 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
 				// d10 = d6 * d6 + d7 * d7 + d8 * d8;
 				boolean flag1 = false;
 
-				/*
-				 * if (d10 > org.spigotmc.SpigotConfig.movedWronglyThreshold) {
-				 * // Spigot flag1 = true;
-				 * PlayerConnection.LOGGER.warn(entity.getName() +
-				 * " moved wrongly!"); }
-				 */
-
 				entity.setLocation(d3, d4, d5, f, f1);
 				boolean flag2 = worldserver.getCubes(entity, entity.getBoundingBox().shrink(0.0625D)).isEmpty();
 
@@ -656,18 +649,6 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
 						// d11 = d7 * d7 + d8 * d8 + d9 * d9;
 						boolean flag1 = false;
 
-						/*
-						 * if (!this.player.K() && d11 >
-						 * org.spigotmc.SpigotConfig.movedWronglyThreshold &&
-						 * !this.player.isSleeping() &&
-						 * !this.player.playerInteractManager.isCreative() &&
-						 * this.player.playerInteractManager.getGameMode() !=
-						 * WorldSettings.EnumGamemode.SPECTATOR) { // Spigot
-						 * flag1 = true;
-						 * PlayerConnection.LOGGER.warn(this.player.getName() +
-						 * " moved wrongly!"); }
-						 */
-
 						this.player.setLocation(d4, d5, d6, f, f1);
 						this.player.checkMovement(this.player.locX - d0, this.player.locY - d1, this.player.locZ - d2);
 						if (!this.player.noclip && !this.player.isSleeping()) {
-- 
2.8.2.windows.1

