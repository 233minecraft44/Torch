From e7347c6c654f0947caa4f761b46c991e3db319f1 Mon Sep 17 00:00:00 2001
From: SotrForgotten <i@omc.hk>
Date: Sat, 13 Aug 2016 13:12:49 +0800
Subject: [PATCH] Optimized mob spawner logic


diff --git a/pom.xml b/pom.xml
index 510a5c2..66f0c48 100644
--- a/pom.xml
+++ b/pom.xml
@@ -77,7 +77,7 @@
         <dependency>
             <groupId>mysql</groupId>
             <artifactId>mysql-connector-java</artifactId>
-            <version>5.1.39</version>
+            <version>5.1.37</version>
             <scope>compile</scope>
         </dependency>
         <dependency>
@@ -99,7 +99,7 @@
         <dependency>
             <groupId>org.projectlombok</groupId>
             <artifactId>lombok</artifactId>
-            <version>1.16.8</version>
+            <version>1.16.10</version>
             <scope>provided</scope>
             <!-- They aren't required to use lombok -->
             <optional>true</optional>
diff --git a/src/main/java/co/aikar/timings/TimingHandler.java b/src/main/java/co/aikar/timings/TimingHandler.java
index 10d9065..85ece22 100644
--- a/src/main/java/co/aikar/timings/TimingHandler.java
+++ b/src/main/java/co/aikar/timings/TimingHandler.java
@@ -110,8 +110,7 @@ class TimingHandler implements Timing {
 	public void stopTiming() {
 		if (enabled && --timingDepth == 0 && start != 0) {
 			if (!Bukkit.isPrimaryThread()) {
-				// Bukkit.getLogger().log(Level.SEVERE, "Timing issue occour in
-				// " + name + ", please report it to Torch!");
+				// Bukkit.getLogger().log(Level.SEVERE, "Timing issue occour in" + name + ", please report it to Torch!");
 				// new Throwable().printStackTrace();
 				synchronized (this) {
 					addDiff(System.nanoTime() - start);
diff --git a/src/main/java/de/minetick/MigotConfig.java b/src/main/java/de/minetick/MigotConfig.java
index 7690504..91866d3 100644
--- a/src/main/java/de/minetick/MigotConfig.java
+++ b/src/main/java/de/minetick/MigotConfig.java
@@ -55,6 +55,7 @@ public class MigotConfig {
 		disableMods = configuration.getStringList("fml.disabled-mods");
 		requisiteMods = configuration.getStringList("fml.requisite-mods");
 		kickInfo = configuration.getString("fml.kick-info", "Mod {MOD} is not allwoed in the server!");
+		enableVelocityWarning = configuration.getBoolean("settings.enable-velocity-warn", true);
 	}
 
 	private FileConfiguration loadConfig(File file) throws IOException, InvalidConfigurationException {
@@ -90,5 +91,7 @@ public class MigotConfig {
 	public static String kickInfo;
 	// Sleep checking
 	public static boolean disableSleepChecking;
+	// Velocity warnings
+	public static boolean enableVelocityWarning;
 
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/server/Chunk.java b/src/main/java/net/minecraft/server/Chunk.java
index 50ec2bc..d30d15b 100644
--- a/src/main/java/net/minecraft/server/Chunk.java
+++ b/src/main/java/net/minecraft/server/Chunk.java
@@ -1212,9 +1212,7 @@ public class Chunk {
 			 * the World constructor. We can't reliably alter that, so we have
 			 * no way of creating a CraftWorld/CraftServer at that point.
 			 */
-			synchronized (this) {
-				server.getPluginManager().callEvent(new org.bukkit.event.world.ChunkLoadEvent(bukkitChunk, newChunk));
-			}
+			synchronized(this) { server.getPluginManager().callEvent(new org.bukkit.event.world.ChunkLoadEvent(bukkitChunk, newChunk)); }
 		}
 
 		// Update neighbor counts
diff --git a/src/main/java/net/minecraft/server/LoginListener.java b/src/main/java/net/minecraft/server/LoginListener.java
index e7df757..50da499 100644
--- a/src/main/java/net/minecraft/server/LoginListener.java
+++ b/src/main/java/net/minecraft/server/LoginListener.java
@@ -77,12 +77,6 @@ public class LoginListener implements PacketLoginInListener, ITickable {
 	}
 
 	public void disconnect(String s) {
-		// Torch start - postpone disconnect until after pre-login event
-		if (!this.preLoginEventFired) {
-			this.disconnectReason = s;
-			return;
-		}
-		// Torch end
 		try {
 			LoginListener.c.info("Disconnecting " + this.d() + ": " + s);
 			ChatComponentText chatcomponenttext = new ChatComponentText(s);
@@ -257,17 +251,15 @@ public class LoginListener implements PacketLoginInListener, ITickable {
 						if (LoginListener.this.i != null) {
 							// CraftBukkit start - fire PlayerPreLoginEvent
 							if (!networkManager.isConnected()) {
-								return; // Ensure player is still connected
-							}
-							LoginListener.c.info("UUID of player " + LoginListener.this.i.getName() + " is "
-									+ LoginListener.this.i.getId());
-							// new LoginHandler().fireEvents(); // Torch - use
+                                return;
+                            }
+
+                            new LoginHandler().fireEvents();
 							// our call event
 						} else if (LoginListener.this.server.R()) {
 							LoginListener.c.warn("Failed to verify username but will let them in anyway!");
 							LoginListener.this.i = LoginListener.this.a(gameprofile);
-							// LoginListener.this.g =
-							// LoginListener.EnumProtocolState.READY_TO_ACCEPT;
+							LoginListener.this.g = LoginListener.EnumProtocolState.READY_TO_ACCEPT;
 						} else {
 							LoginListener.this.disconnect("Failed to verify username!");
 							LoginListener.c.error(
@@ -281,8 +273,7 @@ public class LoginListener implements PacketLoginInListener, ITickable {
 						if (LoginListener.this.server.R()) {
 							LoginListener.c.warn("Authentication servers are down but will let them in anyway!");
 							LoginListener.this.i = LoginListener.this.a(gameprofile);
-							// LoginListener.this.g =
-							// LoginListener.EnumProtocolState.READY_TO_ACCEPT;
+							LoginListener.this.g = LoginListener.EnumProtocolState.READY_TO_ACCEPT;
 						} else {
 							LoginListener.this
 									.disconnect("Authentication servers are down. Please try again later, sorry!");
@@ -296,7 +287,6 @@ public class LoginListener implements PacketLoginInListener, ITickable {
 						// CraftBukkit end
 					}
 
-					callPreLoginEvent(); // Torch
 				}
 			}).start();
 		}
@@ -394,8 +384,7 @@ public class LoginListener implements PacketLoginInListener, ITickable {
 			// CraftBukkit end
 			LoginListener.c
 					.info("UUID of player " + LoginListener.this.i.getName() + " is " + LoginListener.this.i.getId());
-			// LoginListener.this.g =
-			// LoginListener.EnumProtocolState.READY_TO_ACCEPT;
+			LoginListener.this.g = LoginListener.EnumProtocolState.READY_TO_ACCEPT;
 		}
 	}
 	// Spigot end
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 614847a..5d244f4 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -386,7 +386,6 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
 		// CraftBukkit end
 		this.v.setPlayerFileData(this.worldServer);
 		this.a(this.getDifficulty());
-
 		this.l();
 	}
 
@@ -934,9 +933,7 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
 		MinecraftTimings.processQueueTimer.stopTiming(); // Spigot
 
 		MinecraftTimings.chunkIOTickTimer.startTiming(); // Spigot
-		synchronized (this) {
-			org.bukkit.craftbukkit.chunkio.ChunkIOExecutor.tick();
-		}
+		synchronized (this) { org.bukkit.craftbukkit.chunkio.ChunkIOExecutor.tick(); }
 		MinecraftTimings.chunkIOTickTimer.stopTiming(); // Spigot
 
 		MinecraftTimings.timeUpdateTimer.startTiming(); // Spigot
diff --git a/src/main/java/net/minecraft/server/MobSpawnerAbstract.java b/src/main/java/net/minecraft/server/MobSpawnerAbstract.java
index ec0fa49..44c4fc2 100644
--- a/src/main/java/net/minecraft/server/MobSpawnerAbstract.java
+++ b/src/main/java/net/minecraft/server/MobSpawnerAbstract.java
@@ -45,6 +45,7 @@ public abstract class MobSpawnerAbstract {
 																												// filter
 	}
 
+	// Torch start
 	public void c() {
 		// Paper start - Configurable mob spawner tick rate
 		if (spawnDelay > 0 && --tickDelay > 0) {
@@ -52,113 +53,60 @@ public abstract class MobSpawnerAbstract {
 		}
 		tickDelay = this.a().paperConfig.mobSpawnerTickRate;
 		// Paper end
-		if (!this.h()) {
+		
+		if (this.spawnDelay < -tickDelay) { // Paper
+            this.i();
+        }
+		if (this.spawnDelay > 0) {
+            this.spawnDelay -= tickDelay; // Paper
+            return;
+        }
+        if (!this.h()) {
 			this.e = this.d;
-		} else {
-			BlockPosition blockposition = this.b();
-
-			if (this.a().isClientSide) {
-				double d0 = blockposition.getX() + this.a().random.nextFloat();
-				double d1 = blockposition.getY() + this.a().random.nextFloat();
-				double d2 = blockposition.getZ() + this.a().random.nextFloat();
-
-				this.a().addParticle(EnumParticle.SMOKE_NORMAL, d0, d1, d2, 0.0D, 0.0D, 0.0D, new int[0]);
-				this.a().addParticle(EnumParticle.FLAME, d0, d1, d2, 0.0D, 0.0D, 0.0D, new int[0]);
-				if (this.spawnDelay > 0) {
-					this.spawnDelay -= tickDelay; // Paper
-				}
-
-				this.e = this.d;
-				this.d = (this.d + 1000.0F / (this.spawnDelay + 200.0F)) % 360.0D;
-			} else {
-				if (this.spawnDelay < -tickDelay) { // Paper
-					this.i();
-				}
-
-				if (this.spawnDelay > 0) {
-					this.spawnDelay -= tickDelay; // Paper
-					return;
-				}
+            this.i();
+            return;
+        }
+		
+		World world = this.a();
+		BlockPosition blockposition = this.b();
+		
+        for (int i = 0; i < this.spawnCount; ++i) {
+            Entity entity = EntityTypes.createEntityByName(this.getMobName(), this.a());
+			 
+			if (entity == null) {
+                return;
+            }
+			
+			int k = world.a(entity.getClass(), (new AxisAlignedBB(blockposition.getX(), blockposition.getY(), blockposition.getZ(), blockposition.getX() + 1, blockposition.getY() + 1, blockposition.getZ() + 1)).g(this.spawnRange)).size();
+			
+			if (k >= this.maxNearbyEntities) {
+				this.i();
+				return;
+			}
 
-				boolean flag = false;
-
-				for (int i = 0; i < this.spawnCount; ++i) {
-					NBTTagCompound nbttagcompound = this.spawnData.b();
-					NBTTagList nbttaglist = nbttagcompound.getList("Pos", 6);
-					World world = this.a();
-					int j = nbttaglist.size();
-					double d3 = j >= 1 ? nbttaglist.e(0)
-							: blockposition.getX()
-									+ (world.random.nextDouble() - world.random.nextDouble()) * this.spawnRange + 0.5D;
-					double d4 = j >= 2 ? nbttaglist.e(1)
-							: (double) (blockposition.getY() + world.random.nextInt(3) - 1);
-					double d5 = j >= 3 ? nbttaglist.e(2)
-							: blockposition.getZ()
-									+ (world.random.nextDouble() - world.random.nextDouble()) * this.spawnRange + 0.5D;
-					Entity entity = ChunkRegionLoader.a(nbttagcompound, world, d3, d4, d5, false);
-
-					if (entity == null) {
-						return;
-					}
-
-					int k = world.a(entity.getClass(),
-							(new AxisAlignedBB(blockposition.getX(), blockposition.getY(), blockposition.getZ(),
-									blockposition.getX() + 1, blockposition.getY() + 1, blockposition.getZ() + 1))
-											.g(this.spawnRange))
-							.size();
-
-					if (k >= this.maxNearbyEntities) {
-						this.i();
-						return;
-					}
-
-					EntityInsentient entityinsentient = entity instanceof EntityInsentient ? (EntityInsentient) entity
-							: null;
-
-					entity.setPositionRotation(entity.locX, entity.locY, entity.locZ, world.random.nextFloat() * 360.0F,
-							0.0F);
-					if (entityinsentient == null || entityinsentient.cG() && entityinsentient.canSpawn()) {
-						if (this.spawnData.b().d() == 1 && this.spawnData.b().hasKeyOfType("id", 8)
-								&& entity instanceof EntityInsentient) {
-							((EntityInsentient) entity).prepare(world.D(new BlockPosition(entity)),
-									(GroupDataEntity) null);
-						}
-						// Spigot Start
-						if (entity.world.spigotConfig.nerfSpawnerMobs) {
-							entity.fromMobSpawner = true;
-						}
-						if (org.bukkit.craftbukkit.event.CraftEventFactory.callSpawnerSpawnEvent(entity, blockposition)
-								.isCancelled()) {
-							continue;
-						}
-						// Spigot End
-						ChunkRegionLoader.a(entity, world,
-								org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.SPAWNER); // CraftBukkit
-						world.triggerEffect(2004, blockposition, 0);
-						if (entityinsentient != null) {
-							entityinsentient.doSpawnEffect();
-						}
-
-						flag = true;
-					}
+            EntityInsentient entityinsentient = entity instanceof EntityInsentient ? (EntityInsentient) entity : null;
+			entity.setPositionRotation(entity.locX, entity.locY, entity.locZ, world.random.nextFloat() * 360.0F, 0.0F);
+			
+            if (entityinsentient == null || entityinsentient.cG() && entityinsentient.canSpawn()) {
+                // Spigot Start
+				if (entity.world.spigotConfig.nerfSpawnerMobs) {
+					entity.fromMobSpawner = true;
 				}
-
-				if (flag) {
-					this.i();
+				if (org.bukkit.craftbukkit.event.CraftEventFactory.callSpawnerSpawnEvent(entity, blockposition).isCancelled()) {
+					continue;
 				}
-				// Migot start
-				else {
-					this.spawnDelay += this.spawningPenalty;
-					if (this.spawningPenalty < 40) {
-						this.spawningPenalty++;
-					}
+				// Spigot End
+				ChunkRegionLoader.a(entity, world, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.SPAWNER); // CraftBukkit
+                world.triggerEffect(2004, blockposition, 0);
+                if (entityinsentient != null) {
+                    entityinsentient.doSpawnEffect();
 				}
-				// Migot end
-
-			}
-
-		}
+            }
+        }
+		
+        this.i();
 	}
+	// Torch end
 
 	private void i() {
 		if (this.maxSpawnDelay <= this.minSpawnDelay) {
diff --git a/src/main/java/net/minecraft/server/NBTTagCompound.java b/src/main/java/net/minecraft/server/NBTTagCompound.java
index 327c8fd..dfd279b 100644
--- a/src/main/java/net/minecraft/server/NBTTagCompound.java
+++ b/src/main/java/net/minecraft/server/NBTTagCompound.java
@@ -9,7 +9,6 @@ import java.util.Map.Entry;
 import java.util.Set;
 import java.util.UUID;
 import java.util.concurrent.ConcurrentHashMap;
-
 import javax.annotation.Nullable;
 
 public class NBTTagCompound extends NBTBase {
diff --git a/src/main/java/net/minecraft/server/NetworkManager.java b/src/main/java/net/minecraft/server/NetworkManager.java
index e71a6a9..36f3e8e 100644
--- a/src/main/java/net/minecraft/server/NetworkManager.java
+++ b/src/main/java/net/minecraft/server/NetworkManager.java
@@ -157,35 +157,7 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet<?>> {
 	}
 
 	public void sendPacket(Packet<?> packet) {
-		if (this.isConnected() && this.m()
-				&& !(packet instanceof PacketPlayOutMapChunk && !((PacketPlayOutMapChunk) packet).isReady())) { // Paper
-																												// -
-																												// Async-Anti-Xray
-																												// -
-																												// Add
-																												// not
-																												// ready
-																												// chunk
-																												// packets
-																												// and
-																												// all
-																												// packets
-																												// if
-																												// the
-																												// queue
-																												// contains
-																												// a
-																												// not
-																												// ready
-																												// chunk
-																												// packet
-																												// to
-																												// the
-																												// queue
-																												// to
-																												// keep
-																												// the
-																												// packet-order
+		if (this.isConnected() && this.m() && !(packet instanceof PacketPlayOutMapChunk && !((PacketPlayOutMapChunk) packet).isReady())) { // Paper
 			// this.m(); // Paper - Async-Anti-Xray - Move to if-statement
 			this.a(packet, (GenericFutureListener[]) null);
 		} else {
@@ -201,37 +173,9 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet<?>> {
 	}
 
 	public void sendPacket(Packet<?> packet,
-			GenericFutureListener<? extends Future<? super Void>> genericfuturelistener,
-			GenericFutureListener<? extends Future<? super Void>>... agenericfuturelistener) {
-		if (this.isConnected() && this.m()
-				&& !(packet instanceof PacketPlayOutMapChunk && !((PacketPlayOutMapChunk) packet).isReady())) { // Paper
-																												// -
-																												// Async-Anti-Xray
-																												// -
-																												// Add
-																												// not
-																												// ready
-																												// chunk
-																												// packets
-																												// and
-																												// all
-																												// packets
-																												// if
-																												// the
-																												// queue
-																												// contains
-																												// a
-																												// not
-																												// ready
-																												// chunk
-																												// packet
-																												// to
-																												// the
-																												// queue
-																												// to
-																												// keep
-																												// the
-																												// packet-order
+		GenericFutureListener<? extends Future<? super Void>> genericfuturelistener,
+		GenericFutureListener<? extends Future<? super Void>>... agenericfuturelistener) {
+		if (this.isConnected() && this.m() && !(packet instanceof PacketPlayOutMapChunk && !((PacketPlayOutMapChunk) packet).isReady())) { // Paper
 			// this.m(); // Paper - Async-Anti-Xray - Move to if-statement
 			this.a(packet, ArrayUtils.add(agenericfuturelistener, 0, genericfuturelistener));
 		} else {
@@ -290,44 +234,16 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet<?>> {
 
 	}
 
-	private boolean m() { // Paper - Async-Anti-Xray - void -> boolean used in
-							// sendPacket
+	private boolean m() { // Paper - Async-Anti-Xray - void -> boolean used in sendPacket
 		if (this.channel != null && this.channel.isOpen()) {
 			this.j.readLock().lock();
 
 			try {
 				while (!this.i.isEmpty()) {
 					NetworkManager.QueuedPacket networkmanager_queuedpacket = this.i.peek(); // Paper
-																								// -
-																								// Async-Anti-Xray
-																								// -
-																								// poll()
-																								// ->
-																								// peek()
-
-					if (networkmanager_queuedpacket != null) { // Paper -
-																// Aync-Anti-Xray
-																// - Fix NPE
-																// (possible
-																// vanilla bug
-																// caused by
-																// handleDisconnection())
+					if (networkmanager_queuedpacket != null) { // Paper
 						if (networkmanager_queuedpacket.a instanceof PacketPlayOutMapChunk
 								&& !((PacketPlayOutMapChunk) networkmanager_queuedpacket.a).isReady()) { // Paper
-																											// -
-																											// Async-Anti-Xray
-																											// -
-																											// Return
-																											// false
-																											// if
-																											// the
-																											// queue
-																											// contains
-																											// a
-																											// not
-																											// ready
-																											// chunk
-																											// packet
 							return false; // Paper - Aync-Anti-Xray
 						} else {
 							this.i.poll(); // Paper - Async-Anti-Xray - poll()
@@ -352,9 +268,7 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet<?>> {
 	}
 
 	public void a() {
-		synchronized (this) {
-			this.m();
-		}
+		this.m();
 		if (this.m instanceof ITickable) {
 			((ITickable) this.m).c();
 		}
diff --git a/src/main/java/net/minecraft/server/PersistentVillage.java b/src/main/java/net/minecraft/server/PersistentVillage.java
index 29a1fb0..67357bc 100644
--- a/src/main/java/net/minecraft/server/PersistentVillage.java
+++ b/src/main/java/net/minecraft/server/PersistentVillage.java
@@ -9,9 +9,9 @@ import com.google.common.collect.Lists;
 public class PersistentVillage extends PersistentBase {
 
 	private World world;
-	private final List<BlockPosition> c = new CopyOnWriteArrayList<BlockPosition>();
-	private final List<VillageDoor> d = new CopyOnWriteArrayList<VillageDoor>();
-	private final List<Village> villages = Lists.newArrayList(); // COWIterator
+	private final List<BlockPosition> c = Lists.newArrayList();
+    private final List<VillageDoor> d = Lists.newArrayList();
+    private final List<Village> villages = Lists.newArrayList();
 	private int time;
 
 	public PersistentVillage(String s) {
diff --git a/src/main/java/net/minecraft/server/PlayerConnection.java b/src/main/java/net/minecraft/server/PlayerConnection.java
index fa18fde..5ed6708 100644
--- a/src/main/java/net/minecraft/server/PlayerConnection.java
+++ b/src/main/java/net/minecraft/server/PlayerConnection.java
@@ -400,13 +400,6 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
 				// d10 = d6 * d6 + d7 * d7 + d8 * d8;
 				boolean flag1 = false;
 
-				/*
-				 * if (d10 > org.spigotmc.SpigotConfig.movedWronglyThreshold) {
-				 * // Spigot flag1 = true;
-				 * PlayerConnection.LOGGER.warn(entity.getName() +
-				 * " moved wrongly!"); }
-				 */
-
 				entity.setLocation(d3, d4, d5, f, f1);
 				boolean flag2 = worldserver.getCubes(entity, entity.getBoundingBox().shrink(0.0625D)).isEmpty();
 
@@ -656,18 +649,6 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
 						// d11 = d7 * d7 + d8 * d8 + d9 * d9;
 						boolean flag1 = false;
 
-						/*
-						 * if (!this.player.K() && d11 >
-						 * org.spigotmc.SpigotConfig.movedWronglyThreshold &&
-						 * !this.player.isSleeping() &&
-						 * !this.player.playerInteractManager.isCreative() &&
-						 * this.player.playerInteractManager.getGameMode() !=
-						 * WorldSettings.EnumGamemode.SPECTATOR) { // Spigot
-						 * flag1 = true;
-						 * PlayerConnection.LOGGER.warn(this.player.getName() +
-						 * " moved wrongly!"); }
-						 */
-
 						this.player.setLocation(d4, d5, d6, f, f1);
 						this.player.checkMovement(this.player.locX - d0, this.player.locY - d1, this.player.locZ - d2);
 						if (!this.player.noclip && !this.player.isSleeping()) {
@@ -1250,26 +1231,24 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
 		}
 
 	}
-
+	
 	class SendTask extends RecursiveAction {
 		Packet<?> packet;
-
-		SendTask(Packet<?> packet) {
-			this.packet = packet;
-		}
-
-		@Override
-		protected void compute() {
-			sendPacket_sub(packet);
-		}
-	}
-
+        SendTask(Packet<?> packet) { this.packet = packet; }
+        @Override protected void compute() { sendPacket_sub(packet); }
+    }
+	
 	public void sendPacket(Packet<?> packet) {
 		SendTask task = new SendTask(packet);
 		task.fork();
 	}
 
 	public void sendPacket_sub(final Packet<?> packet) {
+		if (packet instanceof PacketPlayOutUnloadChunk) {
+			synchronized(this) { this.networkManager.sendPacket(packet); }
+			return;
+		}
+		
 		if (packet instanceof PacketPlayOutChat) {
 			PacketPlayOutChat packetplayoutchat = (PacketPlayOutChat) packet;
 			EntityHuman.EnumChatVisibility entityhuman_enumchatvisibility = this.player.getChatFlags();
@@ -1288,8 +1267,7 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
 			return;
 		} else if (packet instanceof PacketPlayOutSpawnPosition) {
 			PacketPlayOutSpawnPosition packet6 = (PacketPlayOutSpawnPosition) packet;
-			this.player.compassTarget = new Location(this.getPlayer().getWorld(), packet6.position.getX(),
-					packet6.position.getY(), packet6.position.getZ());
+			this.player.compassTarget = new Location(this.getPlayer().getWorld(), packet6.position.getX(), packet6.position.getY(), packet6.position.getZ());
 		}
 		// CraftBukkit end
 
diff --git a/src/main/java/net/minecraft/server/Village.java b/src/main/java/net/minecraft/server/Village.java
index dcb66e6..a350816 100644
--- a/src/main/java/net/minecraft/server/Village.java
+++ b/src/main/java/net/minecraft/server/Village.java
@@ -3,7 +3,7 @@ package net.minecraft.server;
 import java.util.Iterator;
 import java.util.List;
 import java.util.UUID;
-import java.util.concurrent.ConcurrentSkipListMap;
+import java.util.TreeMap;
 
 import com.google.common.collect.Lists;
 import com.mojang.authlib.GameProfile;
@@ -19,7 +19,7 @@ public class Village {
 	private int g;
 	private int h;
 	private int i;
-	private ConcurrentSkipListMap<String, Integer> j;
+	private TreeMap<String, Integer> j;
 	private List<Village.Aggressor> k;
 	private int l;
 
@@ -27,14 +27,14 @@ public class Village {
 						// set.
 		this.c = BlockPosition.ZERO;
 		this.d = BlockPosition.ZERO;
-		this.j = new ConcurrentSkipListMap();
+		this.j = new TreeMap();
 		this.k = Lists.newArrayList();
 	}
 
 	public Village(World world) {
 		this.c = BlockPosition.ZERO;
 		this.d = BlockPosition.ZERO;
-		this.j = new ConcurrentSkipListMap();
+		this.j = new TreeMap();
 		this.k = Lists.newArrayList();
 		this.a = world;
 	}
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
index 2271336..1db0295 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
@@ -111,6 +111,8 @@ import net.minecraft.server.EntityWitherSkull;
 import net.minecraft.server.EntityWolf;
 import net.minecraft.server.EntityZombie;
 
+import de.minetick.MigotConfig;
+
 public abstract class CraftEntity implements org.bukkit.entity.Entity {
 	private static PermissibleBase perm;
 
@@ -385,10 +387,8 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
 
 	@Override
 	public void setVelocity(Vector vel) {
-		// Paper start - Warn server owners when plugins try to set super high
-		// velocities
-		if (!(this instanceof org.bukkit.entity.Projectile) && (vel.getX() > 4 || vel.getX() < -4 || vel.getY() > 4
-				|| vel.getY() < -4 || vel.getZ() > 4 || vel.getZ() < -4)) {
+		// Paper start - Warn server owners when plugins try to set super high velocities
+		if (!(this instanceof org.bukkit.entity.Projectile) && (vel.getX() > 4 || vel.getX() < -4 || vel.getY() > 4 || vel.getY() < -4 || vel.getZ() > 4 || vel.getZ() < -4) && MigotConfig.enableVelocityWarning) {
 			getServer().getLogger().warning("Excessive velocity set detected: tried to set velocity of entity #"
 					+ getEntityId() + " to (" + vel.getX() + "," + vel.getY() + "," + vel.getZ() + ").");
 			Thread.dumpStack();
diff --git a/src/main/resources/configurations/migot.yml b/src/main/resources/configurations/migot.yml
index c7428e6..70dc9bf 100644
--- a/src/main/resources/configurations/migot.yml
+++ b/src/main/resources/configurations/migot.yml
@@ -7,6 +7,7 @@ settings:
   auto-save: false
   fork-ping: false
   bungee-redirect-compatible: false
+  enable-velocity-warn: true
 world-settings:
   disable-sleep-checking: false
 fml:
-- 
2.8.2.windows.1

