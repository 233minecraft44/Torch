From c6b5652600cdd8ef2d80908a29d8d6fe0dd880f8 Mon Sep 17 00:00:00 2001
From: SotrForgotten <i@omc.hk>
Date: Fri, 22 Jul 2016 17:00:40 +0800
Subject: [PATCH] Fall back to name if skull has no uuid when getting player,
 also fix sign bug


diff --git a/pom.xml b/pom.xml
index d1f68c3..80498af 100644
--- a/pom.xml
+++ b/pom.xml
@@ -51,6 +51,11 @@
             <version>4.9</version>
             <scope>compile</scope>
         </dependency>
+		 <dependency>
+			 <groupId>com.alibaba</groupId>
+			 <artifactId>fastjson</artifactId>
+			 <version>1.2.14</version>
+		 </dependency>
         <dependency>
             <groupId>jline</groupId>
             <artifactId>jline</artifactId>
diff --git a/src/main/java/co/aikar/timings/TimingsExport.java b/src/main/java/co/aikar/timings/TimingsExport.java
index 6eb5f96..80d7c6a 100644
--- a/src/main/java/co/aikar/timings/TimingsExport.java
+++ b/src/main/java/co/aikar/timings/TimingsExport.java
@@ -36,7 +36,8 @@ import org.bukkit.configuration.ConfigurationSection;
 import org.bukkit.configuration.MemorySection;
 import org.bukkit.entity.EntityType;
 import org.bukkit.plugin.Plugin;
-import org.json.simple.JSONObject;
+// import org.json.simple.JSONObject;
+import com.alibaba.fastjson.JSONObject;
 import org.json.simple.JSONValue;
 
 import java.io.ByteArrayOutputStream;
diff --git a/src/main/java/net/minecraft/server/BlockFire.java b/src/main/java/net/minecraft/server/BlockFire.java
index 1a3cd4b..abbcc51 100644
--- a/src/main/java/net/minecraft/server/BlockFire.java
+++ b/src/main/java/net/minecraft/server/BlockFire.java
@@ -5,6 +5,8 @@ import java.util.Map;
 import java.util.Random;
 import javax.annotation.Nullable;
 
+import com.alibaba.fastjson.util.IdentityHashMap;
+
 // CraftBukkit start
 import org.bukkit.craftbukkit.event.CraftEventFactory;
 import org.bukkit.event.block.BlockBurnEvent;
diff --git a/src/main/java/net/minecraft/server/Chunk.java b/src/main/java/net/minecraft/server/Chunk.java
index 5e63f97..763f6f5 100644
--- a/src/main/java/net/minecraft/server/Chunk.java
+++ b/src/main/java/net/minecraft/server/Chunk.java
@@ -311,15 +311,13 @@ public class Chunk {
     }
 
     private void a(int i, int j, int k, int l) {
-        final PooledMutableBlockPosition pos1 = PooledMutableBlockPosition.acquire(i, 0, j); // Spigot
-        if (l > k && this.world.areChunksLoaded(pos1, 16)) { // Spigot
+        if (l > k && this.world.areChunksLoaded(new BlockPosition(i, 0, j), 16)) {
             for (int i1 = k; i1 < l; ++i1) {
-                this.world.c(EnumSkyBlock.SKY, pos1.acquireBatch(i, i1, j)); // Spigot
+                this.world.c(EnumSkyBlock.SKY, new BlockPosition(i, i1, j));
             }
 
             this.s = true;
         }
-		pos1.release(); // Spigot
 
     }
 
@@ -1378,8 +1376,7 @@ public class Chunk {
         int k = this.g();
         boolean flag = false;
         boolean flag1 = false;
-        // BlockPosition.MutableBlockPosition blockposition_mutableblockposition = new BlockPosition.MutableBlockPosition((this.locX << 4) + i, 0, (this.locZ << 4) + j);
-		PooledMutableBlockPosition blockposition_mutableblockposition = PooledMutableBlockPosition.acquire((this.locX << 4) + i, 0, (this.locZ << 4) + j); // Spigot
+        BlockPosition.MutableBlockPosition blockposition_mutableblockposition = new BlockPosition.MutableBlockPosition((this.locX << 4) + i, 0, (this.locZ << 4) + j);
 
         int l;
 
@@ -1394,7 +1391,6 @@ public class Chunk {
             if (!flag && i1 > 0) {
                 flag = true;
             } else if (flag && i1 == 0 && !this.world.w(blockposition_mutableblockposition)) {
-				blockposition_mutableblockposition.release(); // Spigot
                 return false;
             }
         }
@@ -1406,7 +1402,6 @@ public class Chunk {
             }
         }
 
-		blockposition_mutableblockposition.release(); // Spigot
         return true;
     }
 
diff --git a/src/main/java/net/minecraft/server/CrashReport.java b/src/main/java/net/minecraft/server/CrashReport.java
index 6f7eb62..07e8bb9 100644
--- a/src/main/java/net/minecraft/server/CrashReport.java
+++ b/src/main/java/net/minecraft/server/CrashReport.java
@@ -267,6 +267,10 @@ public class CrashReport {
 
             if (k < 0) {
                 System.out.println("Negative index in crash report handler (" + astacktraceelement.length + "/" + j + ")");
+				System.out.println("Torch debug - s: " + s);
+				System.out.println("Torch debug - i: " + i);
+				System.out.println("Torch debug - j: " + j);
+				System.out.println("Torch debug - k: " + k);
             }
 
             if (astacktraceelement != null && 0 <= k && k < astacktraceelement.length) {
diff --git a/src/main/java/net/minecraft/server/EnchantmentManager.java b/src/main/java/net/minecraft/server/EnchantmentManager.java
index fd4226c..ab34c46 100644
--- a/src/main/java/net/minecraft/server/EnchantmentManager.java
+++ b/src/main/java/net/minecraft/server/EnchantmentManager.java
@@ -283,7 +283,7 @@ public class EnchantmentManager {
     }
 
     public static List<WeightedRandomEnchant> b(Random random, ItemStack itemstack, int i, boolean flag) {
-        ArrayList arraylist = Lists.newArrayList();
+		ArrayList arraylist = Lists.newArrayList();
         Item item = itemstack.getItem();
         int j = item.c();
 
diff --git a/src/main/java/net/minecraft/server/Entity.java b/src/main/java/net/minecraft/server/Entity.java
index e5f5763..8da127f 100644
--- a/src/main/java/net/minecraft/server/Entity.java
+++ b/src/main/java/net/minecraft/server/Entity.java
@@ -406,7 +406,7 @@ public abstract class Entity implements ICommandListener, org.spigotmc.Optimized
             this.world.methodProfiler.b();
         }
 
-		us_task = new U_sub();
+		// us_task = new U_sub(); // Torch - removed to the head
         us_task.fork();
 		// Hose start
 		/*
@@ -455,9 +455,9 @@ public abstract class Entity implements ICommandListener, org.spigotmc.Optimized
     }
 	
 	// Hose start
-	U_sub us_task; // Hose - fork
+	U_sub us_task = new U_sub(); // Hose - fork // Torch - fix leak
+	U u_task = new U(); // Hose - fork // Torch - fix leak
 	public void U() {
-        U u_task = new U();
         u_task.fork();
     }
 	// Hose end
@@ -634,12 +634,11 @@ public abstract class Entity implements ICommandListener, org.spigotmc.Optimized
 
             List list = this.world.getCubes(this, this.getBoundingBox().a(d0, d1, d2));
             AxisAlignedBB axisalignedbb = this.getBoundingBox();
-            int i = 0;
 
             int j;
 
-            for (j = list.size(); i < j; ++i) {
-                d1 = ((AxisAlignedBB) list.get(i)).b(this.getBoundingBox(), d1);
+            for (Object ab : list) {
+                d1 = ((AxisAlignedBB)ab).b(this.getBoundingBox(), d1);
             }
 
             this.a(this.getBoundingBox().c(0.0D, d1, 0.0D));
@@ -649,15 +648,15 @@ public abstract class Entity implements ICommandListener, org.spigotmc.Optimized
 
             int k;
 
-            for (k = list.size(); j < k; ++j) {
-                d0 = ((AxisAlignedBB) list.get(j)).a(this.getBoundingBox(), d0);
+            for (Object ab : list) {
+                d0 = ((AxisAlignedBB)ab).a(this.getBoundingBox(), d0);
             }
 
             this.a(this.getBoundingBox().c(d0, 0.0D, 0.0D));
             j = 0;
 
-            for (k = list.size(); j < k; ++j) {
-                d2 = ((AxisAlignedBB) list.get(j)).c(this.getBoundingBox(), d2);
+            for (Object ab : list) {
+                d2 = ((AxisAlignedBB)ab).c(this.getBoundingBox(), d2);
             }
 
             this.a(this.getBoundingBox().c(0.0D, 0.0D, d2));
@@ -678,24 +677,24 @@ public abstract class Entity implements ICommandListener, org.spigotmc.Optimized
                 d10 = d1;
                 int l = 0;
 
-                for (int i1 = list1.size(); l < i1; ++l) {
-                    d10 = ((AxisAlignedBB) list1.get(l)).b(axisalignedbb3, d10);
+                for (Object ab : list1) {
+                    d10 = ((AxisAlignedBB)ab).b(axisalignedbb3, d10);
                 }
 
                 axisalignedbb2 = axisalignedbb2.c(0.0D, d10, 0.0D);
                 double d14 = d6;
                 int j1 = 0;
 
-                for (int k1 = list1.size(); j1 < k1; ++j1) {
-                    d14 = ((AxisAlignedBB) list1.get(j1)).a(axisalignedbb2, d14);
+                for (Object ab : list1) {
+                    d14 = ((AxisAlignedBB)ab).a(axisalignedbb2, d14);
                 }
 
                 axisalignedbb2 = axisalignedbb2.c(d14, 0.0D, 0.0D);
                 double d15 = d8;
                 int l1 = 0;
 
-                for (int i2 = list1.size(); l1 < i2; ++l1) {
-                    d15 = ((AxisAlignedBB) list1.get(l1)).c(axisalignedbb2, d15);
+                for (Object ab : list1) {
+                    d15 = ((AxisAlignedBB)ab).c(axisalignedbb2, d15);
                 }
 
                 axisalignedbb2 = axisalignedbb2.c(0.0D, 0.0D, d15);
@@ -703,24 +702,24 @@ public abstract class Entity implements ICommandListener, org.spigotmc.Optimized
                 double d16 = d1;
                 int j2 = 0;
 
-                for (int k2 = list1.size(); j2 < k2; ++j2) {
-                    d16 = ((AxisAlignedBB) list1.get(j2)).b(axisalignedbb4, d16);
+                for (Object ab : list1) {
+                    d16 = ((AxisAlignedBB)ab).b(axisalignedbb4, d16);
                 }
 
                 axisalignedbb4 = axisalignedbb4.c(0.0D, d16, 0.0D);
                 double d17 = d6;
                 int l2 = 0;
 
-                for (int i3 = list1.size(); l2 < i3; ++l2) {
-                    d17 = ((AxisAlignedBB) list1.get(l2)).a(axisalignedbb4, d17);
+                for (Object ab : list1) {
+                    d17 = ((AxisAlignedBB)ab).a(axisalignedbb4, d17);
                 }
 
                 axisalignedbb4 = axisalignedbb4.c(d17, 0.0D, 0.0D);
                 double d18 = d8;
                 int j3 = 0;
 
-                for (int k3 = list1.size(); j3 < k3; ++j3) {
-                    d18 = ((AxisAlignedBB) list1.get(j3)).c(axisalignedbb4, d18);
+                for (Object ab : list1) {
+                    d18 = ((AxisAlignedBB)ab).c(axisalignedbb4, d18);
                 }
 
                 axisalignedbb4 = axisalignedbb4.c(0.0D, 0.0D, d18);
@@ -741,8 +740,8 @@ public abstract class Entity implements ICommandListener, org.spigotmc.Optimized
 
                 int l3 = 0;
 
-                for (int i4 = list1.size(); l3 < i4; ++l3) {
-                    d1 = ((AxisAlignedBB) list1.get(l3)).b(this.getBoundingBox(), d1);
+                for (Object ab : list1) {
+                    d1 = ((AxisAlignedBB)ab).b(this.getBoundingBox(), d1);
                 }
 
                 this.a(this.getBoundingBox().c(0.0D, d1, 0.0D));
@@ -983,8 +982,8 @@ public abstract class Entity implements ICommandListener, org.spigotmc.Optimized
 
             int j;
 
-            for (j = list.size(); i < j; ++i) {
-                d1 = ((AxisAlignedBB) list.get(i)).b(this.getBoundingBox(), d1);
+            for (Object ab : list) {
+                d1 = ((AxisAlignedBB)ab).b(this.getBoundingBox(), d1);
             }
 
             this.a(this.getBoundingBox().c(0.0D, d1, 0.0D));
@@ -994,15 +993,15 @@ public abstract class Entity implements ICommandListener, org.spigotmc.Optimized
 
             int k;
 
-            for (k = list.size(); j < k; ++j) {
-                d0 = ((AxisAlignedBB) list.get(j)).a(this.getBoundingBox(), d0);
+            for (Object ab : list) {
+                d0 = ((AxisAlignedBB)ab).a(this.getBoundingBox(), d0);
             }
 
             this.a(this.getBoundingBox().c(d0, 0.0D, 0.0D));
             j = 0;
 
-            for (k = list.size(); j < k; ++j) {
-                d2 = ((AxisAlignedBB) list.get(j)).c(this.getBoundingBox(), d2);
+            for (Object ab : list) {
+                d2 = ((AxisAlignedBB)ab).c(this.getBoundingBox(), d2);
             }
 
             this.a(this.getBoundingBox().c(0.0D, 0.0D, d2));
@@ -1026,24 +1025,24 @@ public abstract class Entity implements ICommandListener, org.spigotmc.Optimized
                 d10 = d1;
                 int l = 0;
 
-                for (int i1 = list1.size(); l < i1; ++l) {
-                    d10 = ((AxisAlignedBB) list1.get(l)).b(axisalignedbb3, d10);
+                for (Object ab : list1) {
+                    d10 = ((AxisAlignedBB)ab).b(axisalignedbb3, d10);
                 }
 
                 axisalignedbb2 = axisalignedbb2.c(0.0D, d10, 0.0D);
                 double d14 = d6;
                 int j1 = 0;
 
-                for (int k1 = list1.size(); j1 < k1; ++j1) {
-                    d14 = ((AxisAlignedBB) list1.get(j1)).a(axisalignedbb2, d14);
+                for (Object ab : list1) {
+                    d14 = ((AxisAlignedBB)ab).a(axisalignedbb2, d14);
                 }
 
                 axisalignedbb2 = axisalignedbb2.c(d14, 0.0D, 0.0D);
                 double d15 = d8;
                 int l1 = 0;
 
-                for (int i2 = list1.size(); l1 < i2; ++l1) {
-                    d15 = ((AxisAlignedBB) list1.get(l1)).c(axisalignedbb2, d15);
+                for (Object ab : list1) {
+                    d15 = ((AxisAlignedBB)ab).c(axisalignedbb2, d15);
                 }
 
                 axisalignedbb2 = axisalignedbb2.c(0.0D, 0.0D, d15);
@@ -1051,24 +1050,24 @@ public abstract class Entity implements ICommandListener, org.spigotmc.Optimized
                 double d16 = d1;
                 int j2 = 0;
 
-                for (int k2 = list1.size(); j2 < k2; ++j2) {
-                    d16 = ((AxisAlignedBB) list1.get(j2)).b(axisalignedbb4, d16);
+                for (Object ab : list1) {
+                    d16 = ((AxisAlignedBB)ab).b(axisalignedbb4, d16);
                 }
 
                 axisalignedbb4 = axisalignedbb4.c(0.0D, d16, 0.0D);
                 double d17 = d6;
                 int l2 = 0;
 
-                for (int i3 = list1.size(); l2 < i3; ++l2) {
-                    d17 = ((AxisAlignedBB) list1.get(l2)).a(axisalignedbb4, d17);
+                for (Object ab : list1) {
+                    d17 = ((AxisAlignedBB)ab).a(axisalignedbb4, d17);
                 }
 
                 axisalignedbb4 = axisalignedbb4.c(d17, 0.0D, 0.0D);
                 double d18 = d8;
                 int j3 = 0;
 
-                for (int k3 = list1.size(); j3 < k3; ++j3) {
-                    d18 = ((AxisAlignedBB) list1.get(j3)).c(axisalignedbb4, d18);
+                for (Object ab : list1) {
+                    d18 = ((AxisAlignedBB)ab).c(axisalignedbb4, d18);
                 }
 
                 axisalignedbb4 = axisalignedbb4.c(0.0D, 0.0D, d18);
@@ -1089,8 +1088,8 @@ public abstract class Entity implements ICommandListener, org.spigotmc.Optimized
 
                 int l3 = 0;
 
-                for (int i4 = list1.size(); l3 < i4; ++l3) {
-                    d1 = ((AxisAlignedBB) list1.get(l3)).b(this.getBoundingBox(), d1);
+                for (Object ab : list1) {
+                    d1 = ((AxisAlignedBB)ab).b(this.getBoundingBox(), d1);
                 }
 
                 this.a(this.getBoundingBox().c(0.0D, d1, 0.0D));
@@ -1991,12 +1990,9 @@ public abstract class Entity implements ICommandListener, org.spigotmc.Optimized
     protected NBTTagList a(double... adouble) {
         NBTTagList nbttaglist = new NBTTagList();
         double[] adouble1 = adouble;
-        int i = adouble.length;
-
-        for (int j = 0; j < i; ++j) {
-            double d0 = adouble1[j];
 
-            nbttaglist.add(new NBTTagDouble(d0));
+        for (double d : adouble1) {
+            nbttaglist.add(new NBTTagDouble(d));
         }
 
         return nbttaglist;
@@ -2005,11 +2001,8 @@ public abstract class Entity implements ICommandListener, org.spigotmc.Optimized
     protected NBTTagList a(float... afloat) {
         NBTTagList nbttaglist = new NBTTagList();
         float[] afloat1 = afloat;
-        int i = afloat.length;
-
-        for (int j = 0; j < i; ++j) {
-            float f = afloat1[j];
 
+        for (float f : afloat1) {
             nbttaglist.add(new NBTTagFloat(f));
         }
 
diff --git a/src/main/java/net/minecraft/server/EntityFallingBlock.java b/src/main/java/net/minecraft/server/EntityFallingBlock.java
index 7cf22fb..0dc7e12 100644
--- a/src/main/java/net/minecraft/server/EntityFallingBlock.java
+++ b/src/main/java/net/minecraft/server/EntityFallingBlock.java
@@ -8,6 +8,7 @@ import java.util.List;
 import javax.annotation.Nullable;
 
 import org.bukkit.craftbukkit.event.CraftEventFactory; // CraftBukkit
+import java.util.concurrent.RecursiveAction; // Torch
 
 public class EntityFallingBlock extends Entity {
 
@@ -56,8 +57,26 @@ public class EntityFallingBlock extends Entity {
     public boolean isInteractable() {
         return !this.dead;
     }
+	
+	/* // Torch start - Fork/Join
+	FallingTask task = new FallingTask();
+	public void m() {
+        task.fork(); // Fork task for 'm'
+	}
+	
+	class FallingTask extends RecursiveAction {
+		
+        FallingTask() {}
+		
+        @Override
+        protected void compute() {
+            m_();
+        }
+    }
 
-    public void m() {
+    public void m_() { // Original method
+	*/ // Torch end
+	public void m() {
         Block block = this.block.getBlock();
 
         if (this.block.getMaterial() == Material.AIR) {
diff --git a/src/main/java/net/minecraft/server/EntityInsentient.java b/src/main/java/net/minecraft/server/EntityInsentient.java
index e9af72c..d170e1b 100644
--- a/src/main/java/net/minecraft/server/EntityInsentient.java
+++ b/src/main/java/net/minecraft/server/EntityInsentient.java
@@ -398,21 +398,21 @@ public abstract class EntityInsentient extends EntityLiving {
         }
         // CraftBukkit end
         NBTTagList nbttaglist;
-		int i;
+        int i;
 
         if (nbttagcompound.hasKeyOfType("ArmorItems", 9)) {
             nbttaglist = nbttagcompound.getList("ArmorItems", 10);
 
-            for (ItemStack itemstack : this.bx) {
-                itemstack = ItemStack.createStack(itemstack.getTag());
+            for (i = 0; i < this.bx.length; ++i) {
+                this.bx[i] = ItemStack.createStack(nbttaglist.get(i));
             }
         }
 
         if (nbttagcompound.hasKeyOfType("HandItems", 9)) {
             nbttaglist = nbttagcompound.getList("HandItems", 10);
 
-            for (ItemStack itemstack : this.bw) {
-                itemstack = ItemStack.createStack(itemstack.getTag());
+            for (i = 0; i < this.bw.length; ++i) {
+                this.bw[i] = ItemStack.createStack(nbttaglist.get(i));
             }
         }
 
diff --git a/src/main/java/net/minecraft/server/HandshakeListener.java b/src/main/java/net/minecraft/server/HandshakeListener.java
index 76934a2..0ad8a93 100644
--- a/src/main/java/net/minecraft/server/HandshakeListener.java
+++ b/src/main/java/net/minecraft/server/HandshakeListener.java
@@ -7,7 +7,7 @@ import java.util.HashMap;
 
 public class HandshakeListener implements PacketHandshakingInListener {
 
-    private static final com.google.gson.Gson gson = new com.google.gson.Gson(); // Spigot
+    private static final com.google.gson.Gson gson = new com.google.gson.Gson(); // Spigot // Torch - Use FastJson but keeping legacy name
     // CraftBukkit start - add fields
     private static final HashMap<InetAddress, Long> throttleTracker = new HashMap<InetAddress, Long>();
     private static int throttleCounter = 0;
diff --git a/src/main/java/net/minecraft/server/PathfinderNormal.java b/src/main/java/net/minecraft/server/PathfinderNormal.java
index 5c4ced5..fa7f8a4 100644
--- a/src/main/java/net/minecraft/server/PathfinderNormal.java
+++ b/src/main/java/net/minecraft/server/PathfinderNormal.java
@@ -27,13 +27,12 @@ public class PathfinderNormal extends PathfinderAbstract {
 
         if (this.e() && this.b.isInWater()) {
             i = (int) this.b.getBoundingBox().b;
-			PooledMutableBlockPosition blockposition_mutableblockposition = PooledMutableBlockPosition.acquire(MathHelper.floor(this.b.locX), i, MathHelper.floor(this.b.locZ)); // Spigot
+			BlockPosition.MutableBlockPosition blockposition_mutableblockposition = new BlockPosition.MutableBlockPosition(MathHelper.floor(this.b.locX), i, MathHelper.floor(this.b.locZ));
 
             for (Block block = this.a.getType(blockposition_mutableblockposition).getBlock(); block == Blocks.FLOWING_WATER || block == Blocks.WATER; block = this.a.getType(blockposition_mutableblockposition).getBlock()) {
                 ++i;
                 blockposition_mutableblockposition.c(MathHelper.floor(this.b.locX), i, MathHelper.floor(this.b.locZ));
             }
-			blockposition_mutableblockposition.release(); // Spigot
 			
         } else if (!this.b.onGround) {
             for (blockposition = new BlockPosition(this.b); (this.a.getType(blockposition).getMaterial() == Material.AIR || this.a.getType(blockposition).getBlock().b(this.a, blockposition)) && blockposition.getY() > 0; blockposition = blockposition.down()) {
diff --git a/src/main/java/net/minecraft/server/PlayerChunkMap.java b/src/main/java/net/minecraft/server/PlayerChunkMap.java
index d04c8bb..b7e9ef1 100644
--- a/src/main/java/net/minecraft/server/PlayerChunkMap.java
+++ b/src/main/java/net/minecraft/server/PlayerChunkMap.java
@@ -53,8 +53,8 @@ public class PlayerChunkMap {
     private final WorldServer world;
     // TacoSpigot start - catch async access
     private final List<EntityPlayer> managedPlayers = AsyncCatcher.catchAsyncUsage(Lists.newArrayList(), "list access PlayerChunkMap.managedPlayers");
-    // private final Long2ObjectMap<PlayerChunk> e = new Long2ObjectOpenHashMap(4096);
-	private final Map<Long, PlayerChunk> e = Maps.newConcurrentMap();
+    private final Long2ObjectMap<PlayerChunk> e = new Long2ObjectOpenHashMap(4096);
+	// private final Map<Long, PlayerChunk> e = Maps.newConcurrentMap();
     // private final Set<PlayerChunk> f = AsyncCatcher.catchAsyncUsage(Sets.newHashSet(), "set access PlayerChunkMap.f");
 	private final Set<PlayerChunk> f = Sets.newConcurrentHashSet();
     private final Queue<PlayerChunk> g = new ConcurrentLinkedQueue<PlayerChunk>();
diff --git a/src/main/java/net/minecraft/server/PooledMutableBlockPosition.java b/src/main/java/net/minecraft/server/PooledMutableBlockPosition.java
deleted file mode 100644
index bb59364..0000000
--- a/src/main/java/net/minecraft/server/PooledMutableBlockPosition.java
+++ /dev/null
@@ -1,200 +0,0 @@
-package net.minecraft.server;
-
-import org.apache.logging.log4j.Level;
-
-import java.util.ArrayDeque;
-import java.util.Deque;
-
-public final class PooledMutableBlockPosition extends BlockPosition {
-
-    private int x;
-    private int y;
-	private int acquiredTick;
-    private Deque<PooledMutableBlockPosition> related;
-    public boolean free = false;
-    public boolean batchShifts;
-
-    private static final int MAX_SIZE = 200;
-    private static final Deque<PooledMutableBlockPosition> pool = new ArrayDeque<PooledMutableBlockPosition>(MAX_SIZE);
-    private int z;
-	
-	public PooledMutableBlockPosition acquireBatch() {
-        return acquireBatch(0, 0, 0);
-    }
-
-    public PooledMutableBlockPosition acquireBatch(EnumDirection dir) {
-        return acquireBatch(dir, 1);
-    }
-
-    public PooledMutableBlockPosition acquireBatch(EnumDirection dir, int i) {
-        return acquireBatch(x + dir.getAdjacentX() * i, y + dir.getAdjacentY() * i, z + dir.getAdjacentZ() * i);
-    }
-
-    public PooledMutableBlockPosition acquireBatch(int x, int y, int z) {
-        PooledMutableBlockPosition pos = acquire(x, y, z);
-        if (related == null) {
-            related = new ArrayDeque();
-        }
-        pos.related = related; // So any batch additions to this child goes to parent, as child won't check this
-        related.add(pos);
-        return pos;
-    }
-
-    /**
-     * We can't safely return these to pool as we don't know if its stored
-     * @param dir
-     * @param i
-     * @return
-     */
-    @Override
-    public BlockPosition shift(EnumDirection dir, int i) {
-        if (batchShifts) {
-            return acquireBatch(dir, i);
-        }
-        PooledMutableBlockPosition position = acquire(x + dir.getAdjacentX() * i, y + dir.getAdjacentY() * i, z + dir.getAdjacentZ() * i);
-        position.free = true; // Prevent returning to pool
-        return position;
-    }
-
-    private PooledMutableBlockPosition(int x, int y, int z) {
-        super(0, 0, 0);
-        this.x = x;
-        this.y = y;
-        this.z = z;
-    }
-
-    public static PooledMutableBlockPosition acquire() {
-        return acquire(0, 0, 0);
-    }
-
-    public static PooledMutableBlockPosition acquire(Entity entity) {
-        return acquire(MathHelper.floor(entity.locX), MathHelper.floor(entity.locY), MathHelper.floor(entity.locZ));
-    }
-    public static PooledMutableBlockPosition acquire(BlockPosition pos) {
-        return acquire(pos.getX(), pos.getY(), pos.getZ());
-    }
-
-    public static synchronized PooledMutableBlockPosition acquire(int x, int y, int z) {
-        PooledMutableBlockPosition pos;
-        synchronized (pool) {
-            pos = pool.pollLast();
-        }
-        if (pos != null && pos.free) {
-            pos.free = false;
-            pos.acquiredTick = MinecraftServer.currentTick;
-            pos.set(x, y, z);
-        } else {
-            pos = new PooledMutableBlockPosition(x, y, z);
-            pos.acquiredTick = MinecraftServer.currentTick;
-        }
-
-        return pos;
-    }
-    private static void releaseToPool(PooledMutableBlockPosition pos) {
-        if (!pos.free) {
-            pos.free = true;
-            synchronized (pool) {
-                if (pool.size() < MAX_SIZE) {
-                    pool.add(pos);
-                }
-                final Deque<PooledMutableBlockPosition> rel = pos.related;
-                if (rel != null) {
-                    int allowed = MAX_SIZE - pool.size();
-                    int related = rel.size();
-                    for (int i = 0; i < allowed && i < related; i++) {
-                        final PooledMutableBlockPosition relpos = rel.poll();
-                        relpos.free = true;
-                        relpos.related = null;
-                        pool.add(relpos);
-                    }
-                    pos.related = null;
-                }
-            }
-        }
-    }
-
-    public void release() {
-        releaseToPool(this);
-    }
-
-    public int getXI() {
-        checkTick();
-        return this.x;
-    }
-
-    public int IgetYI() {
-        checkTick();
-        return this.y;
-    }
-
-    public int getZI() {
-        checkTick();
-        return this.z;
-    }
-	
-    private void checkTick() {
-        if (MinecraftServer.currentTick != acquiredTick) {
-            free = false;
-            new Throwable().printStackTrace();
-        }
-    }
-
-    /**
-     * This method is purely to provide compile time test incase c() doesn't get renamed
-     */
-    private static void testMutableBlockPositionMethod() {
-        BlockPosition.MutableBlockPosition test = (new BlockPosition.MutableBlockPosition()).c(0,0,0);
-    }
-    // PAIL: Rename BlockPosition.MutableBlockPosition to set - then we can remove this.
-    public PooledMutableBlockPosition c(int x, int y, int z) {
-        return set(x, y, z);
-    }
-    public PooledMutableBlockPosition set(int x, int y, int z) {
-        checkTick();
-        if (free) {
-            MinecraftServer.LOGGER.log(Level.ERROR, "PooledMutableBlockPosition modified after it was released.", new Throwable());
-            free = false;
-        }
-        this.x = x;
-        this.y = y;
-        this.z = z;
-        return this;
-    }
-
-    @Override
-    public int compareTo(BaseBlockPosition o) {
-        return y == o.getY() ? (z == o.getZ() ? x - o.getX() : z - o.getZ()) : y - o.getY();
-    }
-
-    public BlockPosition copy() {
-        return new BlockPosition(x, y, z);
-    }
-	
-	    public PooledMutableBlockPosition set(Entity entity) {
-        return set(MathHelper.floor(entity.locX), MathHelper.floor(entity.locY), MathHelper.floor(entity.locZ));
-    }
-
-    public PooledMutableBlockPosition adjust(int x, int y, int z) {
-        return set(this.x + x, this.y + y, this.z + z);
-    }
-
-    public PooledMutableBlockPosition adjustX(int x) {
-        return set(this.x + x, this.y, this.z);
-    }
-
-    public PooledMutableBlockPosition adjustY(int y) {
-        return set(this.x, this.y + y, this.z);
-    }
-    public PooledMutableBlockPosition adjustZ(int z) {
-        return set(this.x, this.y, this.z + z);
-    }
-
-    public PooledMutableBlockPosition adjust(EnumDirection enumdirection) {
-        return adjust(enumdirection, 1);
-    }
-
-    public PooledMutableBlockPosition adjust(EnumDirection dir, int i) {
-        return set(x + dir.getAdjacentX() * i, y + dir.getAdjacentY() * i, z + dir.getAdjacentZ() * i);
-    }
-
-}
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/server/SystemUtils.java b/src/main/java/net/minecraft/server/SystemUtils.java
index aa3645f..62b8f53 100644
--- a/src/main/java/net/minecraft/server/SystemUtils.java
+++ b/src/main/java/net/minecraft/server/SystemUtils.java
@@ -3,13 +3,14 @@ package net.minecraft.server;
 import java.util.List;
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.FutureTask;
+import java.util.concurrent.ConcurrentLinkedQueue;
 import javax.annotation.Nullable;
 import org.apache.logging.log4j.Logger;
 
 public class SystemUtils {
-
+	
     @Nullable
-    public static <V> V a(FutureTask<V> futuretask, Logger logger) {
+    public static synchronized <V> V a(FutureTask<V> futuretask, Logger logger) {
         try {
             futuretask.run();
             return futuretask.get();
diff --git a/src/main/java/org/bukkit/command/defaults/VersionCommand.java b/src/main/java/org/bukkit/command/defaults/VersionCommand.java
index a0268a1..3546bf7 100644
--- a/src/main/java/org/bukkit/command/defaults/VersionCommand.java
+++ b/src/main/java/org/bukkit/command/defaults/VersionCommand.java
@@ -24,7 +24,8 @@ import java.util.Set;
 import java.util.concurrent.locks.ReentrantLock;
 import java.util.logging.Level;
 import java.util.logging.Logger;
-import org.json.simple.JSONObject;
+// import org.json.simple.JSONObject;
+import com.alibaba.fastjson.JSONObject;
 import org.json.simple.parser.JSONParser;
 import org.json.simple.parser.ParseException;
 
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java b/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
index 199ee49..180ad00 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
@@ -24,8 +24,6 @@ import org.bukkit.metadata.MetadataValue;
 import org.bukkit.plugin.Plugin;
 import org.bukkit.util.BlockVector;
 
-import net.minecraft.server.PooledMutableBlockPosition;
-
 public class CraftBlock implements Block {
     private final CraftChunk chunk;
     private final int x;
@@ -112,10 +110,7 @@ public class CraftBlock implements Block {
     }
 
     public byte getData() {
-        final PooledMutableBlockPosition position = PooledMutableBlockPosition.acquire(this.x, this.y, this.z); // Spigot
-        IBlockData blockData = chunk.getHandle().getBlockData(position);
-        position.release();
-
+        IBlockData blockData = chunk.getHandle().getBlockData(new BlockPosition(x, y, z));
         return (byte) blockData.getBlock().toLegacyData(blockData);
     }
 
@@ -179,27 +174,17 @@ public class CraftBlock implements Block {
     }
 
     public byte getLightLevel() {
-        final PooledMutableBlockPosition blockposition = PooledMutableBlockPosition.acquire(this.x, this.y, this.z);
-        final byte lightLevel = (byte) chunk.getHandle().getWorld().getLightLevel(blockposition);
-        blockposition.release();
-        return lightLevel;
+        return (byte) chunk.getHandle().getWorld().getLightLevel(new BlockPosition(this.x, this.y, this.z));
     }
 
     public byte getLightFromSky() {
-        final PooledMutableBlockPosition blockposition = PooledMutableBlockPosition.acquire(this.x, this.y, this.z);
-        final byte brightness = (byte) chunk.getHandle().getBrightness(EnumSkyBlock.SKY, blockposition);
-        blockposition.release();
-        return brightness;
+        return (byte) chunk.getHandle().getBrightness(EnumSkyBlock.SKY, new BlockPosition(this.x, this.y, this.z));
     }
 
     public byte getLightFromBlocks() {
-       final PooledMutableBlockPosition blockposition = PooledMutableBlockPosition.acquire(this.x, this.y, this.z);
-        final byte brightness = (byte) chunk.getHandle().getBrightness(EnumSkyBlock.BLOCK, blockposition);
-        blockposition.release();
-        return brightness;
+        return (byte) chunk.getHandle().getBrightness(EnumSkyBlock.BLOCK, new BlockPosition(this.x, this.y, this.z));
     }
 
-
     public Block getFace(final BlockFace face) {
         return getRelative(face, 1);
     }
@@ -399,19 +384,16 @@ public class CraftBlock implements Block {
 
     public int getBlockPower(BlockFace face) {
         int power = 0;
-		final PooledMutableBlockPosition position = PooledMutableBlockPosition.acquire(this.x, this.y, this.z); // Spigot
         BlockRedstoneWire wire = Blocks.REDSTONE_WIRE;
         net.minecraft.server.World world = chunk.getHandle().getWorld();
-        if ((face == BlockFace.DOWN || face == BlockFace.SELF) && world.isBlockFacePowered(position.set(x, y - 1, z), EnumDirection.DOWN)) power = wire.getPower(world, position.set(x, y - 1, z), power);
-        if ((face == BlockFace.UP || face == BlockFace.SELF) && world.isBlockFacePowered(position.set(x, y + 1, z), EnumDirection.UP)) power = wire.getPower(world, position.set(x, y + 1, z), power);
-        if ((face == BlockFace.EAST || face == BlockFace.SELF) && world.isBlockFacePowered(position.set(x + 1, y, z), EnumDirection.EAST)) power = wire.getPower(world, position.set(x + 1, y, z), power);
-        if ((face == BlockFace.WEST || face == BlockFace.SELF) && world.isBlockFacePowered(position.set(x - 1, y, z), EnumDirection.WEST)) power = wire.getPower(world, position.set(x - 1, y, z), power);
-        if ((face == BlockFace.NORTH || face == BlockFace.SELF) && world.isBlockFacePowered(position.set(x, y, z - 1), EnumDirection.NORTH)) power = wire.getPower(world, position.set(x, y, z - 1), power);
-        if ((face == BlockFace.SOUTH || face == BlockFace.SELF) && world.isBlockFacePowered(position.set(x, y, z + 1), EnumDirection.SOUTH)) power = wire.getPower(world, position.set(x, y, z - 1), power);
-        position.release(); // Spigot
+        if ((face == BlockFace.DOWN || face == BlockFace.SELF) && world.isBlockFacePowered(new BlockPosition(x, y - 1, z), EnumDirection.DOWN)) power = wire.getPower(world, new BlockPosition(x, y - 1, z), power);
+        if ((face == BlockFace.UP || face == BlockFace.SELF) && world.isBlockFacePowered(new BlockPosition(x, y + 1, z), EnumDirection.UP)) power = wire.getPower(world, new BlockPosition(x, y + 1, z), power);
+        if ((face == BlockFace.EAST || face == BlockFace.SELF) && world.isBlockFacePowered(new BlockPosition(x + 1, y, z), EnumDirection.EAST)) power = wire.getPower(world, new BlockPosition(x + 1, y, z), power);
+        if ((face == BlockFace.WEST || face == BlockFace.SELF) && world.isBlockFacePowered(new BlockPosition(x - 1, y, z), EnumDirection.WEST)) power = wire.getPower(world, new BlockPosition(x - 1, y, z), power);
+        if ((face == BlockFace.NORTH || face == BlockFace.SELF) && world.isBlockFacePowered(new BlockPosition(x, y, z - 1), EnumDirection.NORTH)) power = wire.getPower(world, new BlockPosition(x, y, z - 1), power);
+        if ((face == BlockFace.SOUTH || face == BlockFace.SELF) && world.isBlockFacePowered(new BlockPosition(x, y, z + 1), EnumDirection.SOUTH)) power = wire.getPower(world, new BlockPosition(x, y, z - 1), power);
         return power > 0 ? power : (face == BlockFace.SELF ? isBlockIndirectlyPowered() : isBlockFaceIndirectlyPowered(face)) ? 15 : 0;
     }
-
     public int getBlockPower() {
         return getBlockPower(BlockFace.SELF);
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftSkull.java b/src/main/java/org/bukkit/craftbukkit/block/CraftSkull.java
index 90572f5..d73edfa 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftSkull.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftSkull.java
@@ -181,7 +181,19 @@ public class CraftSkull extends CraftBlockState implements Skull {
 
     @Override
     public OfflinePlayer getOwningPlayer() {
-        return hasOwner() ? Bukkit.getOfflinePlayer(profile.getId()) : null;
+		// Torch start - Fall back to name if skull has no uuid when getting player.
+        if (profile != null) {
+            if (profile.getId() != null) {
+                return Bukkit.getOfflinePlayer(profile.getId());
+            }
+
+            if (profile.getName() != null) {
+                return Bukkit.getOfflinePlayer(profile.getName());
+            }
+        }
+
+        return null;
+		// Torch end
     }
 
     @Override
-- 
2.8.2.windows.1

