From fa1bf06f2c120037d2f996c3ac5b402805fac0d8 Mon Sep 17 00:00:00 2001
From: SotrForgotten <i@omc.hk>
Date: Fri, 29 Jul 2016 09:37:59 +0800
Subject: [PATCH] ticking optimizations


diff --git a/src/main/java/net/minecraft/server/ChunkProviderServer.java b/src/main/java/net/minecraft/server/ChunkProviderServer.java
index b399f6a..67a5547 100644
--- a/src/main/java/net/minecraft/server/ChunkProviderServer.java
+++ b/src/main/java/net/minecraft/server/ChunkProviderServer.java
@@ -182,9 +182,7 @@ public class ChunkProviderServer implements IChunkProvider {
                 ChunkIOExecutor.queueChunkLoad(world, loader, this, i, j, runnable);
                 return null;
             } else {
-                synchronized(this) {
-					chunk = ChunkIOExecutor.syncChunkLoad(world, loader, this, i, j);
-				}
+				chunk = ChunkIOExecutor.syncChunkLoad(world, loader, this, i, j);
             }
         } else if (chunk == null && generate) {
             chunk = originalGetChunkAt(i, j);
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index bf23f42..3f3feb5 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -828,7 +828,6 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
         if(this.autoSaveOrdered) {
             this.autoSaveNextWorld();
         }
-		 
 		long tickTime = System.nanoTime() - i;
         this.migot.checkTickTime(tickTime);
         // Migot end
@@ -900,14 +899,10 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
 
 		this.cancelHeavyCalculationsForAllWorlds(false); // Migot
 
-        int i;
-
-        for (i = 0; i < this.worlds.size(); ++i) { // CraftBukkit
+        for (WorldServer worldserver : this.worlds) { // CraftBukkit
             long j = System.nanoTime();
 
             // if (i == 0 || this.getAllowNether()) {
-                WorldServer worldserver = this.worlds.get(i);
-				
                 this.methodProfiler.a(worldserver.getWorldData().getName());
                 /* Drop global time updates
                 if (this.ticks % 20 == 0) {
@@ -925,9 +920,9 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
                 try {
                     worldserver.timings.doTick.startTiming(); // Spigot
 					// Torch start
-					Thread worldtick = new Thread(new WorldTickThread(worldserver), "World Ticking Thread");
-                    // worldserver.doTick();
-					worldtick.start(); // do server tick
+					// Thread worldtick = new Thread(new WorldTickThread(worldserver), "World Ticking Thread");
+                    worldserver.doTick();
+					// worldtick.start(); // do server tick
 					// Torch end
                     worldserver.timings.doTick.stopTiming(); // Spigot
                 } catch (Throwable throwable) {
@@ -976,15 +971,20 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
         }
 		
 		this.migot.cancelTimerTask(false); // Migot
-
         this.methodProfiler.c("connection");
+		
         MinecraftTimings.connectionTimer.startTiming(); // Spigot
         this.am().c();
         MinecraftTimings.connectionTimer.stopTiming(); // Spigot
+		
         this.methodProfiler.c("players");
+		
         MinecraftTimings.playerListTimer.startTiming(); // Spigot
-        this.v.tick();
+        // this.v.tick();
+		PlayerListTickTask playerlist_ticktask = new PlayerListTickTask(this.v);
+		playerlist_ticktask.fork();
         MinecraftTimings.playerListTimer.stopTiming(); // Spigot
+		
         this.methodProfiler.c("tickables");
 
         MinecraftTimings.tickablesTimer.startTiming(); // Spigot
@@ -997,8 +997,14 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
         this.methodProfiler.b();
 		processNetworkQueue(); // Paper
     }
-
+	
 	// Torch start
+	class PlayerListTickTask extends RecursiveAction {
+		PlayerList playerlist;
+		PlayerListTickTask(PlayerList playerlist) { this.playerlist = playerlist; }
+        public void compute() { playerlist.tick(); }
+    }
+	
 	class WorldTickThread extends Thread {
 		WorldServer worldserver;
 		WorldTickThread(WorldServer worldserver) {
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index 778d1ce..e08eaa7 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -1688,7 +1688,7 @@ public abstract class World implements IBlockAccess {
             // Paper end
             tickPosition = (tickPosition < entityList.size()) ? tickPosition : 0;
             entity = (Entity) this.entityList.get(this.tickPosition);
-			synchronized(this) { tick_hose(entity); }
+			tick_hose(entity);
             // CraftBukkit end
         }
         guardEntityList = false; // Spigot
@@ -3498,18 +3498,6 @@ public abstract class World implements IBlockAccess {
         return this.B;
     }
 	
-	public class WT_Pool extends RecursiveAction {
-
-        public WT_Pool(){
-            
-        }
-
-        @Override
-        protected void compute() {
-            t();
-        }
-    }
-	
 	class get_en extends RecursiveAction {
         World world;
         @Nullable Entity entity;
diff --git a/src/main/java/net/minecraft/server/WorldServer.java b/src/main/java/net/minecraft/server/WorldServer.java
index e4bf6f4..49812d9 100644
--- a/src/main/java/net/minecraft/server/WorldServer.java
+++ b/src/main/java/net/minecraft/server/WorldServer.java
@@ -251,7 +251,7 @@ public class WorldServer extends World implements IAsyncTaskHandler {
 
         timings.doChunkUnload.startTiming(); // Spigot
         this.methodProfiler.c("chunkSource");
-		synchronized(this) { this.chunkProvider.unloadChunks(); }
+		this.chunkProvider.unloadChunks();
         int j = this.a(1.0F);
 
         if (j != this.af()) {
-- 
2.8.2.windows.1

