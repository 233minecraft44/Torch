From 1da4b6c59e2ca37bf49714b1abe0da3066c7c121 Mon Sep 17 00:00:00 2001
From: SotrForgotten <i@omc.hk>
Date: Tue, 2 Aug 2016 09:19:14 +0800
Subject: [PATCH] Configruable tab complete alternatively


diff --git a/src/main/java/de/minetick/MigotConfig.java b/src/main/java/de/minetick/MigotConfig.java
index b55597a..936a302 100644
--- a/src/main/java/de/minetick/MigotConfig.java
+++ b/src/main/java/de/minetick/MigotConfig.java
@@ -43,8 +43,9 @@ public class MigotConfig {
     }
 
     private void loadConfigContent() {
-		AutoSaveEnabled = configuration.getBoolean("settings.auto-save", false);
+		AutoSaveEnabled = configuration.getBoolean("auto-save", false);
 		ForkPingEnabled = configuration.getBoolean("settings.fork-ping", false);
+		DisableTabComplete = configuration.getBoolean("settings.disable-tab-complete", false);
     }
 
     private FileConfiguration loadConfig(File file) throws IOException, InvalidConfigurationException {
@@ -74,4 +75,9 @@ public class MigotConfig {
 	public boolean getForkPingEnabled() {
         return ForkPingEnabled;
     }
+	
+	boolean DisableTabComplete = false;
+	public boolean getDisableTabComplete() {
+        return DisableTabComplete;
+    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/server/WorldServer.java b/src/main/java/net/minecraft/server/WorldServer.java
index 49812d9..e642de7 100644
--- a/src/main/java/net/minecraft/server/WorldServer.java
+++ b/src/main/java/net/minecraft/server/WorldServer.java
@@ -225,21 +225,21 @@ public class WorldServer extends World implements IAsyncTaskHandler {
 
     public void doTick() {
         super.doTick();
+		/*
         if (this.getWorldData().isHardcore() && this.getDifficulty() != EnumDifficulty.HARD) {
             this.getWorldData().setDifficulty(EnumDifficulty.HARD);
         }
-
+		*/
         this.worldProvider.k().b();
         if (this.everyoneDeeplySleeping()) {
             if (this.getGameRules().getBoolean("doDaylightCycle")) {
-                long i = this.worldData.getDayTime() + 24000L;
-
-                this.worldData.setDayTime(i - i % 24000L);
+                // long i = this.worldData.getDayTime() + 24000L;
+                // this.worldData.setDayTime(i - i % 24000L);
+				this.worldData.setDayTime(0L);
             }
 
             this.f();
         }
-
         // CraftBukkit start - Only call spawner if we have players online and the world allows for mobs or animals
         long time = this.worldData.getTime();
         if (this.getGameRules().getBoolean("doMobSpawning") && this.worldData.getType() != WorldType.DEBUG_ALL_BLOCK_STATES && (this.allowMonsters || this.allowAnimals) && (this instanceof WorldServer && this.players.size() > 0)) {
diff --git a/src/main/java/org/bukkit/command/SimpleCommandMap.java b/src/main/java/org/bukkit/command/SimpleCommandMap.java
index d127190..6e7b80d 100644
--- a/src/main/java/org/bukkit/command/SimpleCommandMap.java
+++ b/src/main/java/org/bukkit/command/SimpleCommandMap.java
@@ -23,10 +23,13 @@ import org.bukkit.command.defaults.*;
 import org.bukkit.entity.Player;
 import org.bukkit.util.StringUtil;
 
+import de.minetick.MigotConfig;
+
 public class SimpleCommandMap implements CommandMap {
     private static final Pattern PATTERN_ON_SPACE = Pattern.compile(" ", Pattern.LITERAL);
     protected final Map<String, Command> knownCommands = new HashMap<String, Command>();
     private final Server server;
+	private MigotConfig config;
 
     public SimpleCommandMap(final Server server) {
         this.server = server;
@@ -86,7 +89,7 @@ public class SimpleCommandMap implements CommandMap {
         // register("bukkit", new ParticleCommand());
         // register("bukkit", new SetBlockCommand());
         // register("bukkit", new TriggerCommand());
-		 register("bukkit", new GCCommand()); // Torch - gc
+		register("bukkit", new GCCommand()); // Torch - gc
     }
 
     /**
@@ -230,6 +233,10 @@ public class SimpleCommandMap implements CommandMap {
      * This code was copied, except for the noted change, from tabComplete(CommandSender sender, String cmdLine)
      */
     public List<String> tabComplete(CommandSender sender, String cmdLine, Location location) {
+		if (config.getDisableTabComplete()) {
+			return null;
+		}
+		
         Validate.notNull(sender, "Sender cannot be null");
         Validate.notNull(cmdLine, "Command line cannot null");
 
diff --git a/src/main/resources/configurations/migot.yml b/src/main/resources/configurations/migot.yml
index 444a7c6..1afbb3c 100644
--- a/src/main/resources/configurations/migot.yml
+++ b/src/main/resources/configurations/migot.yml
@@ -3,6 +3,7 @@
 # 
 # ( GH: https://github.com/Poweruser/Migot )
 
+auto-save: false
 settings:
-  auto-save: false
-  fork-ping: false
\ No newline at end of file
+  fork-ping: false
+  disable-tab-complete: false
\ No newline at end of file
-- 
2.8.2.windows.1

