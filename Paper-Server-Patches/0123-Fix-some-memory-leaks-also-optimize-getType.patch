From c194e6e664577137b2ed20df2b33e77051944675 Mon Sep 17 00:00:00 2001
From: SotrForgotten <i@omc.hk>
Date: Sat, 16 Jul 2016 01:43:54 +0800
Subject: [PATCH] Fix some memory leaks also optimize getType


diff --git a/src/main/java/net/minecraft/server/DataPaletteBlock.java b/src/main/java/net/minecraft/server/DataPaletteBlock.java
index 5fb7ba0..b6b7a1d 100644
--- a/src/main/java/net/minecraft/server/DataPaletteBlock.java
+++ b/src/main/java/net/minecraft/server/DataPaletteBlock.java
@@ -6,7 +6,7 @@ public class DataPaletteBlock implements DataPaletteExpandable {
 
     private static final DataPalette d = new DataPaletteGlobal();
     protected static final IBlockData a = Blocks.AIR.getBlockData();
-    protected DataBits b;
+    protected DataBits b; // Paper - nope
     protected DataPalette c;
     private int e = 0;
 	private final IBlockData[] predefinedBlockData; // Paper - Anti-Xray - Blocks used for obfuscation (since 1.9 MC uses DataPalettes which have to be changed if more different blocks are used in a ChunkSection -> to avoid that while setting the fake-blocks we add them from the beginning)
@@ -182,7 +182,7 @@ public class DataPaletteBlock implements DataPaletteExpandable {
     }
 
     public int a() {
-        return 1 + this.c.a() + PacketDataSerializer.a(this.b.b()) + this.b.a().length * 8;
+		return 1 + this.c.a() + PacketDataSerializer.a(this.b.b()) + this.b.a().length * 8;
         // Paper end
     }
 }
diff --git a/src/main/java/net/minecraft/server/EnchantmentManager.java b/src/main/java/net/minecraft/server/EnchantmentManager.java
new file mode 100644
index 0000000..fd4226c
--- /dev/null
+++ b/src/main/java/net/minecraft/server/EnchantmentManager.java
@@ -0,0 +1,420 @@
+package net.minecraft.server;
+
+import com.google.common.collect.Lists;
+import com.google.common.collect.Maps;
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.LinkedHashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.Random;
+import java.util.Map.Entry;
+import javax.annotation.Nullable;
+
+public class EnchantmentManager {
+
+    private static final Random a = new Random();
+    private static final EnchantmentManager.EnchantmentModifierProtection b = new EnchantmentManager.EnchantmentModifierProtection((EnchantmentManager.SyntheticClass_1) null);
+    private static final EnchantmentManager.EnchantmentModifierDamage c = new EnchantmentManager.EnchantmentModifierDamage((EnchantmentManager.SyntheticClass_1) null);
+    private static final EnchantmentManager.EnchantmentModifierThorns d = new EnchantmentManager.EnchantmentModifierThorns((EnchantmentManager.SyntheticClass_1) null);
+    private static final EnchantmentManager.EnchantmentModifierArthropods e = new EnchantmentManager.EnchantmentModifierArthropods((EnchantmentManager.SyntheticClass_1) null);
+
+    public static int getEnchantmentLevel(Enchantment enchantment, @Nullable ItemStack itemstack) {
+        if (itemstack == null) {
+            return 0;
+        } else {
+            NBTTagList nbttaglist = itemstack.getEnchantments();
+
+            if (nbttaglist == null) {
+                return 0;
+            } else {
+                for (int i = 0; i < nbttaglist.size(); ++i) {
+                    Enchantment enchantment1 = Enchantment.c(nbttaglist.get(i).getShort("id"));
+                    short short0 = nbttaglist.get(i).getShort("lvl");
+
+                    if (enchantment1 == enchantment) {
+                        return short0;
+                    }
+                }
+
+                return 0;
+            }
+        }
+    }
+
+    public static Map<Enchantment, Integer> a(ItemStack itemstack) {
+        LinkedHashMap linkedhashmap = Maps.newLinkedHashMap();
+        NBTTagList nbttaglist = itemstack.getItem() == Items.ENCHANTED_BOOK ? Items.ENCHANTED_BOOK.h(itemstack) : itemstack.getEnchantments();
+
+        if (nbttaglist != null) {
+            for (int i = 0; i < nbttaglist.size(); ++i) {
+                Enchantment enchantment = Enchantment.c(nbttaglist.get(i).getShort("id"));
+                short short0 = nbttaglist.get(i).getShort("lvl");
+
+                linkedhashmap.put(enchantment, Integer.valueOf(short0));
+            }
+        }
+
+        return linkedhashmap;
+    }
+
+    public static void a(Map<Enchantment, Integer> map, ItemStack itemstack) {
+        NBTTagList nbttaglist = new NBTTagList();
+        Iterator iterator = map.entrySet().iterator();
+
+        while (iterator.hasNext()) {
+            Entry entry = (Entry) iterator.next();
+            Enchantment enchantment = (Enchantment) entry.getKey();
+
+            if (enchantment != null) {
+                int i = ((Integer) entry.getValue()).intValue();
+                NBTTagCompound nbttagcompound = new NBTTagCompound();
+
+                nbttagcompound.setShort("id", (short) Enchantment.getId(enchantment));
+                nbttagcompound.setShort("lvl", (short) i);
+                nbttaglist.add(nbttagcompound);
+                if (itemstack.getItem() == Items.ENCHANTED_BOOK) {
+                    Items.ENCHANTED_BOOK.a(itemstack, new WeightedRandomEnchant(enchantment, i));
+                }
+            }
+        }
+
+        if (nbttaglist.isEmpty()) {
+            if (itemstack.hasTag()) {
+                itemstack.getTag().remove("ench");
+            }
+        } else if (itemstack.getItem() != Items.ENCHANTED_BOOK) {
+            itemstack.a("ench", (NBTBase) nbttaglist);
+        }
+
+    }
+
+    private static void a(EnchantmentManager.EnchantmentModifier enchantmentmanager_enchantmentmodifier, ItemStack itemstack) {
+        if (itemstack != null) {
+            NBTTagList nbttaglist = itemstack.getEnchantments();
+
+            if (nbttaglist != null) {
+                for (int i = 0; i < nbttaglist.size(); ++i) {
+                    short short0 = nbttaglist.get(i).getShort("id");
+                    short short1 = nbttaglist.get(i).getShort("lvl");
+
+                    if (Enchantment.c(short0) != null) {
+                        enchantmentmanager_enchantmentmodifier.a(Enchantment.c(short0), short1);
+                    }
+                }
+
+            }
+        }
+    }
+
+    private static void a(EnchantmentManager.EnchantmentModifier enchantmentmanager_enchantmentmodifier, Iterable<ItemStack> iterable) {
+        Iterator iterator = iterable.iterator();
+
+        while (iterator.hasNext()) {
+            ItemStack itemstack = (ItemStack) iterator.next();
+
+            a(enchantmentmanager_enchantmentmodifier, itemstack);
+        }
+
+    }
+
+    public static int a(Iterable<ItemStack> iterable, DamageSource damagesource) {
+        EnchantmentManager.b.a = 0;
+        EnchantmentManager.b.b = damagesource;
+        a((EnchantmentManager.EnchantmentModifier) EnchantmentManager.b, iterable);
+        return EnchantmentManager.b.a;
+    }
+
+    public static float a(ItemStack itemstack, EnumMonsterType enummonstertype) {
+        EnchantmentManager.c.a = 0.0F;
+        EnchantmentManager.c.b = enummonstertype;
+        a((EnchantmentManager.EnchantmentModifier) EnchantmentManager.c, itemstack);
+        return EnchantmentManager.c.a;
+    }
+
+    public static void a(EntityLiving entityliving, Entity entity) {
+        EnchantmentManager.d.b = entity;
+        EnchantmentManager.d.a = entityliving;
+        if (entityliving != null) {
+            a((EnchantmentManager.EnchantmentModifier) EnchantmentManager.d, entityliving.aG());
+        }
+
+        if (entity instanceof EntityHuman) {
+            a((EnchantmentManager.EnchantmentModifier) EnchantmentManager.d, entityliving.getItemInMainHand());
+        }
+
+        EnchantmentManager.d.a = null;
+        EnchantmentManager.d.b = null;
+    }
+
+    public static void b(EntityLiving entityliving, Entity entity) {
+        EnchantmentManager.e.a = entityliving;
+        EnchantmentManager.e.b = entity;
+        if (entityliving != null) {
+            a((EnchantmentManager.EnchantmentModifier) EnchantmentManager.e, entityliving.aG());
+        }
+
+        if (entityliving instanceof EntityHuman) {
+            a((EnchantmentManager.EnchantmentModifier) EnchantmentManager.e, entityliving.getItemInMainHand());
+        }
+
+		EnchantmentManager.e.a = null;
+        EnchantmentManager.e.b = null;
+    }
+
+    public static int a(Enchantment enchantment, EntityLiving entityliving) {
+        Iterable iterable = enchantment.a(entityliving);
+
+        if (iterable == null) {
+            return 0;
+        } else {
+            int i = 0;
+            Iterator iterator = iterable.iterator();
+
+            while (iterator.hasNext()) {
+                ItemStack itemstack = (ItemStack) iterator.next();
+                int j = getEnchantmentLevel(enchantment, itemstack);
+
+                if (j > i) {
+                    i = j;
+                }
+            }
+
+            return i;
+        }
+    }
+
+    public static int a(EntityLiving entityliving) {
+        return a(Enchantments.KNOCKBACK, entityliving);
+    }
+
+    public static int getFireAspectEnchantmentLevel(EntityLiving entityliving) {
+        return a(Enchantments.FIRE_ASPECT, entityliving);
+    }
+
+    public static int getOxygenEnchantmentLevel(EntityLiving entityliving) {
+        return a(Enchantments.OXYGEN, entityliving);
+    }
+
+    public static int d(EntityLiving entityliving) {
+        return a(Enchantments.DEPTH_STRIDER, entityliving);
+    }
+
+    public static int getDigSpeedEnchantmentLevel(EntityLiving entityliving) {
+        return a(Enchantments.DIG_SPEED, entityliving);
+    }
+
+    public static int f(EntityLiving entityliving) {
+        return a(Enchantments.LUCK, entityliving);
+    }
+
+    public static int g(EntityLiving entityliving) {
+        return a(Enchantments.LURE, entityliving);
+    }
+
+    public static int h(EntityLiving entityliving) {
+        return a(Enchantments.LOOT_BONUS_MOBS, entityliving);
+    }
+
+    public static boolean i(EntityLiving entityliving) {
+        return a(Enchantments.WATER_WORKER, entityliving) > 0;
+    }
+
+    @Nullable
+    public static ItemStack b(Enchantment enchantment, EntityLiving entityliving) {
+        Iterable iterable = enchantment.a(entityliving);
+
+        if (iterable == null) {
+            return null;
+        } else {
+            ArrayList arraylist = Lists.newArrayList();
+            Iterator iterator = iterable.iterator();
+
+            while (iterator.hasNext()) {
+                ItemStack itemstack = (ItemStack) iterator.next();
+
+                if (itemstack != null && getEnchantmentLevel(enchantment, itemstack) > 0) {
+                    arraylist.add(itemstack);
+                }
+            }
+
+            return arraylist.isEmpty() ? null : (ItemStack) arraylist.get(entityliving.getRandom().nextInt(arraylist.size()));
+        }
+    }
+
+    public static int a(Random random, int i, int j, ItemStack itemstack) {
+        Item item = itemstack.getItem();
+        int k = item.c();
+
+        if (k <= 0) {
+            return 0;
+        } else {
+            if (j > 15) {
+                j = 15;
+            }
+
+            int l = random.nextInt(8) + 1 + (j >> 1) + random.nextInt(j + 1);
+
+            return i == 0 ? Math.max(l / 3, 1) : (i == 1 ? l * 2 / 3 + 1 : Math.max(l, j * 2));
+        }
+    }
+
+    public static ItemStack a(Random random, ItemStack itemstack, int i, boolean flag) {
+        boolean flag1 = itemstack.getItem() == Items.BOOK;
+        List list = b(random, itemstack, i, flag);
+
+        if (flag1) {
+            itemstack.setItem(Items.ENCHANTED_BOOK);
+        }
+
+        Iterator iterator = list.iterator();
+
+        while (iterator.hasNext()) {
+            WeightedRandomEnchant weightedrandomenchant = (WeightedRandomEnchant) iterator.next();
+
+            if (flag1) {
+                Items.ENCHANTED_BOOK.a(itemstack, weightedrandomenchant);
+            } else {
+                itemstack.addEnchantment(weightedrandomenchant.enchantment, weightedrandomenchant.level);
+            }
+        }
+
+        return itemstack;
+    }
+
+    public static List<WeightedRandomEnchant> b(Random random, ItemStack itemstack, int i, boolean flag) {
+        ArrayList arraylist = Lists.newArrayList();
+        Item item = itemstack.getItem();
+        int j = item.c();
+
+        if (j <= 0) {
+            return arraylist;
+        } else {
+            i += 1 + random.nextInt(j / 4 + 1) + random.nextInt(j / 4 + 1);
+            float f = (random.nextFloat() + random.nextFloat() - 1.0F) * 0.15F;
+
+            i = MathHelper.clamp(Math.round((float) i + (float) i * f), 1, Integer.MAX_VALUE);
+            List list = a(i, itemstack, flag);
+
+            if (!list.isEmpty()) {
+                arraylist.add(WeightedRandom.a(random, list));
+
+                while (random.nextInt(50) <= i) {
+                    a(list, (WeightedRandomEnchant) SystemUtils.a(arraylist));
+                    if (list.isEmpty()) {
+                        break;
+                    }
+
+                    arraylist.add(WeightedRandom.a(random, list));
+                    i /= 2;
+                }
+            }
+
+            return arraylist;
+        }
+    }
+
+    public static void a(List<WeightedRandomEnchant> list, WeightedRandomEnchant weightedrandomenchant) {
+        Iterator iterator = list.iterator();
+
+        while (iterator.hasNext()) {
+            if (!weightedrandomenchant.enchantment.a(((WeightedRandomEnchant) iterator.next()).enchantment)) {
+                iterator.remove();
+            }
+        }
+
+    }
+
+    public static List<WeightedRandomEnchant> a(int i, ItemStack itemstack, boolean flag) {
+        ArrayList arraylist = Lists.newArrayList();
+        Item item = itemstack.getItem();
+        boolean flag1 = itemstack.getItem() == Items.BOOK;
+        Iterator iterator = Enchantment.enchantments.iterator();
+
+        while (iterator.hasNext()) {
+            Enchantment enchantment = (Enchantment) iterator.next();
+
+            if ((!enchantment.e() || flag) && (enchantment.itemTarget.canEnchant(item) || flag1)) {
+                for (int j = enchantment.getMaxLevel(); j > enchantment.getStartLevel() - 1; --j) {
+                    if (i >= enchantment.a(j) && i <= enchantment.b(j)) {
+                        arraylist.add(new WeightedRandomEnchant(enchantment, j));
+                        break;
+                    }
+                }
+            }
+        }
+
+        return arraylist;
+    }
+
+    static class SyntheticClass_1 {    }
+
+    static final class EnchantmentModifierArthropods implements EnchantmentManager.EnchantmentModifier {
+
+        public EntityLiving a;
+        public Entity b;
+
+        private EnchantmentModifierArthropods() {}
+
+        public void a(Enchantment enchantment, int i) {
+            enchantment.a(this.a, this.b, i);
+        }
+
+        EnchantmentModifierArthropods(EnchantmentManager.SyntheticClass_1 enchantmentmanager_syntheticclass_1) {
+            this();
+        }
+    }
+
+    static final class EnchantmentModifierThorns implements EnchantmentManager.EnchantmentModifier {
+
+        public EntityLiving a;
+        public Entity b;
+
+        private EnchantmentModifierThorns() {}
+
+        public void a(Enchantment enchantment, int i) {
+            enchantment.b(this.a, this.b, i);
+        }
+
+        EnchantmentModifierThorns(EnchantmentManager.SyntheticClass_1 enchantmentmanager_syntheticclass_1) {
+            this();
+        }
+    }
+
+    static final class EnchantmentModifierDamage implements EnchantmentManager.EnchantmentModifier {
+
+        public float a;
+        public EnumMonsterType b;
+
+        private EnchantmentModifierDamage() {}
+
+        public void a(Enchantment enchantment, int i) {
+            this.a += enchantment.a(i, this.b);
+        }
+
+        EnchantmentModifierDamage(EnchantmentManager.SyntheticClass_1 enchantmentmanager_syntheticclass_1) {
+            this();
+        }
+    }
+
+    static final class EnchantmentModifierProtection implements EnchantmentManager.EnchantmentModifier {
+
+        public int a;
+        public DamageSource b;
+
+        private EnchantmentModifierProtection() {}
+
+        public void a(Enchantment enchantment, int i) {
+            this.a += enchantment.a(i, this.b);
+        }
+
+        EnchantmentModifierProtection(EnchantmentManager.SyntheticClass_1 enchantmentmanager_syntheticclass_1) {
+            this();
+        }
+    }
+
+    interface EnchantmentModifier {
+
+        void a(Enchantment enchantment, int i);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/EntityInsentient.java b/src/main/java/net/minecraft/server/EntityInsentient.java
index bb767b8..b35d349 100644
--- a/src/main/java/net/minecraft/server/EntityInsentient.java
+++ b/src/main/java/net/minecraft/server/EntityInsentient.java
@@ -9,6 +9,7 @@ import java.util.Random;
 import java.util.UUID;
 import javax.annotation.Nullable;
 import de.minetick.pathsearch.MigotNavigation; // Migot
+import java.lang.ref.WeakReference;
 
 import java.util.concurrent.RecursiveAction;
 import org.hose.Tick_Pool;
@@ -35,7 +36,7 @@ public abstract class EntityInsentient extends EntityLiving {
     protected NavigationAbstract navigation;
     public PathfinderGoalSelector goalSelector;
     public PathfinderGoalSelector targetSelector;
-    private EntityLiving goalTarget;
+    private WeakReference<EntityLiving> goalTarget = new WeakReference<EntityLiving>(null);
     private EntitySenses bv;
     private ItemStack[] bw = new ItemStack[2];
     public float[] dropChanceHand = new float[2];
@@ -129,7 +130,7 @@ public abstract class EntityInsentient extends EntityLiving {
 
     @Nullable
     public EntityLiving getGoalTarget() {
-        return this.goalTarget;
+        return this.goalTarget.get();
     }
 
     public void setGoalTarget(@Nullable EntityLiving entityliving) {
@@ -162,7 +163,7 @@ public abstract class EntityInsentient extends EntityLiving {
                 entityliving = null;
             }
         }
-        this.goalTarget = entityliving;
+        this.goalTarget = new WeakReference<EntityLiving>(entityliving);
         return true;
         // CraftBukkit end
     }
diff --git a/src/main/java/net/minecraft/server/EntityTNTPrimed.java b/src/main/java/net/minecraft/server/EntityTNTPrimed.java
index 436bbb8..51fe30b 100644
--- a/src/main/java/net/minecraft/server/EntityTNTPrimed.java
+++ b/src/main/java/net/minecraft/server/EntityTNTPrimed.java
@@ -83,6 +83,43 @@ public class EntityTNTPrimed extends Entity {
         }
 
     }
+	
+	// SportBukkit start - Prevent TNT from being pushed in water by overriding the method that applies the motion
+    @Override
+    public boolean aj() {
+        if(this.world.getServer().getWaterPushesTNT()) return super.aj();
+
+        // Preserve velocity while calling the super method
+        double oldMotX = this.motX;
+        double oldMotY = this.motY;
+        double oldMotZ = this.motZ;
+
+        super.aj();
+
+        this.motX = oldMotX;
+        this.motY = oldMotY;
+        this.motZ = oldMotZ;
+
+        if(this.inWater) {
+            // Send position and velocity updates to nearby players on every tick while the TNT is in water.
+            // This does pretty well at keeping their clients in sync with the server.
+            EntityTrackerEntry ete = ((WorldServer) this.getWorld()).getTracker().trackedEntities.get(this.getId());
+            if(ete != null) {
+                PacketPlayOutEntityVelocity velocityPacket = new PacketPlayOutEntityVelocity(this);
+                PacketPlayOutEntityTeleport positionPacket = new PacketPlayOutEntityTeleport(this);
+
+                for(EntityPlayer viewer : ete.trackedPlayers) {
+                    if((viewer.locX - this.locX) * (viewer.locY - this.locY) * (viewer.locZ - this.locZ) < 16 * 16) {
+                        viewer.playerConnection.sendPacket(velocityPacket);
+                        viewer.playerConnection.sendPacket(positionPacket);
+                    }
+                }
+            }
+        }
+
+        return this.inWater;
+    }
+    // SportBukkit end
 
     private void explode() {
         // CraftBukkit start
@@ -94,7 +131,7 @@ public class EntityTNTPrimed extends Entity {
         server.getPluginManager().callEvent(event);
 
         if (!event.isCancelled()) {
-            this.world.createExplosion(this, this.locX, this.locY + (double) (this.length / 2.0F), this.locZ, event.getRadius(), event.getFire(), true);
+            this.world.createExplosion(this, this.locX, this.locY + (double) (this.length / 16.0F), this.locZ, explosive.getYield(), explosive.isIncendiary(), true);
         }
         // CraftBukkit end
     }
@@ -120,7 +157,7 @@ public class EntityTNTPrimed extends Entity {
     }
 
     public float getHeadHeight() {
-        return world.paperConfig.oldCannonBehaviors ? this.length / 2 : 0.0F; // Paper - Old TNT cannon behaviors
+        return world.paperConfig.oldCannonBehaviors ? this.length / 2 : this.length / 16f; // Paper - Old TNT cannon behaviors
     }
 
     public void setFuseTicks(int i) {
diff --git a/src/main/java/net/minecraft/server/NetworkManager.java b/src/main/java/net/minecraft/server/NetworkManager.java
index 097c637..65aabb3 100644
--- a/src/main/java/net/minecraft/server/NetworkManager.java
+++ b/src/main/java/net/minecraft/server/NetworkManager.java
@@ -248,6 +248,7 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet<?>> {
     }
 
     public void close(IChatBaseComponent ichatbasecomponent) {
+		this.i.clear();
         // Spigot Start
         this.preparing = false;
         // Spigot End
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalSwell.java b/src/main/java/net/minecraft/server/PathfinderGoalSwell.java
new file mode 100644
index 0000000..69865c6
--- /dev/null
+++ b/src/main/java/net/minecraft/server/PathfinderGoalSwell.java
@@ -0,0 +1,40 @@
+package net.minecraft.server;
+
+public class PathfinderGoalSwell extends PathfinderGoal {
+
+    EntityCreeper a;
+    // EntityLiving b;
+
+    public PathfinderGoalSwell(EntityCreeper entitycreeper) {
+        this.a = entitycreeper;
+        this.a(1);
+    }
+
+    public boolean a() {
+        EntityLiving entityliving = this.a.getGoalTarget();
+
+        return this.a.db() > 0 || entityliving != null && this.a.h(entityliving) < 9.0D;
+    }
+
+    public void c() {
+        this.a.getNavigation().o();
+        // this.b = this.a.getGoalTarget();
+    }
+
+    public void d() {
+        // this.b = null;
+    }
+
+    public void e() {
+        EntityLiving b = this.a.getGoalTarget();
+        if (b == null) {
+            this.a.a(-1);
+        } else if (this.a.h(b) > 49.0D) {
+            this.a.a(-1);
+        } else if (!this.a.getEntitySenses().a(b)) {
+            this.a.a(-1);
+        } else {
+            this.a.a(1);
+        }
+    }
+}
diff --git a/src/main/java/net/minecraft/server/PlayerList.java b/src/main/java/net/minecraft/server/PlayerList.java
index 6cc5630..17c6391 100644
--- a/src/main/java/net/minecraft/server/PlayerList.java
+++ b/src/main/java/net/minecraft/server/PlayerList.java
@@ -622,6 +622,7 @@ public abstract class PlayerList {
         BlockPosition blockposition1;
 
         // CraftBukkit start - fire PlayerRespawnEvent
+		this.players.add(entityplayer1); // Add player back to this list earlier than vanilla does
         if (location == null) {
             boolean isBedSpawn = false;
             CraftWorld cworld = (CraftWorld) this.server.server.getWorld(entityplayer.spawnWorld);
@@ -682,10 +683,13 @@ public abstract class PlayerList {
         entityplayer1.playerConnection.sendPacket(new PacketPlayOutExperience(entityplayer1.exp, entityplayer1.expTotal, entityplayer1.expLevel));
         this.b(entityplayer1, worldserver);
         this.f(entityplayer1);
-        if (!entityplayer.playerConnection.isDisconnected()) {
+        // Don't re-add player to player list if disconnected
+        if (entityplayer.playerConnection.isDisconnected()) {
+            this.players.remove(entityplayer1);
+        } else {
             worldserver.getPlayerChunkMap().addPlayer(entityplayer1);
             worldserver.addEntity(entityplayer1);
-            this.players.add(entityplayer1);
+            // this.players.add(entityplayer1);
             this.playersByName.put(entityplayer1.getName(), entityplayer1); // Spigot
             this.j.put(entityplayer1.getUniqueID(), entityplayer1);
         }
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index f12500b..6933354 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -1191,6 +1191,7 @@ public abstract class World implements IBlockAccess {
         entity.die();
         if (entity instanceof EntityHuman) {
             this.players.remove(entity);
+			
             // Spigot start
             for ( Object o : worldMaps.c )
             {
@@ -1209,6 +1210,7 @@ public abstract class World implements IBlockAccess {
                 }
             }
             // Spigot end
+			
             this.everyoneSleeping();
             this.c(entity);
         }
diff --git a/src/main/java/net/minecraft/server/WorldServer.java b/src/main/java/net/minecraft/server/WorldServer.java
index 2f16136..8e7e556 100644
--- a/src/main/java/net/minecraft/server/WorldServer.java
+++ b/src/main/java/net/minecraft/server/WorldServer.java
@@ -722,6 +722,7 @@ public class WorldServer extends World implements IAsyncTaskHandler {
         if (this.worldData.getType() == WorldType.DEBUG_ALL_BLOCK_STATES) {
             return false;
         } else {
+			
             int i = this.nextTickList.size();
 
             if (false) { // CraftBukkit
diff --git a/src/main/java/org/bukkit/Bukkit.java b/src/main/java/org/bukkit/Bukkit.java
index 15539da..c568af1 100644
--- a/src/main/java/org/bukkit/Bukkit.java
+++ b/src/main/java/org/bukkit/Bukkit.java
@@ -370,6 +370,13 @@ public final class Bukkit {
     public static long getConnectionThrottle() {
         return server.getConnectionThrottle();
     }
+	
+	/**
+     * @see Server#getWaterPushesTNT()
+     */
+    public static boolean getWaterPushesTNT() {
+        return server.getWaterPushesTNT();
+    }
 
     /**
      * Gets default ticks per animal spawns value.
diff --git a/src/main/java/org/bukkit/Server.java b/src/main/java/org/bukkit/Server.java
index 1537bc7..dd1a694 100644
--- a/src/main/java/org/bukkit/Server.java
+++ b/src/main/java/org/bukkit/Server.java
@@ -845,6 +845,11 @@ public interface Server extends PluginMessageRecipient {
      * @return the ambient spawn limit
      */
     int getAmbientSpawnLimit();
+	
+	/**
+     * Should flowing water move primed TNT entities?
+     */
+    public boolean getWaterPushesTNT();
 
     /**
      * Checks the current thread against the expected primary thread for the
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index d89f84c..daac03a 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -603,6 +603,11 @@ public final class CraftServer implements Server {
     }
 
     @Override
+	public boolean getWaterPushesTNT() {
+        return this.configuration.getBoolean("settings.water-pushes-tnt", true);
+    }
+
+    @Override
     public int getTicksPerAnimalSpawns() {
         return this.configuration.getInt("ticks-per.animal-spawns");
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/chunkio/ChunkIOExecutor.java b/src/main/java/org/bukkit/craftbukkit/chunkio/ChunkIOExecutor.java
index 085cabd..0d05c3e 100644
--- a/src/main/java/org/bukkit/craftbukkit/chunkio/ChunkIOExecutor.java
+++ b/src/main/java/org/bukkit/craftbukkit/chunkio/ChunkIOExecutor.java
@@ -15,22 +15,16 @@ public class ChunkIOExecutor {
     private static final AsynchronousExecutor<QueuedChunk, Chunk, Runnable, RuntimeException> instance = new AsynchronousExecutor<QueuedChunk, Chunk, Runnable, RuntimeException>(new ChunkIOProvider(), BASE_THREADS);
 
     public static Chunk syncChunkLoad(World world, IChunkLoader loader, ChunkProviderServer provider, int x, int z) {
-        synchronized(instance) { // Migot
             return instance.getSkipQueue(new QueuedChunk(x, z, loader, world, provider));
-        }
     }
 
     public static void queueChunkLoad(World world, IChunkLoader loader, ChunkProviderServer provider, int x, int z, Runnable runnable) {
-        synchronized(instance) { // Migot
             instance.add(new QueuedChunk(x, z, loader, world, provider), runnable);
-        }
     }
 
     // Abuses the fact that hashCode and equals for QueuedChunk only use world and coords
     public static void dropQueuedChunkLoad(World world, int x, int z, Runnable runnable) {
-        synchronized(instance) { // Migot
             instance.drop(new QueuedChunk(x, z, null, world, null), runnable);
-        }
     }
 
 	/*
-- 
2.8.2.windows.1

