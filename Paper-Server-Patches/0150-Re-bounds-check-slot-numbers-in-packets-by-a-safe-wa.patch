From 7d20fb8537646b9100e86c63cab44c8710a416c2 Mon Sep 17 00:00:00 2001
From: SotrForgotten <i@omc.hk>
Date: Sat, 16 Jul 2016 14:15:10 +0800
Subject: [PATCH] Re-bounds check slot numbers in packets by a safe way


diff --git a/src/main/java/net/minecraft/server/Container.java b/src/main/java/net/minecraft/server/Container.java
index 4852c4f..d714bd3 100644
--- a/src/main/java/net/minecraft/server/Container.java
+++ b/src/main/java/net/minecraft/server/Container.java
@@ -22,7 +22,14 @@ import org.bukkit.inventory.InventoryView;
 public abstract class Container {
 
     public List<ItemStack> b = Lists.newArrayList();
-	public List<Slot> c = Lists.newArrayList(); // Torch - Don't bounds check slot numbers in packets
+	// SportBukkit start - A lot of code expects get() to return null rather than throwing ArrayIndexOutOfBoundsException
+    public List<Slot> c = new ArrayList<Slot>() {
+        @Override
+        public Slot get(int index) {
+            return index < size() ? super.get(index) : null;
+        }
+    };
+    // SportBukkit end
     public int windowId;
     private int dragType = -1;
     private int g;
diff --git a/src/main/java/net/minecraft/server/NetworkManager.java b/src/main/java/net/minecraft/server/NetworkManager.java
index d378614..c69f62c 100644
--- a/src/main/java/net/minecraft/server/NetworkManager.java
+++ b/src/main/java/net/minecraft/server/NetworkManager.java
@@ -112,13 +112,12 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet<?>> {
 
         if (throwable instanceof TimeoutException) {
             chatmessage = new ChatMessage("disconnect.timeout", new Object[0]);
-			// NetworkManager.g.debug("Uncaught Exception", throwable); // Torch - Permit protocol hack
+			NetworkManager.g.debug("Uncaught Exception", throwable);
         } else {
             chatmessage = new ChatMessage("disconnect.genericReason", new Object[] { "Internal Exception: " + throwable});
-			// NetworkManager.g.fatal("Uncaught Exception", throwable); // Torch - Permit protocol hack
+			NetworkManager.g.fatal("Uncaught Exception", throwable);
         }
 
-		NetworkManager.g.debug(throwable);
         this.close(chatmessage);
         if (MinecraftServer.getServer().isDebugging()) throwable.printStackTrace(); // Spigot
     }
diff --git a/src/main/java/net/minecraft/server/PlayerConnection.java b/src/main/java/net/minecraft/server/PlayerConnection.java
index 9ff207f..4ab9354 100644
--- a/src/main/java/net/minecraft/server/PlayerConnection.java
+++ b/src/main/java/net/minecraft/server/PlayerConnection.java
@@ -111,26 +111,11 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
         return i ^ i >>> 7 ^ i >>> 4;
     }
 	
-	// SportBukkit start - queue packets sent before play state
-    private final java.util.Deque<Packet<?>> initialPackets = new java.util.ArrayDeque<Packet<?>>();
-    public void activate() {
-        if(networkManager.getPacketListener() == this) return;
-        networkManager.setPacketListener(this);
-        while(!initialPackets.isEmpty()) {
-            final Packet<?> packet = initialPackets.remove();
-            try {
-                sendPacket(packet);
-            } catch(RuntimeException e) {
-                LOGGER.error("Exception sending initial " + packet.getClass().getName(), e);
-            }
-        }
-    }
-    // SportBukkit end
 
     public PlayerConnection(MinecraftServer minecraftserver, NetworkManager networkmanager, EntityPlayer entityplayer) {
         this.minecraftServer = minecraftserver;
         this.networkManager = networkmanager;
-        // networkmanager.setPacketListener(this);
+        networkmanager.setPacketListener(this);
         this.player = entityplayer;
         entityplayer.playerConnection = this;
 		this.networkManager.channel.attr(PLAYER_ATTR_KEY).set(this.player); // TacoSpigot - set the player
@@ -1129,13 +1114,6 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
     }
 
     public void sendPacket(final Packet<?> packet) {
-		// SportBukkit - queue packets sent before play state
-        if(packet == null) return;
-        if(!equals(networkManager.getPacketListener())) {
-            initialPackets.add(packet);
-            return;
-        }
-        // SportBukkit end
         if (packet instanceof PacketPlayOutChat) {
             PacketPlayOutChat packetplayoutchat = (PacketPlayOutChat) packet;
             EntityHuman.EnumChatVisibility entityhuman_enumchatvisibility = this.player.getChatFlags();
@@ -1461,6 +1439,7 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
     public void a(PacketPlayInArmAnimation packetplayinarmanimation) {
         PlayerConnectionUtils.ensureMainThread(packetplayinarmanimation, this, this.player.x());
         if (this.player.dead) return; // CraftBukkit
+		if(packetplayinwindowclick.b() >= 0 && this.player.activeContainer.getSlot(packetplayinwindowclick.b()) == null) return; // SportBukkit - ignore packets with invalid slot
         this.player.resetIdleTimer();
         // CraftBukkit start - Raytrace to look for 'rogue armswings'
         float f1 = this.player.pitch;
diff --git a/src/main/java/net/minecraft/server/PlayerList.java b/src/main/java/net/minecraft/server/PlayerList.java
index eef75ab..3517762 100644
--- a/src/main/java/net/minecraft/server/PlayerList.java
+++ b/src/main/java/net/minecraft/server/PlayerList.java
@@ -145,11 +145,7 @@ public abstract class PlayerList {
         BlockPosition blockposition = worldserver.getSpawn();
 
         this.a(entityplayer, (EntityPlayer) null, worldserver);
-         // SportBukkit start - activate previously created PlayerConnection
-        // PlayerConnection playerconnection = new PlayerConnection(this.server, networkmanager, entityplayer);
-        PlayerConnection playerconnection = entityplayer.playerConnection;
-        playerconnection.activate();
-        // SportBukkit end
+        PlayerConnection playerconnection = new PlayerConnection(this.server, networkmanager, entityplayer);
 
         playerconnection.sendPacket(new PacketPlayOutLogin(entityplayer.getId(), entityplayer.playerInteractManager.getGameMode(), worlddata.isHardcore(), worldserver.worldProvider.getDimensionManager().getDimensionID(), worldserver.getDifficulty(), this.getMaxPlayers(), worlddata.getType(), worldserver.getGameRules().getBoolean("reducedDebugInfo")));
         entityplayer.getBukkitEntity().sendSupportedChannels(); // CraftBukkit
@@ -492,7 +488,6 @@ public abstract class PlayerList {
         SocketAddress socketaddress = loginlistener.networkManager.getSocketAddress();
 
         EntityPlayer entity = new EntityPlayer(server, server.getWorldServer(0), gameprofile, new PlayerInteractManager(server.getWorldServer(0)));
-		entity.playerConnection = new PlayerConnection(server, loginlistener.networkManager, entity); // SportBukkit - create this right away so it's never null
 		entity.protocolVersion = loginlistener.networkManager.protocolVersion; // Can't reach NetworkManager through CraftPlayer at this point, so copy the value
         Player player = entity.getBukkitEntity();
         PlayerLoginEvent event = new PlayerLoginEvent(player, hostname, ((java.net.InetSocketAddress) socketaddress).getAddress(), ((java.net.InetSocketAddress) loginlistener.networkManager.getRawAddress()).getAddress());
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryView.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryView.java
index b6c2f73..f8c303c 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryView.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryView.java
@@ -62,7 +62,8 @@ public class CraftInventoryView extends InventoryView {
         if (slot == -999) {
             return null;
         }
-        return CraftItemStack.asCraftMirror(container.getSlot(slot).getItem());
+        net.minecraft.server.Slot nmsSlot = container.getSlot(slot);
+        return nmsSlot == null ? null : CraftItemStack.asCraftMirror(nmsSlot.getItem());
     }
 
     public boolean isInTop(int rawSlot) {
-- 
2.8.2.windows.1

