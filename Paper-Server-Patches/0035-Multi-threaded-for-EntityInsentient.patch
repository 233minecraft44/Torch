From a434cf3c779853d42a377257f804edea4ac974c0 Mon Sep 17 00:00:00 2001
From: SotrForgotten <i@omc.hk>
Date: Sat, 2 Jul 2016 08:23:02 +0800
Subject: [PATCH] Multi threaded for EntityInsentient


diff --git a/src/main/java/net/minecraft/server/EntityInsentient.java b/src/main/java/net/minecraft/server/EntityInsentient.java
index da102e3..7e54d0a 100644
--- a/src/main/java/net/minecraft/server/EntityInsentient.java
+++ b/src/main/java/net/minecraft/server/EntityInsentient.java
@@ -9,6 +9,10 @@ import java.util.Random;
 import java.util.UUID;
 import javax.annotation.Nullable;
 
+import java.util.concurrent.RecursiveAction;
+import org.hose.Tick_Pool;
+import org.spigotmc.SpigotWorldConfig;
+
 // CraftBukkit start
 import org.bukkit.craftbukkit.event.CraftEventFactory;
 import org.bukkit.craftbukkit.entity.CraftLivingEntity;
@@ -24,7 +28,7 @@ public abstract class EntityInsentient extends EntityLiving {
     public int a_;
     protected int b_;
     private ControllerLook lookController;
-    protected ControllerMove moveController;
+    public ControllerMove moveController;
     protected ControllerJump g;
     private EntityAIBodyControl c;
     protected NavigationAbstract navigation;
@@ -624,7 +628,9 @@ public abstract class EntityInsentient extends EntityLiving {
         }
     }
 
-    protected final void doTick() {
+	navigation nav_task;
+    targetSelector tar_task;
+    protected final void doTick() {// Torch - Entityliving doTick
         ++this.ticksFarFromPlayer;
         this.world.methodProfiler.a("checkDespawn");
         this.L();
@@ -645,13 +651,22 @@ public abstract class EntityInsentient extends EntityLiving {
         this.bv.a();
         this.world.methodProfiler.b();
         this.world.methodProfiler.a("targetSelector");
-        this.targetSelector.a();
+        // this.targetSelector.a();
+		tar_task = new targetSelector();
+        tar_task.fork();
         this.world.methodProfiler.b();
         this.world.methodProfiler.a("goalSelector");
-        this.goalSelector.a();
+        // this.goalSelector.a();
+		try {
+            this.goalSelector.a();
+        } catch (Exception ex) {
+            world.getServer().getLogger().log(java.util.logging.Level.WARNING, "Entityliving doTick - Goal cannot find.");
+        }
         this.world.methodProfiler.b();
         this.world.methodProfiler.a("navigation");
-        this.navigation.l();
+        // this.navigation.l();
+		nav_task = new navigation();
+        nav_task.fork();
         this.world.methodProfiler.b();
         this.world.methodProfiler.a("mob tick");
         this.M();
@@ -1252,4 +1267,30 @@ public abstract class EntityInsentient extends EntityLiving {
 
         private EnumEntityPositionType() {}
     }
+	
+	public class navigation extends RecursiveAction {
+
+        public navigation(){
+        }
+
+        @Override
+        protected void compute() {
+            navigation.l();
+        }
+    }
+    
+    public class targetSelector extends RecursiveAction {
+
+        public targetSelector(){
+        }
+
+        @Override
+        protected void compute() {
+            try {
+                targetSelector.a();
+            } catch (Exception ex) {
+                world.getServer().getLogger().log(java.util.logging.Level.WARNING, "Find no target.");
+            }
+        }
+    }
 }
diff --git a/src/main/java/net/minecraft/server/EntityTracker.java b/src/main/java/net/minecraft/server/EntityTracker.java
index 2eea1c1..b107f72 100644
--- a/src/main/java/net/minecraft/server/EntityTracker.java
+++ b/src/main/java/net/minecraft/server/EntityTracker.java
@@ -12,7 +12,7 @@ public class EntityTracker {
 
     private static final Logger a = LogManager.getLogger();
     private final WorldServer world;
-    private Set<EntityTrackerEntry> c = Sets.newHashSet();
+    private final Set<EntityTrackerEntry> c = Sets.newConcurrentHashSet();
     public IntHashMap<EntityTrackerEntry> trackedEntities = new IntHashMap();
     private int e;
 
@@ -147,7 +147,7 @@ public class EntityTracker {
     }
 
     public void untrackEntity(Entity entity) {
-        org.spigotmc.AsyncCatcher.catchOp( "entity untrack"); // Spigot
+        // org.spigotmc.AsyncCatcher.catchOp( "entity untrack"); // Spigot
         if (entity instanceof EntityPlayer) {
             EntityPlayer entityplayer = (EntityPlayer) entity;
             Iterator iterator = this.c.iterator();
-- 
2.8.2.windows.1

