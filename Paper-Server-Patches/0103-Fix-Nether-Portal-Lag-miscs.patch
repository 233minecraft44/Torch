From 4634bb25007df983bc24d61c86360b2927519ede Mon Sep 17 00:00:00 2001
From: SotrForgotten <i@omc.hk>
Date: Tue, 12 Jul 2016 04:36:13 +0800
Subject: [PATCH] Fix Nether Portal Lag, miscs


diff --git a/src/main/java/de/minetick/AutoSaveJob.java b/src/main/java/de/minetick/AutoSaveJob.java
index 5531183..1368ea1 100644
--- a/src/main/java/de/minetick/AutoSaveJob.java
+++ b/src/main/java/de/minetick/AutoSaveJob.java
@@ -1,7 +1,6 @@
 package de.minetick;
 
 import org.bukkit.Bukkit;
-import org.bukkit.craftbukkit.SpigotTimings;
 import org.bukkit.event.world.WorldSaveEvent;
 
 import net.minecraft.server.ExceptionWorldConflict;
@@ -11,6 +10,8 @@ import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.RegionFileCache;
 import net.minecraft.server.WorldServer;
 
+import co.aikar.timings.MinecraftTimings; // Paper
+
 public class AutoSaveJob {
 
     public enum JobDetail {
@@ -34,18 +35,18 @@ public class AutoSaveJob {
 
     public boolean process() throws ExceptionWorldConflict {
         if(this.isJob(JobDetail.WORLD_SAVE) && this.worldserver != null) {
-            SpigotTimings.worldSaveTimer.startTiming();
+            MinecraftTimings.worldSaveTimer.startTiming();
             MinecraftServer.getServer().info("[AutoSave] Saving world " + this.worldserver.getWorld().getName());
             this.worldserver.save(true, (IProgressUpdate) null);
             FileIOThread.a().setNoDelay(true);
-            SpigotTimings.worldSaveTimer.stopTiming();
+            MinecraftTimings.worldSaveTimer.stopTiming();
         } else if(this.isJob(JobDetail.WORLD_SAVEEVENT) && this.worldserver != null) {
             if(FileIOThread.a().isDone()) {
-                SpigotTimings.worldSaveTimer.startTiming();
+                MinecraftTimings.worldSaveTimer.startTiming();
                 FileIOThread.a().setNoDelay(false);
                 RegionFileCache.a();
                 Bukkit.getPluginManager().callEvent(new WorldSaveEvent(this.worldserver.getWorld()));
-                SpigotTimings.worldSaveTimer.stopTiming();
+                MinecraftTimings.worldSaveTimer.stopTiming();
             } else {
                 return false;
             }
diff --git a/src/main/java/net/minecraft/server/PortalTravelAgent.java b/src/main/java/net/minecraft/server/PortalTravelAgent.java
index b731b53..76434af 100644
--- a/src/main/java/net/minecraft/server/PortalTravelAgent.java
+++ b/src/main/java/net/minecraft/server/PortalTravelAgent.java
@@ -92,7 +92,12 @@ public class PortalTravelAgent {
 
     public boolean b(Entity entity, float f) {
         // CraftBukkit start - Modularize portal search process and entity teleportation
-        BlockPosition found = this.findPortal(entity.locX, entity.locY, entity.locZ, world.paperConfig.portalSearchRadius); // Paper - Configurable search radius
+		// Migot start
+        BlockPosition found = this.findPortal(entity.locX, entity.locY, entity.locZ, 10);
+        if (found == null) {
+            found = this.findPortal(entity.locX, entity.locY, entity.locZ, world.paperConfig.portalSearchRadius);
+        }
+        // Migot end
         if (found == null) {
             return false;
         }
@@ -131,22 +136,28 @@ public class PortalTravelAgent {
         } else {
             BlockPosition blockposition = new BlockPosition(x, y, z); // CraftBukkit
 
-            for (int l = -radius; l <= radius; ++l) {
-                BlockPosition blockposition1;
-
-                for (int i1 = -radius; i1 <= radius; ++i1) {
-                    for (BlockPosition blockposition2 = blockposition.a(l, this.world.Z() - 1 - blockposition.getY(), i1); blockposition2.getY() >= 0; blockposition2 = blockposition1) {
-                        blockposition1 = blockposition2.down();
-                        if (this.world.getType(blockposition2).getBlock() == Blocks.PORTAL) {
-                            while (this.world.getType(blockposition1 = blockposition2.down()).getBlock() == Blocks.PORTAL) {
-                                blockposition2 = blockposition1;
+			// Migot start
+            BlockPosition.MutableBlockPosition mutableblockposition = new BlockPosition.MutableBlockPosition();
+            int range = short1;
+
+            int zOffset = 0, yOffset = 0;
+            for (int xDiff = -range; xDiff <= range; ++xDiff) {
+                zOffset = (zOffset + 1) % 2;
+                for (int zDiff = -range + zOffset; zDiff <= range; zDiff = zDiff + 2) { // skipping every 2nd block in z direction and alternating from row to row in x direction
+                    yOffset = (yOffset + 1) % 3;
+                    for (int yPos = this.world.Z() - (1 + yOffset) ; yPos >= 0; yPos = yPos - 3) { // checking only every 3rd block in y direction and alternating in height in each column
+                        mutableblockposition.c(blockposition.getX() + xDiff, yPos, blockposition.getZ() + zDiff);
+                        if (this.world.getType(mutableblockposition).getBlock() == Blocks.PORTAL) {
+                            int lowestCorrectHeight = mutableblockposition.getY();
+                            while (this.world.getType(mutableblockposition.c(mutableblockposition.getX(), mutableblockposition.getY() - 1, mutableblockposition.getZ())).getBlock() == Blocks.PORTAL) {
+                                lowestCorrectHeight = mutableblockposition.getY();
                             }
 
-                            double d1 = blockposition2.n(blockposition);
+                            double d1 = mutableblockposition.c(mutableblockposition.getX(), lowestCorrectHeight, mutableblockposition.getZ()).n(blockposition);
 
                             if (d0 < 0.0D || d1 < d0) {
                                 d0 = d1;
-                                object = blockposition2;
+                                object = new BlockPosition(mutableblockposition);
                             }
                         }
                     }
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftTravelAgent.java b/src/main/java/org/bukkit/craftbukkit/CraftTravelAgent.java
index 7ca2617..70f43ee 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftTravelAgent.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftTravelAgent.java
@@ -41,7 +41,12 @@ public class CraftTravelAgent extends PortalTravelAgent implements TravelAgent {
     @Override
     public Location findPortal(Location location) {
         PortalTravelAgent pta = ((CraftWorld) location.getWorld()).getHandle().getTravelAgent();
-        BlockPosition found = pta.findPortal(location.getX(), location.getY(), location.getZ(), this.getSearchRadius());
+        // Migot start
+        BlockPosition found = pta.findPortal(location.getX(), location.getY(), location.getZ(), 10);
+        if (found == null) {
+            found = pta.findPortal(location.getX(), location.getY(), location.getZ(), this.getSearchRadius());
+        }
+        // Migot end
         return found != null ? new Location(location.getWorld(), found.getX(), found.getY(), found.getZ(), location.getYaw(), location.getPitch()) : null;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/chunkio/ChunkIOExecutor.java b/src/main/java/org/bukkit/craftbukkit/chunkio/ChunkIOExecutor.java
index 2dc688c..085cabd 100644
--- a/src/main/java/org/bukkit/craftbukkit/chunkio/ChunkIOExecutor.java
+++ b/src/main/java/org/bukkit/craftbukkit/chunkio/ChunkIOExecutor.java
@@ -15,16 +15,22 @@ public class ChunkIOExecutor {
     private static final AsynchronousExecutor<QueuedChunk, Chunk, Runnable, RuntimeException> instance = new AsynchronousExecutor<QueuedChunk, Chunk, Runnable, RuntimeException>(new ChunkIOProvider(), BASE_THREADS);
 
     public static Chunk syncChunkLoad(World world, IChunkLoader loader, ChunkProviderServer provider, int x, int z) {
-        return instance.getSkipQueue(new QueuedChunk(x, z, loader, world, provider)); // Torch - permit async
+        synchronized(instance) { // Migot
+            return instance.getSkipQueue(new QueuedChunk(x, z, loader, world, provider));
+        }
     }
 
     public static void queueChunkLoad(World world, IChunkLoader loader, ChunkProviderServer provider, int x, int z, Runnable runnable) {
-        instance.add(new QueuedChunk(x, z, loader, world, provider), runnable);
+        synchronized(instance) { // Migot
+            instance.add(new QueuedChunk(x, z, loader, world, provider), runnable);
+        }
     }
 
     // Abuses the fact that hashCode and equals for QueuedChunk only use world and coords
     public static void dropQueuedChunkLoad(World world, int x, int z, Runnable runnable) {
-        instance.drop(new QueuedChunk(x, z, null, world, null), runnable);
+        synchronized(instance) { // Migot
+            instance.drop(new QueuedChunk(x, z, null, world, null), runnable);
+        }
     }
 
 	/*
-- 
2.8.2.windows.1

