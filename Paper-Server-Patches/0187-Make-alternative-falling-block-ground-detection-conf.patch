From 3bb3529f19457997d369511cbffa56a6e862cf0c Mon Sep 17 00:00:00 2001
From: SotrForgotten <i@omc.hk>
Date: Fri, 29 Jul 2016 10:39:31 +0800
Subject: [PATCH] Make alternative falling block ground detection configurable


diff --git a/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java b/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java
index db60c35..5c2c525 100644
--- a/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java
+++ b/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java
@@ -373,7 +373,7 @@ public class PaperWorldConfig {
 	
 	public long delayChunkUnloadsBy;
     private void delayChunkUnloadsBy() {
-        delayChunkUnloadsBy = PaperConfig.getSeconds(getString("delay-chunk-unloads-by", "30s")); // Torch - keep default
+        delayChunkUnloadsBy = PaperConfig.getSeconds(getString("delay-chunk-unloads-by", "15s"));
         if (delayChunkUnloadsBy > 0) {
             log("Delaying chunk unloads by " + delayChunkUnloadsBy + " seconds");
             delayChunkUnloadsBy *= 1000;
@@ -419,4 +419,9 @@ public class PaperWorldConfig {
     private void isHopperPushBased() {
         isHopperPushBased = getBoolean("hopper.push-based", false);
     }
+	
+	public boolean altFallingBlockOnGround;
+    private void altFallingBlockOnGround() {
+        altFallingBlockOnGround = getBoolean("use-alternate-fallingblock-onGround-detection", false);
+    }
 }
diff --git a/src/main/java/net/minecraft/server/ChunkProviderServer.java b/src/main/java/net/minecraft/server/ChunkProviderServer.java
index 67a5547..b5c727e 100644
--- a/src/main/java/net/minecraft/server/ChunkProviderServer.java
+++ b/src/main/java/net/minecraft/server/ChunkProviderServer.java
@@ -182,7 +182,9 @@ public class ChunkProviderServer implements IChunkProvider {
                 ChunkIOExecutor.queueChunkLoad(world, loader, this, i, j, runnable);
                 return null;
             } else {
-				chunk = ChunkIOExecutor.syncChunkLoad(world, loader, this, i, j);
+				synchronized(this) {
+					chunk = ChunkIOExecutor.syncChunkLoad(world, loader, this, i, j);
+				}
             }
         } else if (chunk == null && generate) {
             chunk = originalGetChunkAt(i, j);
diff --git a/src/main/java/net/minecraft/server/Entity.java b/src/main/java/net/minecraft/server/Entity.java
index ac329ce..65fdce1 100644
--- a/src/main/java/net/minecraft/server/Entity.java
+++ b/src/main/java/net/minecraft/server/Entity.java
@@ -2330,6 +2330,7 @@ public abstract class Entity implements ICommandListener, org.spigotmc.Optimized
         return this.getFlag(5);
     }
 
+	@Nullable public ScoreboardTeamBase getTeam() { return this.aO(); } // Paper - OBFHELPER
     @Nullable
     public ScoreboardTeamBase aO() {
         if (!this.world.paperConfig.nonPlayerEntitiesOnScoreboards && !(this instanceof EntityHuman)) { return null; } // Paper
diff --git a/src/main/java/net/minecraft/server/EntityFallingBlock.java b/src/main/java/net/minecraft/server/EntityFallingBlock.java
index e476881..193bb33 100644
--- a/src/main/java/net/minecraft/server/EntityFallingBlock.java
+++ b/src/main/java/net/minecraft/server/EntityFallingBlock.java
@@ -102,7 +102,7 @@ public class EntityFallingBlock extends Entity {
                     IBlockData iblockdata = this.world.getType(blockposition);
                     if (!isOnGround()) {
                         this.onGround = false;
-                        return; // Paper
+                        if (this.world.paperConfig.altFallingBlockOnGround) return; // Paper
                     }
 
                     this.motX *= 0.699999988079071D;
@@ -167,8 +167,10 @@ public class EntityFallingBlock extends Entity {
     // Paper start
     private boolean isOnGround() {
         BlockPosition where = new BlockPosition(this.locX, this.locY - 0.009999999776482582D, this.locZ);
+		boolean cannotMoveThrough = !BlockFalling.canMoveThrough(this.world.getType(where));
+        if (!this.world.paperConfig.altFallingBlockOnGround) return cannotMoveThrough;
 
-        if (!BlockFalling.canMoveThrough(this.world.getType(where))) {
+        if (cannotMoveThrough) {
             return true;
         }
 
diff --git a/src/main/java/net/minecraft/server/PlayerConnection.java b/src/main/java/net/minecraft/server/PlayerConnection.java
index 8f7c60f..865c642 100644
--- a/src/main/java/net/minecraft/server/PlayerConnection.java
+++ b/src/main/java/net/minecraft/server/PlayerConnection.java
@@ -1360,7 +1360,7 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
                 // Paper Start - (Meh) Support for vanilla world scoreboard name coloring
                 String displayName = event.getPlayer().getDisplayName();
                 if (this.player.getWorld().paperConfig.useVanillaScoreboardColoring) {
-                    displayName = ScoreboardTeam.getPlayerDisplayName(this.player.aO(), player.getDisplayName());
+                    displayName = ScoreboardTeam.getPlayerDisplayName(this.player.getTeam(), player.getDisplayName());
                 }
 
                 s = String.format(event.getFormat(), displayName, event.getMessage());
-- 
2.8.2.windows.1

