From dca1e6252be6550ac5a08ff3012da10234ac5e66 Mon Sep 17 00:00:00 2001
From: SotrForgotten <i@omc.hk>
Date: Sat, 2 Jul 2016 21:11:32 +0800
Subject: [PATCH] Multi threaded with location fix


diff --git a/src/main/java/net/minecraft/server/Chunk.java b/src/main/java/net/minecraft/server/Chunk.java
index e0c7888..53bd646 100644
--- a/src/main/java/net/minecraft/server/Chunk.java
+++ b/src/main/java/net/minecraft/server/Chunk.java
@@ -644,7 +644,8 @@ public class Chunk {
             // Bukkit.getLogger().warning("Entity is at " + entity.locX + "," + entity.locZ + " (chunk " + i + "," + j + ") but was stored in chunk " + this.locX + "," + this.locZ); // Torch - silenty
             // CraftBukkit end
 			// new Exception("Stack trace").printStackTrace();
-            entity.die();
+            // entity.die();
+			entity.setPosition(this.locX, entity.locY, this.locZ); // Hose - fix location
         }
 
         int k = MathHelper.floor(entity.locY / 16.0D);
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index 59b5496..be0a46a 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -1051,8 +1051,11 @@ public abstract class World implements IBlockAccess {
 
     }
 
+	addparticle ap_task; // Hose
     public void addParticle(EnumParticle enumparticle, double d0, double d1, double d2, double d3, double d4, double d5, int... aint) {
-        this.a(enumparticle.c(), enumparticle.e(), d0, d1, d2, d3, d4, d5, aint);
+        // this.a(enumparticle.c(), enumparticle.e(), d0, d1, d2, d3, d4, d5, aint);
+		ap_task = new addparticle(enumparticle, d0, d1, d2, d3, d4, d5, aint);
+        ap_task.fork();
     }
 
     private void a(int i, boolean flag, double d0, double d1, double d2, double d3, double d4, double d5, int... aint) {
@@ -1473,6 +1476,53 @@ public abstract class World implements IBlockAccess {
     public void a(BlockPosition blockposition, Block block, int i, int j) {}
 
     public void b(BlockPosition blockposition, Block block, int i, int j) {}
+	
+	public void tick_hose(Entity entity) {
+        Entity entity1 = entity.bz();
+
+        if (entity1 != null) {
+            if (!entity1.dead && entity1.w(entity)) {
+                return;
+            }
+            entity.stopRiding();
+        }
+		this.methodProfiler.a("tick");
+        if (!entity.dead && !(entity instanceof EntityPlayer)) {
+            try {
+                entity.tickTimer.startTiming(); // Paper
+                this.g(entity);
+                entity.tickTimer.stopTiming(); // Paper
+            } catch (Throwable throwable1) {
+                entity.tickTimer.stopTiming();
+                // Paper start - Prevent tile entity and entity crashes
+                String msg = "Entity threw exception at " + entity.world.getWorld().getName() + ":" + entity.locX + "," + entity.locY + "," + entity.locZ;
+                System.err.println(msg);
+                throwable1.printStackTrace();
+                getServer().getPluginManager().callEvent(new ServerExceptionEvent(new ServerInternalException(msg, throwable1)));
+                entity.dead = true;
+                return;
+                // Paper end
+            }
+        }
+
+        this.methodProfiler.b();
+        this.methodProfiler.a("remove");
+        if (entity.dead) {
+            int j = entity.ab;
+            int l = entity.ad;
+
+            if (entity.aa && this.isChunkLoaded(j, l, true)) {
+                this.getChunkAt(j, l).b(entity);
+            }
+
+            guardEntityList = false; // Spigot
+            this.entityList.remove(entity); // CraftBukkit - Use field for loop variable
+            guardEntityList = true; // Spigot
+            this.c(entity);
+        }
+
+        this.methodProfiler.b();
+    }
 
     public void tickEntities() {
         this.methodProfiler.a("entities");
@@ -1602,11 +1652,14 @@ public abstract class World implements IBlockAccess {
         int entitiesThisCycle = 0;
         // Paper start - Disable tick limiters
         //if (tickPosition < 0) tickPosition = 0;
+		Queue<RecursiveAction> forks = Queues.newConcurrentLinkedQueue();
         for (tickPosition = 0; tickPosition < entityList.size(); tickPosition++) {
             // Paper end
             tickPosition = (tickPosition < entityList.size()) ? tickPosition : 0;
             entity = (Entity) this.entityList.get(this.tickPosition);
+			tick_hose(entity);
             // CraftBukkit end
+			/*
             Entity entity1 = entity.bz();
 
             if (entity1 != null) {
@@ -1653,6 +1706,7 @@ public abstract class World implements IBlockAccess {
             }
 
             this.methodProfiler.b();
+			*/
         }
         guardEntityList = false; // Spigot
 
@@ -3497,4 +3551,26 @@ public abstract class World implements IBlockAccess {
                  
     }
 	
+	class addparticle extends RecursiveAction {
+        EnumParticle enumparticle;
+        double d0, d1, d2, d3, d4, d5;
+        int[] aint;
+        
+        public addparticle(EnumParticle enumparticle, double d0, double d1, double d2, double d3, double d4, double d5, int... aint) {
+            this.enumparticle = enumparticle;
+            this.d0 = d0;
+            this.d1 = d1;
+            this.d2 = d2;
+            this.d3 = d3;
+            this.d4 = d4;
+            this.d5 = d5;
+            this.aint = aint;
+		}
+		
+		@Override
+		protected void compute() {
+            a(enumparticle.c(), enumparticle.e(), d0, d1, d2, d3, d4, d5, aint);
+        }
+	}
+	
 }
-- 
2.8.2.windows.1

