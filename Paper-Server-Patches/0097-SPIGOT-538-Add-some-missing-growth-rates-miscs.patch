From 38e1b20fcc335f7df8a8af5612ea2a825e266b9c Mon Sep 17 00:00:00 2001
From: SotrForgotten <i@omc.hk>
Date: Mon, 11 Jul 2016 23:38:56 +0800
Subject: [PATCH] SPIGOT-538: Add some missing growth rates, miscs


diff --git a/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java b/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java
index 255e994..9265148 100644
--- a/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java
+++ b/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java
@@ -204,7 +204,7 @@ public class PaperWorldConfig {
 
     public boolean optimizeExplosions;
     private void optimizeExplosions() {
-        optimizeExplosions = getBoolean("optimize-explosions", false);
+        optimizeExplosions = getBoolean("optimize-explosions", true); // Torch
         log("Optimize explosions: " + optimizeExplosions);
     }
 
diff --git a/src/main/java/net/minecraft/server/BlockCocoa.java b/src/main/java/net/minecraft/server/BlockCocoa.java
index 287d6b1..e9920ae 100644
--- a/src/main/java/net/minecraft/server/BlockCocoa.java
+++ b/src/main/java/net/minecraft/server/BlockCocoa.java
@@ -21,7 +21,7 @@ public class BlockCocoa extends BlockFacingHorizontal implements IBlockFragilePl
     public void b(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {
         if (!this.e(world, blockposition, iblockdata)) {
             this.f(world, blockposition, iblockdata);
-        } else if (world.random.nextInt(5) == 0) {
+       } else if (world.random.nextInt(Math.max(1, (int) (100.0F / world.spigotConfig.cocoaModifier) * 5)) == 0) { // Spigot
             int i = ((Integer) iblockdata.get(BlockCocoa.AGE)).intValue();
 
             if (i < 2) {
diff --git a/src/main/java/net/minecraft/server/BlockVine.java b/src/main/java/net/minecraft/server/BlockVine.java
index 3910194..283c116 100644
--- a/src/main/java/net/minecraft/server/BlockVine.java
+++ b/src/main/java/net/minecraft/server/BlockVine.java
@@ -139,7 +139,7 @@ public class BlockVine extends Block {
 
     public void b(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {
         if (!world.isClientSide) {
-            if (world.random.nextInt(4) == 0) {
+            if (world.random.nextInt(Math.max(1, (int) (100.0F / world.spigotConfig.vineModifier) * 4)) == 0) { // Spigot
                 byte b0 = 4;
                 int i = 5;
                 boolean flag = false;
diff --git a/src/main/java/net/minecraft/server/Chunk.java b/src/main/java/net/minecraft/server/Chunk.java
index 53bd646..b5e2555 100644
--- a/src/main/java/net/minecraft/server/Chunk.java
+++ b/src/main/java/net/minecraft/server/Chunk.java
@@ -1014,7 +1014,8 @@ public class Chunk {
             if (this.t && this.world.getTime() != this.lastSaved || this.s) {
                 return true;
             }
-        } else if (this.t && this.world.getTime() >= this.lastSaved + MinecraftServer.getServer().autosavePeriod * 4) { // Spigot - Only save if we've passed 2 auto save intervals without modification
+        } else if (this.t && this.world.getTime() >= 600L) {
+		// } else if (this.t && this.world.getTime() >= this.lastSaved + MinecraftServer.getServer().autosavePeriod * 4) { // Spigot - Only save if we've passed 2 auto save intervals without modification
             return true;
         }
 
diff --git a/src/main/java/net/minecraft/server/ChunkProviderServer.java b/src/main/java/net/minecraft/server/ChunkProviderServer.java
index 405adc7..24497d5 100644
--- a/src/main/java/net/minecraft/server/ChunkProviderServer.java
+++ b/src/main/java/net/minecraft/server/ChunkProviderServer.java
@@ -282,7 +282,7 @@ public class ChunkProviderServer implements IChunkProvider {
                 this.saveChunk(chunk);
                 chunk.f(false);
                 ++i;
-                if (i == 24 && !flag && false) { // Spigot
+                if (i == 24 && !flag) {
                     return false;
                 }
             }
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 0051195..b1adaa0 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -776,17 +776,7 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
             MinecraftTimings.worldSaveTimer.startTiming(); // Spigot
             this.methodProfiler.a("save");
             this.v.savePlayers();
-            // Spigot Start
-            // We replace this with saving each individual world as this.saveChunks(...) is broken,
-            // and causes the main thread to sleep for random amounts of time depending on chunk activity
-            // Also pass flag to only save modified chunks
-            server.playerCommandState = true;
-            for (World world : worlds) {
-                world.getWorld().save(false);
-            }
-            server.playerCommandState = false;
-            // this.saveChunks(true);
-            // Spigot End
+            this.saveChunks(true);
             this.methodProfiler.b();
             MinecraftTimings.worldSaveTimer.stopTiming(); // Spigot
         }
diff --git a/src/main/java/org/bukkit/Server.java b/src/main/java/org/bukkit/Server.java
index f1eb254..070bde6 100644
--- a/src/main/java/org/bukkit/Server.java
+++ b/src/main/java/org/bukkit/Server.java
@@ -12,6 +12,16 @@ import java.util.Set;
 import java.util.UUID;
 import java.util.logging.Logger;
 
+import com.avaje.ebean.config.ServerConfig;
+import com.google.common.collect.ImmutableList;
+import org.bukkit.generator.ChunkGenerator;
+import org.bukkit.inventory.*;
+import org.bukkit.inventory.meta.ItemMeta;
+import java.awt.image.BufferedImage;
+import java.io.File;
+import java.io.Serializable;
+import java.util.*;
+import java.util.logging.Logger;
 import com.destroystokyo.paper.profile.ProfileLookup; // Paper
 
 import org.bukkit.Warning.WarningState;
@@ -25,10 +35,6 @@ import org.bukkit.entity.Player;
 import org.bukkit.event.inventory.InventoryType;
 import org.bukkit.event.server.ServerListPingEvent;
 import org.bukkit.help.HelpMap;
-import org.bukkit.inventory.Inventory;
-import org.bukkit.inventory.InventoryHolder;
-import org.bukkit.inventory.ItemStack;
-import org.bukkit.inventory.Recipe;
 import org.bukkit.map.MapView;
 import org.bukkit.permissions.Permissible;
 import org.bukkit.plugin.PluginManager;
@@ -977,8 +983,8 @@ public interface Server extends PluginMessageRecipient {
         {
             throw new UnsupportedOperationException( "Not supported yet." );
         }
-
-        public org.bukkit.configuration.file.YamlConfiguration getBukkitConfig()
+		
+		public org.bukkit.configuration.file.YamlConfiguration getBukkitConfig()
         {
             throw new UnsupportedOperationException( "Not supported yet." );
         }
diff --git a/src/main/java/org/bukkit/command/SimpleCommandMap.java b/src/main/java/org/bukkit/command/SimpleCommandMap.java
index 05a5675..5e8d146 100644
--- a/src/main/java/org/bukkit/command/SimpleCommandMap.java
+++ b/src/main/java/org/bukkit/command/SimpleCommandMap.java
@@ -37,6 +37,7 @@ public class SimpleCommandMap implements CommandMap {
         register("bukkit", new ReloadCommand("reload"));
         register("bukkit", new PluginsCommand("plugins"));
         register("bukkit", new co.aikar.timings.TimingsCommand("timings")); // Spigot
+		register("bukkit", new com.destroystokyo.paper.IOStatCommand("iostat")); // Torch - registry
     }
 
     public void setFallbackCommands() {
diff --git a/src/main/java/org/bukkit/command/defaults/GCCommand.java b/src/main/java/org/bukkit/command/defaults/GCCommand.java
index 83ccd46..51dad66 100644
--- a/src/main/java/org/bukkit/command/defaults/GCCommand.java
+++ b/src/main/java/org/bukkit/command/defaults/GCCommand.java
@@ -34,7 +34,7 @@ public class GCCommand extends VanillaCommand {
         long m2 = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
         if (m2 < m1)
 			sender.sendMessage(
-			ChatColor.GREEN + "Cleaned " + ChatColor.GOLD + ((m1 - m2) / 1024L / 1024L) + ChatColor.GREEN + "MB memory");
+			ChatColor.GOLD + "Cleaned " + ChatColor.GREEN + ((m1 - m2) / 1024L / 1024L) + "MB" + ChatColor.GOLD + " memory.");
           else
             sender.sendMessage(ChatColor.GREEN + "Memory not require clean now.");
 
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftOfflinePlayer.java b/src/main/java/org/bukkit/craftbukkit/CraftOfflinePlayer.java
index 36ebcf1..5ecadc2 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftOfflinePlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftOfflinePlayer.java
@@ -1,15 +1,12 @@
 package org.bukkit.craftbukkit;
 
 import com.mojang.authlib.GameProfile;
-import java.io.File;
 import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.UUID;
 
-import net.minecraft.server.EntityPlayer;
 import net.minecraft.server.NBTTagCompound;
-import net.minecraft.server.WorldNBTStorage;
 import com.destroystokyo.paper.profile.ProfileUtils;
 import com.destroystokyo.paper.profile.AccountProfile;
 
@@ -43,7 +40,7 @@ public class CraftOfflinePlayer implements OfflinePlayer, ConfigurationSerializa
     protected CraftOfflinePlayer(CraftServer server, AccountProfile profile) {
         this.server = server;
         this.profile = ProfileUtils.toMojang(profile);
-        this.storage = (WorldNBTStorage) (server.console.worlds.get(0).getDataManager());
+        this.storage = server.console.worlds.get(0).getDataManager().getPlayerFileData(); // Paper
         this.paperProfile = profile;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
index 738e828..c329f2c 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
@@ -750,17 +750,12 @@ public class CraftWorld implements World {
     }
 
     public void save() {
-    // Spigot start
-        save(true);
-    }
-    public void save(boolean forceSave) {
-    // Spigot end
         this.server.checkSaveState();
         try {
             boolean oldSave = world.savingDisabled;
 
             world.savingDisabled = false;
-            world.save(forceSave, null); // Spigot
+            world.save(true, null);
 
             world.savingDisabled = oldSave;
         } catch (ExceptionWorldConflict ex) {
diff --git a/src/main/java/org/bukkit/craftbukkit/chunkio2/impl/CraftChunkRegionLoader.java b/src/main/java/org/bukkit/craftbukkit/chunkio2/impl/CraftChunkRegionLoader.java
index e5ca6f1..760ec34 100644
--- a/src/main/java/org/bukkit/craftbukkit/chunkio2/impl/CraftChunkRegionLoader.java
+++ b/src/main/java/org/bukkit/craftbukkit/chunkio2/impl/CraftChunkRegionLoader.java
@@ -42,9 +42,9 @@ public class CraftChunkRegionLoader implements IChunkLoader {
     @Override
     @CheckForNull
     public Chunk a(@Nonnull World world, int x, int z) throws IOException {
-        world.timings.syncChunkLoadDataTimer.startTiming(); // Spigot
+        // world.timings.syncChunkLoadDataTimer.startTiming(); // Spigot
         Object[] data = loadChunk(world, x, z);
-        world.timings.syncChunkLoadDataTimer.stopTiming(); // Spigot
+        // world.timings.syncChunkLoadDataTimer.stopTiming(); // Spigot
         if (data != null) {
             Chunk chunk = (Chunk) data[0];
             NBTTagCompound nbttagcompound = (NBTTagCompound) data[1];
diff --git a/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java b/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
index 03b59e5..ae99018 100644
--- a/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
+++ b/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
@@ -483,8 +483,8 @@ public class CraftEventFactory {
                 event.getEntity().setLastDamageCause(event);
             }
             return event;
-         } else if (source == DamageSource.LAVA || source == DamageSource.HOT_FLOOR) {
-            EntityDamageEvent event = callEvent(new EntityDamageByBlockEvent(null, entity.getBukkitEntity(), (source == DamageSource.LAVA) ? DamageCause.LAVA : DamageCause.HOT_FLOOR, modifiers, modifierFunctions));
+          } else if (source == DamageSource.LAVA) {
+            EntityDamageEvent event = callEvent(new EntityDamageByBlockEvent(null, entity.getBukkitEntity(), DamageCause.LAVA, modifiers, modifierFunctions));
             if (!event.isCancelled()) {
                 event.getEntity().setLastDamageCause(event);
             }
diff --git a/src/main/java/org/spigotmc/SpigotWorldConfig.java b/src/main/java/org/spigotmc/SpigotWorldConfig.java
index d0651fe..756a1e2 100644
--- a/src/main/java/org/spigotmc/SpigotWorldConfig.java
+++ b/src/main/java/org/spigotmc/SpigotWorldConfig.java
@@ -192,6 +192,8 @@ public class SpigotWorldConfig
     public int saplingModifier;
     public int wheatModifier;
     public int wartModifier;
+	public int vineModifier;
+    public int cocoaModifier;
     private int getAndValidateGrowth(String crop)
     {
         int modifier = getInt( "growth." + crop.toLowerCase() + "-modifier", 100 );
@@ -214,6 +216,8 @@ public class SpigotWorldConfig
         saplingModifier = getAndValidateGrowth( "Sapling" );
         wheatModifier = getAndValidateGrowth( "Wheat" );
         wartModifier = getAndValidateGrowth( "NetherWart" );
+		vineModifier = getAndValidateGrowth( "Vine" );
+        cocoaModifier = getAndValidateGrowth( "Cocoa" );
     }
 
     public double itemMerge;
-- 
2.8.2.windows.1

