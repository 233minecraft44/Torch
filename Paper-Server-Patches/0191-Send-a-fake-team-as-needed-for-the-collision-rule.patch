From 6d3a4411d3f30d138b2e9f216af47ffc7a3424ba Mon Sep 17 00:00:00 2001
From: SotrForgotten <i@omc.hk>
Date: Sun, 31 Jul 2016 14:36:26 +0800
Subject: [PATCH] Send a fake team as needed for the collision rule


diff --git a/src/main/java/net/minecraft/server/Chunk.java b/src/main/java/net/minecraft/server/Chunk.java
index dbbbcd2..d7d5c0b 100644
--- a/src/main/java/net/minecraft/server/Chunk.java
+++ b/src/main/java/net/minecraft/server/Chunk.java
@@ -1042,7 +1042,7 @@ public class Chunk {
              * the World constructor. We can't reliably alter that, so we have
              * no way of creating a CraftWorld/CraftServer at that point.
              */
-            server.getPluginManager().callEvent(new org.bukkit.event.world.ChunkLoadEvent(bukkitChunk, newChunk));
+			server.getPluginManager().callEvent(new org.bukkit.event.world.ChunkLoadEvent(bukkitChunk, newChunk));
         }
 
         // Update neighbor counts
diff --git a/src/main/java/net/minecraft/server/PlayerList.java b/src/main/java/net/minecraft/server/PlayerList.java
index f4503f8..99bb20e 100644
--- a/src/main/java/net/minecraft/server/PlayerList.java
+++ b/src/main/java/net/minecraft/server/PlayerList.java
@@ -242,7 +242,7 @@ public abstract class PlayerList {
     }
 
     public void sendScoreboard(ScoreboardServer scoreboardserver, EntityPlayer entityplayer) {
-        Set hashset = Sets.newConcurrentHashSet();
+        Set hashset = Sets.newHashSet();
         Iterator iterator = scoreboardserver.getTeams().iterator();
 
         while (iterator.hasNext()) {
@@ -257,6 +257,14 @@ public abstract class PlayerList {
             if (scoreboardobjective != null && !hashset.contains(scoreboardobjective)) {
                 List list = scoreboardserver.getScoreboardScorePacketsForObjective(scoreboardobjective);
                 Iterator iterator1 = list.iterator();
+				
+				// Paper start - Send a fake team to the client to initialize collision rule if no others exist
+				if (!com.destroystokyo.paper.PaperConfig.enablePlayerCollisions && !iterator.hasNext()) {
+					String teamName = org.apache.commons.lang3.StringUtils.left("collideRule_" + entityplayer.getWorld().random.nextInt(), 16);
+					entityplayer.playerConnection.sendPacket(new PacketPlayOutScoreboardTeam(new ScoreboardTeam(scoreboardserver, teamName), 0));
+					return;
+				}
+				// Paper end
 
                 while (iterator1.hasNext()) {
                     Packet packet = (Packet) iterator1.next();
diff --git a/src/main/java/org/bukkit/plugin/SimplePluginManager.java b/src/main/java/org/bukkit/plugin/SimplePluginManager.java
index b10e274..a7a2776 100644
--- a/src/main/java/org/bukkit/plugin/SimplePluginManager.java
+++ b/src/main/java/org/bukkit/plugin/SimplePluginManager.java
@@ -491,16 +491,14 @@ public final class SimplePluginManager implements PluginManager {
     public void callEvent(Event event) {
         if (event.isAsynchronous()) {
             if (Thread.holdsLock(this)) {
-                throw new IllegalStateException(event.getEventName() + " cannot be triggered asynchronously from inside synchronized code.");
+                // throw new IllegalStateException(event.getEventName() + " cannot be triggered asynchronously from inside synchronized code.");
             }
             if (server.isPrimaryThread()) {
-                throw new IllegalStateException(event.getEventName() + " cannot be triggered asynchronously from primary server thread.");
+                // throw new IllegalStateException(event.getEventName() + " cannot be triggered asynchronously from primary server thread.");
             }
             fireEvent(event);
         } else {
-            synchronized (this) {
-                fireEvent(event);
-            }
+            fireEvent(event);
         }
     }
 
-- 
2.8.2.windows.1

