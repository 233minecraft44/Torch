From 5e30b232e9e04a605ecea33570faa730a90b2ecc Mon Sep 17 00:00:00 2001
From: Techcable <Techcable@techcable.net>
Date: Thu, 31 Mar 2016 14:13:07 -0700
Subject: [PATCH] Use arrays for blockstates

It uses a special data structure that is a combination of a lookup table and a binary search. Most blockstates have sequental ids, so they can go in a lookup table. However, there are some blockstates that are not sequental, which are stuffed into a seperate sorted array, and then do a binary search over that.
This data structure is usualy faster than a hashmap (especially when using the lookup table), and since the array we binary search over is so small.

Should help with redstone.

diff --git a/src/main/java/net/minecraft/server/BlockState.java b/src/main/java/net/minecraft/server/BlockState.java
index e1261f5..5ea4b36 100644
--- a/src/main/java/net/minecraft/server/BlockState.java
+++ b/src/main/java/net/minecraft/server/BlockState.java
@@ -2,14 +2,44 @@ package net.minecraft.server;
 
 import com.google.common.base.Objects;
 
+// TacoSpigot start
+import java.util.Arrays;
+// TacoSpigot end
+
 public abstract class BlockState<T extends Comparable<T>> implements IBlockState<T> {
 
     private final Class<T> a;
     private final String b;
+    // TacoSpigot start
+    private static int nextId = 0;
+    private final int id;
+
+    @Override
+    public int getId() {
+        return id;
+    }
+
+    private static BlockState[] byId = new BlockState[0];
+
+    public static BlockState getById(int id) {
+        if (id < 0) {
+            throw new IllegalArgumentException("Negative id: " + id);
+        } else if (id < byId.length) {
+            return byId[id];
+        } else {
+            return null;
+        }
+    }
+    // TacoSpigot end
 
     protected BlockState(String s, Class<T> oclass) {
         this.a = oclass;
         this.b = s;
+        // TacoSpigot start
+        id = nextId++;
+        if (id >= byId.length) byId = Arrays.copyOf(byId, id + 1);
+        byId[id] = this;
+        // TacoSpigot end
     }
 
     public String a() {
diff --git a/src/main/java/net/minecraft/server/BlockStateBoolean.java b/src/main/java/net/minecraft/server/BlockStateBoolean.java
index 5b193f4..0a2aa9b 100644
--- a/src/main/java/net/minecraft/server/BlockStateBoolean.java
+++ b/src/main/java/net/minecraft/server/BlockStateBoolean.java
@@ -40,6 +40,25 @@ public class BlockStateBoolean extends BlockState<Boolean> {
         }
     }
 
+    // TacoSpigot start
+    @Override
+    public int getValueId(Boolean value) {
+        return value ? 1 : 0;
+    }
+
+    @Override
+    public Boolean getByValueId(int id) {
+        switch (id) {
+            case 0:
+                return false;
+            case 1:
+                return true;
+            default:
+                throw new IllegalArgumentException("Invalid id: " + id);
+        }
+    }
+    // TacoSpigot end
+
     public int hashCode() {
         return 31 * super.hashCode() + this.a.hashCode();
     }
diff --git a/src/main/java/net/minecraft/server/BlockStateEnum.java b/src/main/java/net/minecraft/server/BlockStateEnum.java
index b77a3dd..b9be436 100644
--- a/src/main/java/net/minecraft/server/BlockStateEnum.java
+++ b/src/main/java/net/minecraft/server/BlockStateEnum.java
@@ -37,7 +37,6 @@ public class BlockStateEnum<T extends Enum<T> & INamable> extends BlockState<T>
     public Collection<T> c() {
         return this.a;
     }
-
     public Optional<T> b(String s) {
         return Optional.fromNullable(this.b.get(s));
     }
@@ -46,6 +45,24 @@ public class BlockStateEnum<T extends Enum<T> & INamable> extends BlockState<T>
         return ((INamable) t0).getName();
     }
 
+    // TacoSpigot start
+    @Override
+    public int
+getValueId(T value) {
+        return value.ordinal();
+    }
+
+    @Override
+    public T getByValueId(int id) {
+        T[] values = this.b().getEnumConstants();
+        if (id >= 0 && id < values.length) {
+            return values[id];
+        } else {
+            throw new IllegalArgumentException("Invalid id: " + id);
+        }
+    }
+    // TacoSpigot end
+
     public boolean equals(Object object) {
         if (this == object) {
             return true;
diff --git a/src/main/java/net/minecraft/server/BlockStateInteger.java b/src/main/java/net/minecraft/server/BlockStateInteger.java
index 2b7870e..7f05581 100644
--- a/src/main/java/net/minecraft/server/BlockStateInteger.java
+++ b/src/main/java/net/minecraft/server/BlockStateInteger.java
@@ -9,9 +9,40 @@ import java.util.HashSet;
 public class BlockStateInteger extends BlockState<Integer> {
 
     private final ImmutableSet<Integer> a;
+    // TacoSpigot start
+    private final int min, max;
+    private final int range;
+
+    @Override
+    public int getValueId(Integer value) {
+        if (value < min) {
+            throw new IllegalArgumentException("Too small: " + value);
+        } else if (value > max) {
+            throw new IllegalArgumentException("Too large: " + value);
+        } else {
+            return value - min;
+        }
+    }
+
+    @Override
+    public Integer getByValueId(int id) {
+        if (id < 0) {
+            throw new IllegalArgumentException("Negative id: " + id);
+        } else if (id > range) {
+            throw new IllegalArgumentException("Id is out of range: " + id);
+        } else {
+            return id;
+        }
+    }
+    // TacoSpigot end
 
     protected BlockStateInteger(String s, int i, int j) {
         super(s, Integer.class);
+        // TacoSpigot start
+        this.min = i;
+        this.max = j;
+        this.range = (max - min); // min and max are _both_ inclusive (there's a reason you're not supposed to do this :p)
+        // TacoSpigot end
         if (i < 0) {
             throw new IllegalArgumentException("Min value of " + s + " must be 0 or greater");
         } else if (j <= i) {
diff --git a/src/main/java/net/minecraft/server/BlockStateList.java b/src/main/java/net/minecraft/server/BlockStateList.java
index da05dbb..7d3314d 100644
--- a/src/main/java/net/minecraft/server/BlockStateList.java
+++ b/src/main/java/net/minecraft/server/BlockStateList.java
@@ -23,6 +23,14 @@ import java.util.Map.Entry;
 import java.util.regex.Pattern;
 import javax.annotation.Nullable;
 
+// TacoSpigot start
+import net.techcable.tacospigot.ImmutableArrayMap;
+import net.techcable.tacospigot.ImmutableArrayTable;
+import net.techcable.tacospigot.SimpleMap;
+import net.techcable.tacospigot.SimpleTable;
+import net.techcable.tacospigot.TacoSpigotConfig;
+// TacoSpigot end
+
 public class BlockStateList {
 
     private static final Pattern a = Pattern.compile("^[a-z0-9_]+$");
@@ -145,16 +153,27 @@ public class BlockStateList {
     static class BlockData extends BlockDataAbstract {
 
         private final Block a;
-        private final ImmutableMap<IBlockState<?>, Comparable<?>> b;
-        private ImmutableTable<IBlockState<?>, Comparable<?>, IBlockData> c;
+        // TacoSpigot start
+        private final ImmutableMap<IBlockState<?>, Comparable<?>> bAsImmutableMap;
+        private final SimpleMap<IBlockState<?>, Comparable<?>> b;
+        private SimpleTable<IBlockState, Comparable, IBlockData> c;
+        // TacoSpigot end
 
         private BlockData(Block block, ImmutableMap<IBlockState<?>, Comparable<?>> immutablemap) {
             this.a = block;
-            this.b = immutablemap;
+            // TacoSpigot start
+            this.bAsImmutableMap = immutablemap;
+            if (TacoSpigotConfig.useArraysForBlockStates) {
+                ImmutableArrayMap<IBlockState, Comparable> arrayMap = new ImmutableArrayMap<IBlockState, Comparable>(IBlockState::getId, BlockState::getById, (ImmutableMap) immutablemap);
+                b = (key) -> arrayMap.get(key.getId());
+            } else {
+                b = immutablemap::get;
+            }
+            // TacoSpigot end
         }
 
         public Collection<IBlockState<?>> r() {
-            return Collections.unmodifiableCollection(this.b.keySet());
+            return Collections.unmodifiableCollection(this.bAsImmutableMap.keySet()); // TacoSpigot - use bAsImmutableMap
         }
 
         public <T extends Comparable<T>> T get(IBlockState<T> iblockstate) {
@@ -186,7 +205,7 @@ public class BlockStateList {
         }
 
         public ImmutableMap<IBlockState<?>, Comparable<?>> s() {
-            return this.b;
+            return this.bAsImmutableMap; // TacoSpigot
         }
 
         public Block getBlock() {
@@ -206,7 +225,7 @@ public class BlockStateList {
                 throw new IllegalStateException();
             } else {
                 HashBasedTable hashbasedtable = HashBasedTable.create();
-                Iterator iterator = this.b.entrySet().iterator();
+                Iterator iterator = this.bAsImmutableMap.entrySet().iterator(); // TacoSpigot - use bAsImmutableMap
 
                 while (iterator.hasNext()) {
                     Entry entry = (Entry) iterator.next();
@@ -216,18 +235,34 @@ public class BlockStateList {
                     while (iterator1.hasNext()) {
                         Comparable comparable = (Comparable) iterator1.next();
 
-                        if (comparable != entry.getValue()) {
+                        if (true) { // TacoSpigot - include everything in the table
                             hashbasedtable.put(iblockstate, comparable, map.get(this.b(iblockstate, comparable)));
                         }
                     }
                 }
 
-                this.c = ImmutableTable.copyOf(hashbasedtable);
+                // TacoSpigot start
+                if (TacoSpigotConfig.useArraysForBlockStates) {
+                    // I had some 'fun' getting this to work >:(
+                    ImmutableArrayTable<IBlockState, Comparable, IBlockData> arrayTable = new ImmutableArrayTable<IBlockState, Comparable, IBlockData> (
+                            IBlockState::getId,
+                            BlockState::getById,
+                            IBlockState::getValueId,
+                            IBlockState::getByValueId,
+                            hashbasedtable
+                    );
+                    this.c = (row, column) -> arrayTable.get(row.getId(), row.getValueId(column));
+                } else {
+                    ImmutableTable<IBlockState, Comparable, IBlockData> immutableTable = ImmutableTable.copyOf(hashbasedtable);
+                    this.c = immutableTable::get;
+                }
+                // TacoSpigot end
             }
         }
 
         private Map<IBlockState<?>, Comparable<?>> b(IBlockState<?> iblockstate, Comparable<?> comparable) {
-            HashMap hashmap = Maps.newHashMap(this.b);
+            HashMap hashmap = Maps.newHashMap(this.bAsImmutableMap); // TacoSpigot - use 'bAsImmutableMap'
+
 
             hashmap.put(iblockstate, comparable);
             return hashmap;
diff --git a/src/main/java/net/minecraft/server/IBlockState.java b/src/main/java/net/minecraft/server/IBlockState.java
index de54801..51143a6 100644
--- a/src/main/java/net/minecraft/server/IBlockState.java
+++ b/src/main/java/net/minecraft/server/IBlockState.java
@@ -14,4 +14,12 @@ public interface IBlockState<T extends Comparable<T>> {
     Optional<T> b(String s);
 
     String a(T t0);
+
+    // TacoSpigot start
+    public int getId();
+
+    public int getValueId(T value);
+
+    public T getByValueId(int id);
+    // TacoSpigot end
 }
diff --git a/src/main/java/net/techcable/tacospigot/ImmutableArrayMap.java b/src/main/java/net/techcable/tacospigot/ImmutableArrayMap.java
new file mode 100644
index 0000000..cbdad7e
--- /dev/null
+++ b/src/main/java/net/techcable/tacospigot/ImmutableArrayMap.java
@@ -0,0 +1,108 @@
+package net.techcable.tacospigot;
+
+import java.util.Arrays;
+import java.util.Iterator;
+import java.util.Map;
+import java.util.function.IntFunction;
+import java.util.function.ToIntFunction;
+
+import com.google.common.base.Preconditions;
+
+public class ImmutableArrayMap<K, V> {
+    private final int offset;
+    private final Object[] data;
+    private final Object[] outlyingData;
+    private final int[] outlyingIds;
+
+    private final int size;
+
+    @SuppressWarnings("Convert2Lambda") // The comparator is anonomous for performance reasons
+    public ImmutableArrayMap(ToIntFunction<K> indexer, IntFunction<K> byIndex, Map<K, V> map) {
+        Preconditions.checkNotNull(indexer, "Null indexer function");
+        Preconditions.checkNotNull(byIndex, "Null byIndex function");
+        Preconditions.checkNotNull(map, "Null map");
+        this.size = map.size();
+        @SuppressWarnings("unchecked")
+        Map.Entry<K, V>[] entries = new Map.Entry[size];
+        Iterator<Map.Entry<K, V>> iterator = map.entrySet().iterator();
+        for (int i = 0; i < entries.length; i++) {
+            Preconditions.checkArgument(iterator.hasNext(), "Expected %s entries but only got %s", size, i + 1);
+            entries[i] = iterator.next();
+        }
+        Arrays.sort(entries, (entry1, entry2) -> Integer.compare(indexer.applyAsInt(entry1.getKey()), indexer.applyAsInt(entry2.getKey())));
+        Preconditions.checkArgument(!iterator.hasNext(), "Got more than expected %s entries", size);
+        int[] ids = Arrays.stream(entries).map(Map.Entry::getKey).mapToInt(indexer).toArray(); // Don't worry, its sorted by key id ;)
+        int[] largestRangeOfSequentialValues = calculateLargestRangeOfSequentialValues(ids);
+        int minIndex = largestRangeOfSequentialValues == null ? -1 : largestRangeOfSequentialValues[0];
+        int maxIndex = largestRangeOfSequentialValues == null ? -1 : largestRangeOfSequentialValues[1];
+        int sequentalRangeSize = largestRangeOfSequentialValues == null ? 0 : largestRangeOfSequentialValues[2];
+        if (sequentalRangeSize < size / 2) {
+            System.err.println("Less than 50% of values are sequential");
+            System.err.print(sequentalRangeSize);
+            System.err.print(" out of ");
+            System.err.println(size);
+            System.err.println("Expect reduced performance");
+        }
+        this.data = new Object[sequentalRangeSize];
+        this.outlyingIds = new int[size - sequentalRangeSize];
+        this.outlyingData = new Object[size - sequentalRangeSize];
+        this.offset = sequentalRangeSize == 0 ? 0 : ids[minIndex];
+        int outlyingIndex = 0;
+        for (int i = 0; i < entries.length; i++) {
+            Map.Entry<K, V> entry = entries[i];
+            K key = entry.getKey();
+            V value = entry.getValue();
+            int id = indexer.applyAsInt(key);
+            Preconditions.checkArgument(id >= 0, "Negative id for %s: %s", key, id);
+            if (i >= minIndex && i < maxIndex) {
+                int index = id - offset;
+                data[index] = value;
+            } else {
+                int index = outlyingIndex++;
+                outlyingIds[index] = id;
+                outlyingData[index] = value;
+            }
+        }
+    }
+
+    private static int[] calculateLargestRangeOfSequentialValues(int[] ids) {
+        int largestRangeSize = 0;
+        int[] largestRange = new int[3];
+        for (int minIndex = 0; minIndex < ids.length; minIndex++) {
+            final int min = ids[minIndex];
+            int lastNum = min;
+            int maxIndex;
+            for (maxIndex = minIndex + 1; maxIndex < ids.length; maxIndex++) {
+                final int max = ids[maxIndex];
+                if (lastNum + 1 != max) break; // The number is not sequential
+                lastNum = max;
+            }
+            int rangeSize = maxIndex - minIndex;
+            if (rangeSize > largestRangeSize) {
+                largestRange[0] = minIndex;
+                largestRange[1] = maxIndex;
+                largestRange[2] = rangeSize;
+                largestRangeSize = rangeSize;
+            }
+        }
+        return largestRangeSize == 0 ? null : largestRange;
+    }
+
+    public int size() {
+        return size;
+    }
+
+    @SuppressWarnings("unchecked")
+    public V get(int id) {
+        int index = id - offset;
+        if (index >= 0 && index < data.length) {
+            return (V) data[index];
+        }
+        int outlyingIndex = Arrays.binarySearch(outlyingIds, id);
+        if (outlyingIndex >= 0 && outlyingIndex < outlyingData.length) {
+            return (V) outlyingData[outlyingIndex];
+        } else {
+            return null;
+        }
+    }
+}
diff --git a/src/main/java/net/techcable/tacospigot/ImmutableArrayTable.java b/src/main/java/net/techcable/tacospigot/ImmutableArrayTable.java
new file mode 100644
index 0000000..aa37b2f
--- /dev/null
+++ b/src/main/java/net/techcable/tacospigot/ImmutableArrayTable.java
@@ -0,0 +1,36 @@
+package net.techcable.tacospigot;
+
+import java.util.Map;
+import java.util.function.IntFunction;
+import java.util.function.ToIntBiFunction;
+import java.util.function.ToIntFunction;
+
+import com.google.common.base.Preconditions;
+import com.google.common.collect.ImmutableMap;
+import com.google.common.collect.Table;
+
+import net.techcable.tacospigot.function.ObjIntBiFunction;
+
+public class ImmutableArrayTable<R, C, V> {
+    private final ImmutableArrayMap<R, ImmutableArrayMap<C, V>> rowMap;
+
+    public ImmutableArrayTable(ToIntFunction<R> rowIndexer, IntFunction<R> rowById, ToIntBiFunction<R, C> columnGetId, ObjIntBiFunction<R, C> columnById, Table<R, C, V> table) {
+        Preconditions.checkNotNull(table, "Null table");
+        ImmutableMap.Builder<R, ImmutableArrayMap<C, V>> rowMapBuilder = ImmutableMap.builder();
+        for (Map.Entry<R, Map<C, V>> rowEntry : table.rowMap().entrySet()) {
+            R row = rowEntry.getKey();
+            Preconditions.checkNotNull(row, "Null row");
+            ImmutableMap.Builder<C, V> rowMapEntryBuilder = ImmutableMap.builder();
+            for (Map.Entry<C, V> rowEntryEntry : rowEntry.getValue().entrySet()) {
+                rowMapEntryBuilder.put(rowEntryEntry);
+            }
+            rowMapBuilder.put(row, new ImmutableArrayMap<>((c) -> columnGetId.applyAsInt(row, c), (id) -> columnById.apply(row, id), rowMapEntryBuilder.build()));
+        }
+        this.rowMap = new ImmutableArrayMap<>(rowIndexer, rowById, rowMapBuilder.build());
+    }
+
+    public V get(int rowId, int columnId) {
+        ImmutableArrayMap<C, V> rowEntry = rowMap.get(rowId);
+        return rowEntry != null ? rowEntry.get(columnId) : null;
+    }
+}
diff --git a/src/main/java/net/techcable/tacospigot/SimpleMap.java b/src/main/java/net/techcable/tacospigot/SimpleMap.java
new file mode 100644
index 0000000..27559ee
--- /dev/null
+++ b/src/main/java/net/techcable/tacospigot/SimpleMap.java
@@ -0,0 +1,10 @@
+package net.techcable.tacospigot;
+
+import javax.annotation.Nonnull;
+import javax.annotation.Nullable;
+
+@FunctionalInterface
+public interface SimpleMap<K, V> {
+    @Nullable
+    public V get(@Nonnull K key);
+}
diff --git a/src/main/java/net/techcable/tacospigot/SimpleTable.java b/src/main/java/net/techcable/tacospigot/SimpleTable.java
new file mode 100644
index 0000000..f76ad60
--- /dev/null
+++ b/src/main/java/net/techcable/tacospigot/SimpleTable.java
@@ -0,0 +1,10 @@
+package net.techcable.tacospigot;
+
+import javax.annotation.Nonnull;
+import javax.annotation.Nullable;
+
+@FunctionalInterface
+public interface SimpleTable<R, C, V> {
+    @Nullable
+    public V get(@Nonnull R row, @Nonnull C column);
+}
diff --git a/src/main/java/net/techcable/tacospigot/TacoSpigotConfig.java b/src/main/java/net/techcable/tacospigot/TacoSpigotConfig.java
index ce66b1c..b7699d8 100644
--- a/src/main/java/net/techcable/tacospigot/TacoSpigotConfig.java
+++ b/src/main/java/net/techcable/tacospigot/TacoSpigotConfig.java
@@ -102,4 +102,9 @@ public class TacoSpigotConfig {
         config.addDefault(path, def);
         return config.getString(path, config.getString(path));
     }
+
+    public static boolean useArraysForBlockStates;
+    private static void useArraysForBlockStates() {
+        useArraysForBlockStates = getBoolean("useArraysForBlockStates", false);
+    }
 }
diff --git a/src/main/java/net/techcable/tacospigot/function/ObjIntBiFunction.java b/src/main/java/net/techcable/tacospigot/function/ObjIntBiFunction.java
new file mode 100644
index 0000000..87a50a3
--- /dev/null
+++ b/src/main/java/net/techcable/tacospigot/function/ObjIntBiFunction.java
@@ -0,0 +1,6 @@
+package net.techcable.tacospigot.function;
+
+@FunctionalInterface
+public interface ObjIntBiFunction<T, R> {
+    public R apply(T t, int i);
+}
-- 
2.8.3

