From 8e25cafe70dcf2305efd88b9f3b9ca296de87971 Mon Sep 17 00:00:00 2001
From: SotrForgotten <i@omc.hk>
Date: Sat, 16 Jul 2016 05:17:08 +0800
Subject: [PATCH] Implement MCAPI also add 1.9 to 1.9.2 legacy protocol support


diff --git a/src/main/java/net/minecraft/server/EntityPlayer.java b/src/main/java/net/minecraft/server/EntityPlayer.java
index 4ab51e8..8aca102 100644
--- a/src/main/java/net/minecraft/server/EntityPlayer.java
+++ b/src/main/java/net/minecraft/server/EntityPlayer.java
@@ -53,6 +53,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
     private Entity cj = null;
     protected boolean ck; // PAIL: private -> protected, rename worldChangeInvuln
     private int containerCounter;
+	public int protocolVersion;
     public boolean f;
     public int ping;
     public boolean viewingCredits;
diff --git a/src/main/java/net/minecraft/server/HandshakeListener.java b/src/main/java/net/minecraft/server/HandshakeListener.java
index 0641d06..76934a2 100644
--- a/src/main/java/net/minecraft/server/HandshakeListener.java
+++ b/src/main/java/net/minecraft/server/HandshakeListener.java
@@ -66,11 +66,12 @@ public class HandshakeListener implements PacketHandshakingInListener {
                 chatcomponenttext = new ChatComponentText( java.text.MessageFormat.format( org.spigotmc.SpigotConfig.outdatedServerMessage.replaceAll("'", "''"), "1.9.4" ) ); // Spigot
                 this.b.sendPacket(new PacketLoginOutDisconnect(chatcomponenttext));
                 this.b.close(chatcomponenttext);
-            } else if (packethandshakinginsetprotocol.b() < 110) {
+            } else if (packethandshakinginsetprotocol.b() < 107) { // SportBukkit
                 chatcomponenttext = new ChatComponentText( java.text.MessageFormat.format( org.spigotmc.SpigotConfig.outdatedClientMessage.replaceAll("'", "''"), "1.9.4" ) ); // Spigot
                 this.b.sendPacket(new PacketLoginOutDisconnect(chatcomponenttext));
                 this.b.close(chatcomponenttext);
             } else {
+				this.b.protocolVersion = packethandshakinginsetprotocol.b(); // SportBukkit
                 this.b.setPacketListener(new LoginListener(this.a, this.b));
                 // Paper start - handshake event
                 boolean proxyLogicEnabled = org.spigotmc.SpigotConfig.bungee;
diff --git a/src/main/java/net/minecraft/server/NetworkManager.java b/src/main/java/net/minecraft/server/NetworkManager.java
index 90ca081..c69f62c 100644
--- a/src/main/java/net/minecraft/server/NetworkManager.java
+++ b/src/main/java/net/minecraft/server/NetworkManager.java
@@ -71,6 +71,7 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet<?>> {
     public com.mojang.authlib.properties.Property[] spoofedProfile;
     public boolean preparing = true;
     // Spigot End
+	public int protocolVersion; // SportBukkit
     private PacketListener m;
     private IChatBaseComponent n;
     private boolean o;
diff --git a/src/main/java/net/minecraft/server/PacketDataSerializer.java b/src/main/java/net/minecraft/server/PacketDataSerializer.java
index 727e085..255c728 100644
--- a/src/main/java/net/minecraft/server/PacketDataSerializer.java
+++ b/src/main/java/net/minecraft/server/PacketDataSerializer.java
@@ -28,6 +28,7 @@ import net.techcable.tacospigot.event.item.ItemSendEvent; // Torch
 public class PacketDataSerializer extends ByteBuf {
 
     private final ByteBuf a;
+	public int protocolVersion = 110; // SportBukkit
 	// TacoSpigot start - track player
     private final EntityPlayer player;
 
diff --git a/src/main/java/net/minecraft/server/PacketEncoder.java b/src/main/java/net/minecraft/server/PacketEncoder.java
index c333f95..0d65f98 100644
--- a/src/main/java/net/minecraft/server/PacketEncoder.java
+++ b/src/main/java/net/minecraft/server/PacketEncoder.java
@@ -30,6 +30,14 @@ public class PacketEncoder extends MessageToByteEncoder<Packet<?>> {
             throw new IOException("Can\'t serialize unregistered packet");
         } else {
             PacketDataSerializer packetdataserializer = new PacketDataSerializer(bytebuf, channelhandlercontext.channel().attr(PlayerConnection.PLAYER_ATTR_KEY).get()); // TacoSpigot - pass player as argument to PacketDataSerializer
+			
+			// SportBukkit start
+            final NetworkManager networkManager = channelhandlercontext.pipeline().get(NetworkManager.class);
+            if(networkManager != null) {
+                packetdataserializer.protocolVersion = networkManager.protocolVersion;
+                integer = org.bukkit.craftbukkit.protocol.ProtocolTranslators.translator(packetdataserializer.protocolVersion).reversePacketId(integer);
+            }
+            // SportBukkit end
 
             packetdataserializer.d(integer.intValue());
 
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutLogin.java b/src/main/java/net/minecraft/server/PacketPlayOutLogin.java
new file mode 100644
index 0000000..bd5e2e7
--- /dev/null
+++ b/src/main/java/net/minecraft/server/PacketPlayOutLogin.java
@@ -0,0 +1,73 @@
+package net.minecraft.server;
+
+import java.io.IOException;
+
+public class PacketPlayOutLogin implements Packet<PacketListenerPlayOut> {
+
+    private int a;
+    private boolean b;
+    private WorldSettings.EnumGamemode c;
+    private int d;
+    private EnumDifficulty e;
+    private int f;
+    private WorldType g;
+    private boolean h;
+
+    public PacketPlayOutLogin() {}
+
+    public PacketPlayOutLogin(int i, WorldSettings.EnumGamemode worldsettings_enumgamemode, boolean flag, int j, EnumDifficulty enumdifficulty, int k, WorldType worldtype, boolean flag1) {
+        this.a = i;
+        this.d = j;
+        this.e = enumdifficulty;
+        this.c = worldsettings_enumgamemode;
+        this.f = k;
+        this.b = flag;
+        this.g = worldtype;
+        this.h = flag1;
+    }
+
+    public void a(PacketDataSerializer packetdataserializer) throws IOException {
+        this.a = packetdataserializer.readInt();
+        short short0 = packetdataserializer.readUnsignedByte();
+
+        this.b = (short0 & 8) == 8;
+        int i = short0 & -9;
+
+        this.c = WorldSettings.EnumGamemode.getById(i);
+        this.d = packetdataserializer.readInt();
+        this.e = EnumDifficulty.getById(packetdataserializer.readUnsignedByte());
+        this.f = packetdataserializer.readUnsignedByte();
+        this.g = WorldType.getType(packetdataserializer.e(16));
+        if (this.g == null) {
+            this.g = WorldType.NORMAL;
+        }
+
+        this.h = packetdataserializer.readBoolean();
+    }
+
+    public void b(PacketDataSerializer packetdataserializer) throws IOException {
+        packetdataserializer.writeInt(this.a);
+        int i = this.c.getId();
+
+        if (this.b) {
+            i |= 8;
+        }
+
+        packetdataserializer.writeByte(i);
+        // SportBukkit start
+        if (packetdataserializer.protocolVersion < 108) {
+            packetdataserializer.writeByte(this.d);
+        } else {
+            packetdataserializer.writeInt(this.d);
+        }
+        // SportBukkit end
+        packetdataserializer.writeByte(this.e.a());
+        packetdataserializer.writeByte(this.f);
+        packetdataserializer.a(this.g.name());
+        packetdataserializer.writeBoolean(this.h);
+    }
+
+    public void a(PacketListenerPlayOut packetlistenerplayout) {
+        packetlistenerplayout.a(this);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutMapChunk.java b/src/main/java/net/minecraft/server/PacketPlayOutMapChunk.java
index 7ef989c..0e8dc51 100644
--- a/src/main/java/net/minecraft/server/PacketPlayOutMapChunk.java
+++ b/src/main/java/net/minecraft/server/PacketPlayOutMapChunk.java
@@ -95,6 +95,7 @@ public class PacketPlayOutMapChunk implements Packet<PacketListenerPlayOut> {
         packetdataserializer.d(this.c);
         packetdataserializer.d(this.d.length);
         packetdataserializer.writeBytes(this.d);
+		if(packetdataserializer.protocolVersion < 110) return; // SportBukkit
         packetdataserializer.d(this.e.size());
         Iterator iterator = this.e.iterator();
 
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutNamedSoundEffect.java b/src/main/java/net/minecraft/server/PacketPlayOutNamedSoundEffect.java
index 2db80e8..4d55b00 100644
--- a/src/main/java/net/minecraft/server/PacketPlayOutNamedSoundEffect.java
+++ b/src/main/java/net/minecraft/server/PacketPlayOutNamedSoundEffect.java
@@ -38,7 +38,17 @@ public class PacketPlayOutNamedSoundEffect implements Packet<PacketListenerPlayO
     }
 
     public void b(PacketDataSerializer packetdataserializer) throws IOException {
-        packetdataserializer.d(SoundEffect.a.a(this.a)); // SportBukkit - fix decompile error
+        // SportBukkit start
+        if(packetdataserializer.protocolVersion < 108) {
+            int id = SoundEffect.a.a(this.a);
+            if (id >= SoundEffect.a.a(SoundEffect.a.get(new MinecraftKey("item.elytra.flying")))) {
+                id--;
+            }
+            packetdataserializer.d(id);
+        } else {
+            packetdataserializer.d(SoundEffect.a.a(this.a));
+        }
+        // SportBukkit end
         packetdataserializer.a((Enum) this.b);
         packetdataserializer.writeInt(this.c);
         packetdataserializer.writeInt(this.d);
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutTileEntityData.java b/src/main/java/net/minecraft/server/PacketPlayOutTileEntityData.java
new file mode 100644
index 0000000..758c547
--- /dev/null
+++ b/src/main/java/net/minecraft/server/PacketPlayOutTileEntityData.java
@@ -0,0 +1,46 @@
+package net.minecraft.server;
+
+import java.io.IOException;
+
+public class PacketPlayOutTileEntityData implements Packet<PacketListenerPlayOut> {
+
+    private BlockPosition a;
+    private int b;
+    private NBTTagCompound c;
+
+    public PacketPlayOutTileEntityData() {}
+
+    public PacketPlayOutTileEntityData(BlockPosition blockposition, int i, NBTTagCompound nbttagcompound) {
+        this.a = blockposition;
+        this.b = i;
+        this.c = nbttagcompound;
+    }
+
+    public void a(PacketDataSerializer packetdataserializer) throws IOException {
+        this.a = packetdataserializer.e();
+        this.b = packetdataserializer.readUnsignedByte();
+        this.c = packetdataserializer.j();
+    }
+
+    public void b(PacketDataSerializer packetdataserializer) throws IOException {
+		// SportBukkit start
+        if(b == 9 && packetdataserializer.protocolVersion < 110) {
+            // Fake a sign update packet
+            packetdataserializer.writerIndex(packetdataserializer.writerIndex() - 1);
+            packetdataserializer.d(0x46); // rewrite the packet ID
+            packetdataserializer.a(this.a);
+            for(int line = 0; line < 4; line++) {
+                packetdataserializer.a(IChatBaseComponent.ChatSerializer.a(c.getString("Text" + (line + 1))));
+            }
+            return;
+        }
+        // SportBukkit end
+        packetdataserializer.a(this.a);
+        packetdataserializer.writeByte((byte) this.b);
+        packetdataserializer.a(this.c);
+    }
+
+    public void a(PacketListenerPlayOut packetlistenerplayout) {
+        packetlistenerplayout.a(this);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/PlayerChunk.java b/src/main/java/net/minecraft/server/PlayerChunk.java
index bdeaf73..36aad24 100644
--- a/src/main/java/net/minecraft/server/PlayerChunk.java
+++ b/src/main/java/net/minecraft/server/PlayerChunk.java
@@ -150,14 +150,43 @@ public class PlayerChunk {
                 this.playerChunkMap.getWorld().getTracker().a(entityplayer, this.chunk);
             }
 
+			sendLegacyTileEntityUpdates(0xffff, this.c); // SportBukkit
             return true;
         }
     }
+	
+	// SportBukkit start
+    private List<Packet> getTileEntityPackets(int sectionMask) {
+        final List<Packet> packets = new java.util.ArrayList<Packet>();
+        for(TileEntity tile : chunk.getTileEntities().values()) {
+            if((sectionMask & (1 << (tile.getPosition().getY() >> 4))) != 0) {
+                final Packet packet = tile.getUpdatePacket();
+                if(packet != null) packets.add(packet);
+            }
+        }
+        return packets;
+    }
+
+    private void sendLegacyTileEntityUpdates(int sectionMask, java.util.Collection<EntityPlayer> players) {
+        if(sectionMask == 0 || players.isEmpty()) return;
+        List<Packet> packets = null;
+        for(EntityPlayer viewer : players) {
+            if(viewer.protocolVersion < 110) {
+                if(packets == null) {
+                    packets = getTileEntityPackets(sectionMask);
+                    if(packets.isEmpty()) return;
+                }
+                for(Packet packet : packets) viewer.playerConnection.sendPacket(packet);
+            }
+        }
+    }
+    // SportBukkit end
 
     public void sendChunk(EntityPlayer entityplayer) {
         if (this.done) {
             entityplayer.playerConnection.sendPacket(new PacketPlayOutMapChunk(this.chunk, '\uffff'));
             this.playerChunkMap.getWorld().getTracker().a(entityplayer, this.chunk);
+			sendLegacyTileEntityUpdates(0xffff, java.util.Collections.singleton(entityplayer)); // SportBukkit
         }
     }
 
@@ -219,6 +248,7 @@ public class PlayerChunk {
                     }
                 } else if (this.dirtyCount == 64) {
                     this.a((Packet) (new PacketPlayOutMapChunk(this.chunk, this.h)));
+					sendLegacyTileEntityUpdates(this.h, this.c); // SportBukkit
                 } else {
                     this.a((Packet) (new PacketPlayOutMultiBlockChange(this.dirtyCount, this.dirtyBlocks, this.chunk)));
 
diff --git a/src/main/java/net/minecraft/server/PlayerList.java b/src/main/java/net/minecraft/server/PlayerList.java
index 7fa2886..eef75ab 100644
--- a/src/main/java/net/minecraft/server/PlayerList.java
+++ b/src/main/java/net/minecraft/server/PlayerList.java
@@ -493,6 +493,7 @@ public abstract class PlayerList {
 
         EntityPlayer entity = new EntityPlayer(server, server.getWorldServer(0), gameprofile, new PlayerInteractManager(server.getWorldServer(0)));
 		entity.playerConnection = new PlayerConnection(server, loginlistener.networkManager, entity); // SportBukkit - create this right away so it's never null
+		entity.protocolVersion = loginlistener.networkManager.protocolVersion; // Can't reach NetworkManager through CraftPlayer at this point, so copy the value
         Player player = entity.getBukkitEntity();
         PlayerLoginEvent event = new PlayerLoginEvent(player, hostname, ((java.net.InetSocketAddress) socketaddress).getAddress(), ((java.net.InetSocketAddress) loginlistener.networkManager.getRawAddress()).getAddress());
         String s;
diff --git a/src/main/java/org/bukkit/command/defaults/VersionCommand.java b/src/main/java/org/bukkit/command/defaults/VersionCommand.java
index c8ff3a8..a0268a1 100644
--- a/src/main/java/org/bukkit/command/defaults/VersionCommand.java
+++ b/src/main/java/org/bukkit/command/defaults/VersionCommand.java
@@ -165,11 +165,12 @@ public class VersionCommand extends BukkitCommand {
             }
         }
         versionLock.lock();
-        try {
+        // try {
             if (hasVersion) {
                 sender.sendMessage(versionMessage);
                 return;
             }
+			/*
             versionWaiters.add(sender);
             sender.sendMessage("Checking version, please wait...");
             if (!versionTaskStarted) {
@@ -182,9 +183,10 @@ public class VersionCommand extends BukkitCommand {
                     }
                 }).start();
             }
-        } finally {
+		*/
+        // } finally {
             versionLock.unlock();
-        }
+        // }
     }
 
     // Paper start
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index daac03a..d7a52c2 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -9,6 +9,7 @@ import java.io.InputStreamReader;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
+import com.google.common.collect.ImmutableSet;
 import java.util.HashSet;
 import java.util.Iterator;
 import java.util.LinkedHashMap;
@@ -1940,4 +1941,9 @@ public final class CraftServer implements Server {
         return ((DedicatedServer) this.console).propertyManager.getBoolean("debug", false);
     }
     // Paper end
+	
+	@Override
+    public Set<Integer> getProtocolVersions() {
+        return ImmutableSet.of(107, 108, 109, 110);
+    }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/command/ProxiedNativeCommandSender.java b/src/main/java/org/bukkit/craftbukkit/command/ProxiedNativeCommandSender.java
index 9acd92c..c550fa0 100644
--- a/src/main/java/org/bukkit/craftbukkit/command/ProxiedNativeCommandSender.java
+++ b/src/main/java/org/bukkit/craftbukkit/command/ProxiedNativeCommandSender.java
@@ -9,6 +9,7 @@ import org.bukkit.command.CommandSender;
 import org.bukkit.command.ProxiedCommandSender;
 import org.bukkit.permissions.Permission;
 import org.bukkit.permissions.PermissionAttachment;
+import net.md_5.bungee.api.chat.BaseComponent;
 import org.bukkit.permissions.PermissionAttachmentInfo;
 import org.bukkit.plugin.Plugin;
 
@@ -102,6 +103,16 @@ public class ProxiedNativeCommandSender implements ProxiedCommandSender {
     public void removeAttachment(PermissionAttachment attachment) {
         getCaller().removeAttachment(attachment);
     }
+	
+	@Override
+    public void sendMessage(BaseComponent... message) {
+        getCaller().sendMessage(message);
+    }
+
+    @Override
+    public void sendMessage(BaseComponent message) {
+        getCaller().sendMessage(message);
+    }
 
     @Override
     public void recalculatePermissions() {
diff --git a/src/main/java/org/bukkit/craftbukkit/command/ServerCommandSender.java b/src/main/java/org/bukkit/craftbukkit/command/ServerCommandSender.java
index b339cf3..b9fea51 100644
--- a/src/main/java/org/bukkit/craftbukkit/command/ServerCommandSender.java
+++ b/src/main/java/org/bukkit/craftbukkit/command/ServerCommandSender.java
@@ -8,6 +8,7 @@ import org.bukkit.permissions.Permission;
 import org.bukkit.permissions.PermissionAttachment;
 import org.bukkit.permissions.PermissionAttachmentInfo;
 import org.bukkit.plugin.Plugin;
+import net.md_5.bungee.api.chat.BaseComponent;
 
 import java.util.Set;
 
@@ -41,6 +42,16 @@ public abstract class ServerCommandSender implements CommandSender {
     public boolean hasPermission(Permission perm) {
         return this.perm.hasPermission(perm);
     }
+	
+	@Override
+    public void sendMessage(BaseComponent... message) {
+        sendMessage(BaseComponent.toLegacyText(message));
+    }
+
+    @Override
+    public void sendMessage(BaseComponent message) {
+        sendMessage(BaseComponent.toLegacyText(message));
+    }
 
     public PermissionAttachment addAttachment(Plugin plugin, String name, boolean value) {
         return perm.addAttachment(plugin, name, value);
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
index 0023a25..8064f3f 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
@@ -4,6 +4,7 @@ import com.google.common.base.Preconditions;
 import java.util.List;
 import java.util.Set;
 import java.util.UUID;
+import net.md_5.bungee.api.chat.BaseComponent;
 
 import net.minecraft.server.*;
 
@@ -426,6 +427,14 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
     public boolean hasMetadata(String metadataKey) {
         return server.getEntityMetadata().hasMetadata(this, metadataKey);
     }
+	
+	@Override
+    public void sendMessage(BaseComponent... message) {
+    }
+
+    @Override
+    public void sendMessage(BaseComponent message) {
+    }
 
     public void removeMetadata(String metadataKey, Plugin owningPlugin) {
         server.getEntityMetadata().removeMetadata(this, metadataKey, owningPlugin);
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index 59e77a1..62bc505 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -119,6 +119,29 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
             return null;
         }
     }
+	
+	@Override
+    public java.util.Locale getCurrentLocale() {
+        try {
+            return org.apache.commons.lang.LocaleUtils.toLocale(getLocale());
+        } catch(IllegalArgumentException e) {
+            return java.util.Locale.US;
+        }
+    }
+
+    @Override
+    public void sendMessage(net.md_5.bungee.api.ChatMessageType position, BaseComponent... message) {
+        if ( getHandle().playerConnection == null ) return;
+
+        PacketPlayOutChat packet = new PacketPlayOutChat(null, (byte) position.ordinal());
+        packet.components = message;
+        getHandle().playerConnection.sendPacket(packet);
+    }
+
+    @Override
+    public void sendMessage(net.md_5.bungee.api.ChatMessageType position, BaseComponent message) {
+        sendMessage(position, new BaseComponent[] {message});
+    }
 
     @Override
     public double getEyeHeight() {
@@ -1739,4 +1762,9 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         return spigot;
     }
     // Spigot end
+	
+	@Override
+    public int getProtocolVersion() {
+        return getHandle().protocolVersion;
+    }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/protocol/ProtocolTranslator.java b/src/main/java/org/bukkit/craftbukkit/protocol/ProtocolTranslator.java
new file mode 100644
index 0000000..809d0eb
--- /dev/null
+++ b/src/main/java/org/bukkit/craftbukkit/protocol/ProtocolTranslator.java
@@ -0,0 +1,21 @@
+package org.bukkit.craftbukkit.protocol;
+
+import com.google.common.collect.BiMap;
+import com.google.common.collect.HashBiMap;
+
+public abstract class ProtocolTranslator {
+
+    protected final BiMap<Integer, Integer> IDS = HashBiMap.create(); // legacyId -> currentId
+
+    public abstract int protocolVersion();
+
+    public int forwardPacketId(int legacyId) {
+        final Integer currentId = IDS.get(legacyId);
+        return currentId != null ? currentId : legacyId;
+    }
+
+    public int reversePacketId(int currentId) {
+        final Integer legacyId = IDS.inverse().get(currentId);
+        return legacyId != null ? legacyId : currentId;
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/org/bukkit/craftbukkit/protocol/ProtocolTranslators.java b/src/main/java/org/bukkit/craftbukkit/protocol/ProtocolTranslators.java
new file mode 100644
index 0000000..207d836
--- /dev/null
+++ b/src/main/java/org/bukkit/craftbukkit/protocol/ProtocolTranslators.java
@@ -0,0 +1,41 @@
+package org.bukkit.craftbukkit.protocol;
+
+import java.util.List;
+
+import com.google.common.collect.ImmutableList;
+
+public class ProtocolTranslators {
+
+    public static ProtocolTranslator translator(int protocolVersion) {
+        for(ProtocolTranslator translator : TRANSLATORS) {
+            if(translator.protocolVersion() <= protocolVersion) {
+                return translator;
+            }
+        }
+        return IDENTITY;
+    }
+
+    private static final ProtocolTranslator IDENTITY = new Proto110();
+
+    private static final List<? extends ProtocolTranslator> TRANSLATORS = ImmutableList.of(
+        IDENTITY,
+        new Proto107()
+    );
+
+    private static class Proto110 extends ProtocolTranslator {
+        @Override public int protocolVersion() { return 110; }
+    }
+
+    private static class Proto107 extends Proto110 {
+        @Override public int protocolVersion() { return 107; }
+
+        public Proto107() {
+            IDS.put(0x47, 0x46); // PacketPlayOutNamedSoundEffect
+            IDS.put(0x48, 0x47); // PacketPlayOutPlayerListHeaderFooter
+            IDS.put(0x49, 0x48); // PacketPlayOutCollect
+            IDS.put(0x4a, 0x49); // PacketPlayOutEntityTeleport
+            IDS.put(0x4b, 0x4a); // PacketPlayOutUpdateAttributes
+            IDS.put(0x4c, 0x4b); // PacketPlayOutEntityEffect
+        }
+    }
+}
\ No newline at end of file
-- 
2.8.2.windows.1

