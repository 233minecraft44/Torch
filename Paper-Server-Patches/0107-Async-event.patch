From 5c944abf1fbafe01b7a1655cf2d4e66a662b03e5 Mon Sep 17 00:00:00 2001
From: SotrForgotten <i@omc.hk>
Date: Tue, 12 Jul 2016 16:20:51 +0800
Subject: [PATCH] Async event


diff --git a/src/main/java/net/minecraft/server/CraftingManager.java b/src/main/java/net/minecraft/server/CraftingManager.java
index 6c3775e..6c7ef3c 100644
--- a/src/main/java/net/minecraft/server/CraftingManager.java
+++ b/src/main/java/net/minecraft/server/CraftingManager.java
@@ -8,6 +8,7 @@ import java.util.Comparator;
 import java.util.HashMap;
 import java.util.Iterator;
 import java.util.List;
+import java.util.concurrent.ConcurrentHashMap;
 import javax.annotation.Nullable;
 
 import org.bukkit.craftbukkit.event.CraftEventFactory; // CraftBukkit
@@ -225,9 +226,11 @@ public class CraftingManager {
             }
         }
 
-        HashMap hashmap;
+        // HashMap hashmap;
+		ConcurrentHashMap hashmap;
 
-        for (hashmap = Maps.newHashMap(); i < aobject.length; i += 2) {
+        // for (hashmap = Maps.newHashMap(); i < aobject.length; i += 2) {
+		for (hashmap = new ConcurrentHashMap(); i < aobject.length; i += 2) {
             Character character = (Character) aobject[i];
             ItemStack itemstack1 = null;
 
diff --git a/src/main/java/net/minecraft/server/Entity.java b/src/main/java/net/minecraft/server/Entity.java
index d27d102..b9200b9 100644
--- a/src/main/java/net/minecraft/server/Entity.java
+++ b/src/main/java/net/minecraft/server/Entity.java
@@ -110,6 +110,7 @@ public abstract class Entity implements ICommandListener {
     public boolean positionChanged;
     public boolean B;
     public boolean C;
+	public boolean is_collidefence = false; // Hose
     public boolean velocityChanged;
     protected boolean E;
     private boolean av;
@@ -453,10 +454,18 @@ public abstract class Entity implements ICommandListener {
     // Paper end
 
     protected void H() {
+		// Hose start
+		/*
         if (this.portalCooldown > 0) {
             --this.portalCooldown;
         }
-
+		*/
+		if (this.portalCooldown > 0) {
+            --this.portalCooldown;
+        } else {
+            this.teleport_count = 0;
+        }
+		// Hose end
     }
 
     public int V() {
@@ -1228,6 +1237,14 @@ public abstract class Entity implements ICommandListener {
                     for (int k = blockposition_pooledblockposition.getZ(); k <= blockposition_pooledblockposition1.getZ(); ++k) {
                         blockposition_pooledblockposition2.f(i, j, k);
                         IBlockData iblockdata = this.world.getType(blockposition_pooledblockposition2);
+						
+						// Hose start - Check fence
+                        if (iblockdata.getBlock() instanceof BlockFence) {
+                            this.is_collidefence = true;
+                        } else {
+                            this.is_collidefence = false;
+                        }
+						// Hose end
 
                         try {
                             iblockdata.getBlock().a(this.world, (BlockPosition) blockposition_pooledblockposition2, iblockdata, this);
@@ -1585,11 +1602,19 @@ public abstract class Entity implements ICommandListener {
                     d0 *= (double) (1.0F - this.R);
                     d1 *= (double) (1.0F - this.R);
                     if (!this.isVehicle()) {
-                        this.g(-d0, 0.0D, -d1);
+                        if (this.is_collidefence) {
+                            this.g(-d0*3D, 0.0D, -d1*3D);
+                        } else {
+                            this.g(-d0, 0.0D, -d1);
+                        }
                     }
 
                     if (!entity.isVehicle()) {
-                        entity.g(d0, 0.0D, d1);
+                        if (this.is_collidefence) {
+                            entity.g(d0*3D, 0.0D, d1*3D);
+                        } else {
+                            entity.g(d0, 0.0D, d1);
+                        }
                     }
                 }
 
@@ -2507,7 +2532,7 @@ public abstract class Entity implements ICommandListener {
 
     @Nullable
     public Entity c(int i) {
-        if (!this.world.isClientSide && !this.dead) {
+        if (!this.world.isClientSide && !this.dead && this.teleport_count == 0) {
             this.world.methodProfiler.a("changeDimension");
             MinecraftServer minecraftserver = this.h();
             // CraftBukkit start - Move logic into new function "teleportTo(Location,boolean)"
@@ -2552,8 +2577,10 @@ public abstract class Entity implements ICommandListener {
         return null;
     }
 
+	int teleport_count = 0; // Hose
     public Entity teleportTo(Location exit, boolean portal) {
-        if (!this.dead) { // Paper
+		if (!this.dead && teleport_count == 0) { // Paper // Hose
+            teleport_count = 1;
             WorldServer worldserver = ((CraftWorld) getBukkitEntity().getLocation().getWorld()).getHandle();
             WorldServer worldserver1 = ((CraftWorld) exit.getWorld()).getHandle();
             int i = worldserver1.dimension;
diff --git a/src/main/java/net/minecraft/server/EntityFallingBlock.java b/src/main/java/net/minecraft/server/EntityFallingBlock.java
index 10592bf..7cf22fb 100644
--- a/src/main/java/net/minecraft/server/EntityFallingBlock.java
+++ b/src/main/java/net/minecraft/server/EntityFallingBlock.java
@@ -19,6 +19,7 @@ public class EntityFallingBlock extends Entity {
     private int fallHurtMax = 40;
     private float fallHurtAmount = 2.0F;
     public NBTTagCompound tileEntityData;
+	protected boolean is_droped;
     protected static final DataWatcherObject<BlockPosition> d = DataWatcher.a(EntityFallingBlock.class, DataWatcherRegistry.j);
 
     public EntityFallingBlock(World world) {
@@ -142,7 +143,11 @@ public class EntityFallingBlock extends Entity {
                                     }
                                 }
                             } else if (this.dropItem && this.world.getGameRules().getBoolean("doEntityDrops")) {
-                                this.a(new ItemStack(block, 1, block.getDropData(this.block)), 0.0F);
+                                if (is_droped) {
+                                } else {
+                                    is_droped = true;
+                                    this.a(new ItemStack(block, 1, block.getDropData(this.block)), 0.0F);
+                                }
                             }
                         }
                     }
@@ -189,7 +194,7 @@ public class EntityFallingBlock extends Entity {
             int i = MathHelper.f(f - 1.0F);
 
             if (i > 0) {
-                ArrayList arraylist = Lists.newArrayList(this.world.getEntities(this, this.getBoundingBox()));
+                List arraylist = Lists.newCopyOnWriteArrayList(this.world.getEntities(this, this.getBoundingBox()));
                 boolean flag = block == Blocks.ANVIL;
                 DamageSource damagesource = flag ? DamageSource.ANVIL : DamageSource.FALLING_BLOCK;
                 Iterator iterator = arraylist.iterator();
diff --git a/src/main/java/net/minecraft/server/EntityMinecartAbstract.java b/src/main/java/net/minecraft/server/EntityMinecartAbstract.java
index af1f789..76ee5bf 100644
--- a/src/main/java/net/minecraft/server/EntityMinecartAbstract.java
+++ b/src/main/java/net/minecraft/server/EntityMinecartAbstract.java
@@ -254,9 +254,13 @@ public abstract class EntityMinecartAbstract extends Entity implements INamableT
                 }
             }
 
-            if (this.portalCooldown > 0) {
+			// Hose start
+			if (this.portalCooldown > 0) {
                 --this.portalCooldown;
+            } else {
+                this.teleport_count = 0;
             }
+			// Hose end
 
             this.world.methodProfiler.b();
         }
diff --git a/src/main/java/net/minecraft/server/Explosion.java b/src/main/java/net/minecraft/server/Explosion.java
index d18bcb7..604cdfe 100644
--- a/src/main/java/net/minecraft/server/Explosion.java
+++ b/src/main/java/net/minecraft/server/Explosion.java
@@ -8,7 +8,6 @@ import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import java.util.Random;
-
 import java.util.Queue;
 
 // CraftBukkit start
@@ -18,6 +17,9 @@ import org.bukkit.Location;
 import org.bukkit.event.block.BlockExplodeEvent;
 // CraftBukkit end
 
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.ConcurrentMap;
+
 public class Explosion {
 
     private final boolean a;
@@ -30,7 +32,7 @@ public class Explosion {
     public final Entity source;
     private final float size;
     private final List<BlockPosition> blocks = Lists.newArrayList();
-    private final Map<EntityHuman, Vec3D> k = Maps.newHashMap();
+    private final ConcurrentHashMap<EntityHuman, Vec3D> k = new ConcurrentHashMap<EntityHuman, Vec3D>(); // Hose
     public boolean wasCanceled = false; // CraftBukkit - add field
 
     public Explosion(World world, Entity entity, double d0, double d1, double d2, float f, boolean flag, boolean flag1) {
@@ -283,7 +285,7 @@ public class Explosion {
 
     }
 
-    public Map<EntityHuman, Vec3D> b() {
+    public ConcurrentMap<EntityHuman, Vec3D> b() { // Hose
         return this.k;
     }
 
diff --git a/src/main/java/net/minecraft/server/ItemStack.java b/src/main/java/net/minecraft/server/ItemStack.java
index ec49f27..04a16ff 100644
--- a/src/main/java/net/minecraft/server/ItemStack.java
+++ b/src/main/java/net/minecraft/server/ItemStack.java
@@ -9,6 +9,9 @@ import javax.annotation.Nullable;
 // CraftBukkit start
 import java.util.List;
 import java.util.Map;
+import java.util.Queue;
+import java.util.concurrent.ConcurrentLinkedQueue;
+import java.util.concurrent.CopyOnWriteArrayList;
 
 import org.bukkit.Location;
 import org.bukkit.TreeType;
diff --git a/src/main/java/net/minecraft/server/PersistentCollection.java b/src/main/java/net/minecraft/server/PersistentCollection.java
index 57a892c..e5ab3a6 100644
--- a/src/main/java/net/minecraft/server/PersistentCollection.java
+++ b/src/main/java/net/minecraft/server/PersistentCollection.java
@@ -14,14 +14,16 @@ import java.io.OutputStream;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.ConcurrentMap;
 import javax.annotation.Nullable;
 
 public class PersistentCollection {
 
     private IDataManager b;
-    protected Map<String, PersistentBase> a = Maps.newHashMap();
+    protected ConcurrentMap<String, PersistentBase> a = new ConcurrentHashMap<String, PersistentBase>(); // Hose
     public List<PersistentBase> c = Lists.newArrayList(); // Spigot
-    private Map<String, Short> d = Maps.newHashMap();
+    private ConcurrentMap<String, Short> d = new ConcurrentHashMap<String, Short>(); // Hose
 
     public PersistentCollection(IDataManager idatamanager) {
         this.b = idatamanager;
diff --git a/src/main/java/net/minecraft/server/PlayerConnection.java b/src/main/java/net/minecraft/server/PlayerConnection.java
index 5d26825..389b2da 100644
--- a/src/main/java/net/minecraft/server/PlayerConnection.java
+++ b/src/main/java/net/minecraft/server/PlayerConnection.java
@@ -10,6 +10,7 @@ import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.Iterator;
+import java.util.concurrent.ConcurrentHashMap;
 import java.util.List;
 import java.util.Set;
 import org.apache.commons.lang3.StringUtils;
@@ -77,7 +78,8 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
     private static final AtomicIntegerFieldUpdater chatSpamField = AtomicIntegerFieldUpdater.newUpdater(PlayerConnection.class, "chatThrottle");
     // CraftBukkit end
     private int j;
-    private final IntHashMap<Short> k = new IntHashMap();
+    // private final IntHashMap<Short> k = new IntHashMap();
+	private ConcurrentHashMap<Integer, Short> k = new ConcurrentHashMap(); // Hose
     private double l;
     private double m;
     private double n;
@@ -102,6 +104,11 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
     private int G;
     private boolean processedDisconnect; // CraftBukkit - Added
 	public static final AttributeKey<EntityPlayer> PLAYER_ATTR_KEY = AttributeKey.valueOf("player"); // TacoSpigot
+	
+	private int g(int i) {
+        i ^= i >>> 20 ^ i >>> 12;
+        return i ^ i >>> 7 ^ i >>> 4;
+    }
 
     public PlayerConnection(MinecraftServer minecraftserver, NetworkManager networkmanager, EntityPlayer entityplayer) {
         this.minecraftServer = minecraftserver;
@@ -1982,7 +1989,8 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
                     this.player.broadcastCarriedItem();
                     this.player.f = false;
                 } else {
-                    this.k.a(this.player.activeContainer.windowId, Short.valueOf(packetplayinwindowclick.d()));
+                    // this.k.a(this.player.activeContainer.windowId, Short.valueOf(packetplayinwindowclick.d()));
+					this.k.put(this.g(this.player.activeContainer.windowId), Short.valueOf(packetplayinwindowclick.d())); // Hose
                     this.player.playerConnection.sendPacket(new PacketPlayOutTransaction(packetplayinwindowclick.a(), packetplayinwindowclick.d(), false));
                     this.player.activeContainer.a(this.player, false);
                     ArrayList arraylist1 = Lists.newArrayList();
@@ -2112,7 +2120,8 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
     public void a(PacketPlayInTransaction packetplayintransaction) {
         PlayerConnectionUtils.ensureMainThread(packetplayintransaction, this, this.player.x());
         if (this.player.dead) return; // CraftBukkit
-        Short oshort = (Short) this.k.get(this.player.activeContainer.windowId);
+        // Short oshort = (Short) this.k.get(this.player.activeContainer.windowId);
+		Short oshort = this.k.get(this.g(this.player.activeContainer.windowId)); // Hose
 
         if (oshort != null && packetplayintransaction.b() == oshort.shortValue() && this.player.activeContainer.windowId == packetplayintransaction.a() && !this.player.activeContainer.c(this.player) && !this.player.isSpectator()) {
             this.player.activeContainer.a(this.player, true);
diff --git a/src/main/java/net/minecraft/server/TileEntityHopper.java b/src/main/java/net/minecraft/server/TileEntityHopper.java
index 782a5c6..a6e8ae7 100644
--- a/src/main/java/net/minecraft/server/TileEntityHopper.java
+++ b/src/main/java/net/minecraft/server/TileEntityHopper.java
@@ -3,6 +3,9 @@ package net.minecraft.server;
 import java.util.Iterator;
 import java.util.List;
 import javax.annotation.Nullable;
+import java.util.Arrays;
+import java.util.concurrent.CopyOnWriteArrayList;
+import org.apache.commons.lang.ArrayUtils;
 
 // CraftBukkit start
 import org.bukkit.craftbukkit.entity.CraftHumanEntity;
@@ -532,7 +535,12 @@ public class TileEntityHopper extends TileEntityLootable implements IHopper, ITi
             }
             // Migot end
             // CraftBukkit start
-            InventoryPickupItemEvent event = new InventoryPickupItemEvent(iinventory.getOwner().getInventory(), (org.bukkit.entity.Item) entityitem.getBukkitEntity());
+            // InventoryPickupItemEvent event = new InventoryPickupItemEvent(iinventory.getOwner().getInventory(), (org.bukkit.entity.Item) entityitem.getBukkitEntity());
+			// Hose start - Check which is null
+            Inventory inventory = iinventory.getOwner().getInventory();
+            org.bukkit.entity.Item item = (org.bukkit.entity.Item) entityitem.getBukkitEntity();
+            InventoryPickupItemEvent event = new InventoryPickupItemEvent(inventory, item);
+			// Hose end
             entityitem.world.getServer().getPluginManager().callEvent(event);
             if (event.isCancelled()) {
                 return false;
@@ -754,11 +762,14 @@ public class TileEntityHopper extends TileEntityLootable implements IHopper, ITi
     }
 
     public void l() {
+		Arrays.fill(this.items, null); // Hose
         this.d((EntityHuman) null);
 
+		/*
         for (int i = 0; i < this.items.length; ++i) {
             this.items[i] = null;
         }
+		*/
 
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java b/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
index ae99018..b8eeec3 100644
--- a/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
+++ b/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
@@ -5,6 +5,8 @@ import java.util.ArrayList;
 import java.util.EnumMap;
 import java.util.List;
 import java.util.Map;
+import java.util.Iterator;
+import java.util.Queue;
 
 import com.google.common.base.Function;
 import com.google.common.base.Functions;
diff --git a/src/main/java/org/bukkit/craftbukkit/potion/CraftPotionBrewer.java b/src/main/java/org/bukkit/craftbukkit/potion/CraftPotionBrewer.java
index 14b79c1..b7643bd 100644
--- a/src/main/java/org/bukkit/craftbukkit/potion/CraftPotionBrewer.java
+++ b/src/main/java/org/bukkit/craftbukkit/potion/CraftPotionBrewer.java
@@ -12,13 +12,16 @@ import org.bukkit.potion.PotionEffectType;
 import org.bukkit.potion.PotionType;
 import org.bukkit.potion.PotionBrewer;
 import org.bukkit.potion.PotionData;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.ConcurrentMap;
 import org.bukkit.potion.PotionEffect;
 
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Maps;
 
 public class CraftPotionBrewer implements PotionBrewer {
-    private static final Map<PotionType, Collection<PotionEffect>> cache = Maps.newHashMap();
+    // private static final Map<PotionType, Collection<PotionEffect>> cache = Maps.newHashMap();
+    private static final ConcurrentMap<PotionType, Collection<PotionEffect>> cache = new ConcurrentHashMap<PotionType, Collection<PotionEffect>>(); // Hose
 
     public Collection<PotionEffect> getEffects(PotionType damage, boolean upgraded, boolean extended) {
         if (cache.containsKey(damage))
diff --git a/src/main/java/org/spigotmc/AsyncCatcher.java b/src/main/java/org/spigotmc/AsyncCatcher.java
index 7844871..ab88e35 100644
--- a/src/main/java/org/spigotmc/AsyncCatcher.java
+++ b/src/main/java/org/spigotmc/AsyncCatcher.java
@@ -12,7 +12,7 @@ import com.google.common.collect.ForwardingSet;
 public class AsyncCatcher
 {
 
-    public static boolean enabled = true; // Torch - Permit FastAsyncWorldEdit to use magic
+    public static boolean enabled = false; // Torch - Permit FastAsyncWorldEdit to use magic // Hose
 
     public static void catchOp(String reason)
     {
-- 
2.8.2.windows.1

