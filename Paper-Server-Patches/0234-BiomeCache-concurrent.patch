From 78406a8521b33d9f48ecf9ea7026c47c57b58ad5 Mon Sep 17 00:00:00 2001
From: SotrForgotten <i@omc.hk>
Date: Tue, 23 Aug 2016 13:17:13 +0800
Subject: [PATCH] BiomeCache concurrent


diff --git a/src/main/java/net/minecraft/server/BiomeCache.java b/src/main/java/net/minecraft/server/BiomeCache.java
new file mode 100644
index 0000000..ce21cce
--- /dev/null
+++ b/src/main/java/net/minecraft/server/BiomeCache.java
@@ -0,0 +1,83 @@
+package net.minecraft.server;
+
+import java.util.List;
+import java.util.Map;
+import java.util.concurrent.ConcurrentHashMap;
+
+public class BiomeCache {
+
+    private final WorldChunkManager a;
+    private long b;
+    private final Map<Long, BiomeCache.a> c = new ConcurrentHashMap(4096);
+    private final List<BiomeCache.a> d = new org.torch.util.ConcurrentIterableArrayList();
+
+    public BiomeCache(WorldChunkManager worldchunkmanager) {
+        this.a = worldchunkmanager;
+    }
+
+    public BiomeCache.a a(int i, int j) {
+        i >>= 4;
+        j >>= 4;
+        long k = (long) i & 4294967295L | ((long) j & 4294967295L) << 32;
+        BiomeCache.a biomecache_a = (BiomeCache.a) this.c.get(k);
+
+        if (biomecache_a == null) {
+            biomecache_a = new BiomeCache.a(i, j);
+            this.c.put(k, biomecache_a);
+            this.d.add(biomecache_a);
+        }
+
+        biomecache_a.d = MinecraftServer.av();
+        return biomecache_a;
+    }
+
+    public BiomeBase a(int i, int j, BiomeBase biomebase) {
+        BiomeBase biomebase1 = this.a(i, j).a(i, j);
+
+        return biomebase1 == null ? biomebase : biomebase1;
+    }
+
+    public void a() {
+        long i = MinecraftServer.av();
+        long j = i - this.b;
+
+        if (j > 7500L || j < 0L) {
+            this.b = i;
+
+            for (int k = 0; k < this.d.size(); ++k) {
+                BiomeCache.a biomecache_a = (BiomeCache.a) this.d.get(k);
+                long l = i - biomecache_a.d;
+
+                if (l > 30000L || l < 0L) {
+                    this.d.remove(k--);
+                    long i1 = (long) biomecache_a.b & 4294967295L | ((long) biomecache_a.c & 4294967295L) << 32;
+
+                    this.c.remove(i1);
+                }
+            }
+        }
+
+    }
+
+    public BiomeBase[] b(int i, int j) {
+        return this.a(i, j).a;
+    }
+
+    public class a {
+
+        public BiomeBase[] a = new BiomeBase[256];
+        public int b;
+        public int c;
+        public long d;
+
+        public a(int i, int j) {
+            this.b = i;
+            this.c = j;
+            BiomeCache.this.a.a(this.a, i << 4, j << 4, 16, 16, false);
+        }
+
+        public BiomeBase a(int i, int j) {
+            return this.a[i & 15 | (j & 15) << 4];
+        }
+    }
+}
diff --git a/src/main/java/net/minecraft/server/ChunkProviderServer.java b/src/main/java/net/minecraft/server/ChunkProviderServer.java
index ed7ab0e..8c7ea17 100644
--- a/src/main/java/net/minecraft/server/ChunkProviderServer.java
+++ b/src/main/java/net/minecraft/server/ChunkProviderServer.java
@@ -5,6 +5,7 @@ import java.util.Collection;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
+import java.util.concurrent.ConcurrentHashMap;
 
 import javax.annotation.Nullable;
 
@@ -16,6 +17,8 @@ import org.bukkit.event.world.ChunkUnloadEvent;
 
 import com.destroystokyo.paper.exception.ServerInternalException;
 
+import it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap;
+
 public class ChunkProviderServer implements IChunkProvider {
 
 	private static final Logger a = LogManager.getLogger();
@@ -25,24 +28,31 @@ public class ChunkProviderServer implements IChunkProvider {
 																													// public
 																													// //
 																													// Paper
-	// public final Map<Long, Chunk> chunks = Maps.newConcurrentHMap(); // Hose
-	public final Map<Long, Chunk> chunks = new java.util.concurrent.ConcurrentHashMap(); // Torch
+	// public final Map<Long, Chunk> chunks = Maps.newConcurrentMap(); // Hose
 	public final ChunkGenerator chunkGenerator;
 	private final IChunkLoader chunkLoader;
 	// Paper start
 	protected Chunk lastChunkByPos = null;
-	/*
-	 * public Long2ObjectOpenHashMap<Chunk> chunks = new
-	 * Long2ObjectOpenHashMap<Chunk>(8192) {
-	 * 
-	 * @Override public Chunk get(long key) { if (lastChunkByPos != null && key
-	 * == lastChunkByPos.chunkKey) { return lastChunkByPos; } return
-	 * lastChunkByPos = super.get(key); }
-	 * 
-	 * @Override public Chunk remove(long key) { if (lastChunkByPos != null &&
-	 * key == lastChunkByPos.chunkKey) { lastChunkByPos = null; } return
-	 * super.remove(key); } }; // CraftBukkit
-	 */
+
+	public Long2ObjectOpenHashMap<Chunk> chunks = new Long2ObjectOpenHashMap<Chunk>(8192) {
+
+		@Override
+		public Chunk get(long key) {
+			if (lastChunkByPos != null && key == lastChunkByPos.chunkKey) {
+				return lastChunkByPos;
+			}
+			return lastChunkByPos = super.get(key);
+		}
+
+		@Override
+		public Chunk remove(long key) {
+			if (lastChunkByPos != null && key == lastChunkByPos.chunkKey) {
+				lastChunkByPos = null;
+			}
+			return super.remove(key);
+		}
+	}; // CraftBukkit
+
 	// Paper end
 	public final WorldServer world;
 
@@ -403,4 +413,4 @@ public class ChunkProviderServer implements IChunkProvider {
 	public boolean isLoaded(int i, int j) {
 		return this.chunks.containsKey(ChunkCoordIntPair.a(i, j));
 	}
-}
+}
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutMapChunk.java b/src/main/java/net/minecraft/server/PacketPlayOutMapChunk.java
index 085366a..ff04c60 100644
--- a/src/main/java/net/minecraft/server/PacketPlayOutMapChunk.java
+++ b/src/main/java/net/minecraft/server/PacketPlayOutMapChunk.java
@@ -216,7 +216,9 @@ public class PacketPlayOutMapChunk implements Packet<PacketListenerPlayOut> {
 		}
 
 		if (this.e()) {
-			packetdataserializer.writeBytes(chunk.getBiomeIndex());
+			synchronized(this) {
+				packetdataserializer.writeBytes(chunk.getBiomeIndex());
+			}
 		}
 
 		return j;
diff --git a/src/main/java/net/minecraft/server/PlayerList.java b/src/main/java/net/minecraft/server/PlayerList.java
index d3e8bda..4d66e45 100644
--- a/src/main/java/net/minecraft/server/PlayerList.java
+++ b/src/main/java/net/minecraft/server/PlayerList.java
@@ -1460,15 +1460,9 @@ public abstract class PlayerList {
 		// Paper start - Fix players being skipped due to concurrent list
 		// modification
 		for (EntityPlayer player : com.google.common.collect.ImmutableList.copyOf(this.players)) {
-			player.playerConnection.disconnect(this.server.server.getShutdownMessage()); // CraftBukkit
-																							// -
-																							// add
-																							// custom
-																							// shutdown
-																							// message
+			player.playerConnection.disconnect(this.server.server.getShutdownMessage()); // CraftBukkit - add custom shutdown message
 		}
 		// Paper end
-
 	}
 
 	// CraftBukkit start
-- 
2.8.2.windows.1

