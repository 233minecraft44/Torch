From b59f61780c09972b17c2a72a893cd307ec84f642 Mon Sep 17 00:00:00 2001
From: SotrForgotten <i@omc.hk>
Date: Fri, 1 Jul 2016 17:21:43 +0800
Subject: [PATCH] Multi threaded EntityLiving


diff --git a/src/main/java/net/minecraft/server/Entity.java b/src/main/java/net/minecraft/server/Entity.java
index 57b0add..dd58a5f 100644
--- a/src/main/java/net/minecraft/server/Entity.java
+++ b/src/main/java/net/minecraft/server/Entity.java
@@ -793,7 +793,7 @@ public abstract class Entity implements ICommandListener {
             }
 			
 			// Hose start
-			boolean flag2 = this.aH(); // Torch - fix method name
+			boolean flag2 = this.ah(); // Torch - fix method name
 
             if (this.world.f(this.getBoundingBox().shrink(0.001D))) {
                 this.burn(1);
@@ -823,7 +823,7 @@ public abstract class Entity implements ICommandListener {
 
             this.world.methodProfiler.b();
         }
-        org.bukkit.craftbukkit.SpigotTimings.entityMoveTimer.stopTiming(); // Spigot
+        // org.bukkit.craftbukkit.SpigotTimings.entityMoveTimer.stopTiming(); // Spigot
     }
     
     TE_Pool te_task;
@@ -834,9 +834,8 @@ public abstract class Entity implements ICommandListener {
         m_task = new move(d0, d1, d2);
         SpigotWorldConfig.move_forks.add(m_task);*/
         //m_task.fork();
-        
-        
-        org.bukkit.craftbukkit.SpigotTimings.entityMoveTimer.startTiming(); // Spigot
+
+        // org.bukkit.craftbukkit.SpigotTimings.entityMoveTimer.startTiming(); // Spigot
         if (this.noclip) {
             this.a(this.getBoundingBox().c(d0, d1, d2));
             this.recalcPosition();
@@ -1124,8 +1123,8 @@ public abstract class Entity implements ICommandListener {
 
                 this.J = (float) ((double) this.J + (double) MathHelper.sqrt(d21 * d21 + d10 * d10) * 0.6D);
                 this.K = (float) ((double) this.K + (double) MathHelper.sqrt(d21 * d21 + d22 * d22 + d10 * d10) * 0.6D);
-                if (this.K > (float) this.ax && iblockdata.getMaterial() != Material.AIR) {
-                    this.ax = (int) this.K + 1;
+                if (this.K > (float) this.aw && iblockdata.getMaterial() != Material.AIR) { // Torch - fix method name
+                    this.aw = (int) this.K + 1; // Torch - fix method name
                     if (this.isInWater()) {
                         float f = MathHelper.sqrt(this.motX * this.motX * 0.20000000298023224D + this.motY * this.motY + this.motZ * this.motZ * 0.20000000298023224D) * 0.35F;
 
@@ -1141,7 +1140,7 @@ public abstract class Entity implements ICommandListener {
             }
 			// Hose end
 
-            boolean flag2 = this.aH(); // Torch - fix method name
+            boolean flag2 = this.ah(); // Torch - fix method name
 
             if (this.world.f(this.getBoundingBox().shrink(0.001D))) {
                 this.burn(1);
diff --git a/src/main/java/net/minecraft/server/EntityLiving.java b/src/main/java/net/minecraft/server/EntityLiving.java
index 144bc24..5e77f08 100644
--- a/src/main/java/net/minecraft/server/EntityLiving.java
+++ b/src/main/java/net/minecraft/server/EntityLiving.java
@@ -10,6 +10,9 @@ import java.util.Random;
 import java.util.UUID;
 import javax.annotation.Nullable;
 
+import java.util.concurrent.RecursiveAction;
+import org.hose.GE_Pool;
+
 // CraftBukkit start
 import java.util.ArrayList;
 import com.google.common.base.Function;
@@ -1901,7 +1904,9 @@ public abstract class EntityLiving extends Entity {
 
         return f1;
     }
-
+	
+	Collide co_task; // Hose
+    ai_move aim_task; // Hose
     public void n() {
         if (this.bB > 0) {
             --this.bB;
@@ -1969,10 +1974,16 @@ public abstract class EntityLiving extends Entity {
         this.bf *= 0.98F;
         this.bg *= 0.9F;
         this.r();
-        this.g(this.be, this.bf);
+		// Hose start
+        // this.g(this.be, this.bf);
+        aim_task = new ai_move(this);
+        aim_task.fork();
         this.world.methodProfiler.b();
         this.world.methodProfiler.a("push");
-        this.co();
+        // this.co();
+		co_task = new Collide(this);
+        co_task.fork();
+		// Hose end
         this.world.methodProfiler.b();
     }
 
@@ -2003,12 +2014,13 @@ public abstract class EntityLiving extends Entity {
 
     protected void doTick() {}
 
+	GE_Pool ge_task; // Hose
     protected void co() {
         List list = this.world.getEntities(this, this.getBoundingBox(), IEntitySelector.a(this));
 
         if (!list.isEmpty()) {
-                numCollisions = Math.max(0, numCollisions - world.spigotConfig.maxCollisionsPerEntity); // Spigot
-                for (int i = 0; i < list.size() && numCollisions < world.spigotConfig.maxCollisionsPerEntity; ++i) {
+            numCollisions = Math.max(0, numCollisions - world.spigotConfig.maxCollisionsPerEntity); // Spigot
+            for (int i = 0; i < list.size() && numCollisions < world.spigotConfig.maxCollisionsPerEntity; ++i) {
                 Entity entity = (Entity) list.get(i);
                 // TODO better check now?
                 // CraftBukkit start - Only handle mob (non-player) collisions every other tick
@@ -2411,4 +2423,49 @@ public abstract class EntityLiving extends Entity {
 
         }
     }
+	
+	class Collide extends RecursiveAction {
+        EntityLiving el;
+
+        public Collide(EntityLiving el){
+            this.el = el;
+
+        }
+
+        @Override
+        protected void compute() {
+            el.co(); // Torch - fix method name
+        }
+
+    }
+    
+    class Tick extends RecursiveAction {
+        EntityLiving el;
+
+        public Tick(EntityLiving el){
+            this.el = el;
+
+        }
+
+        @Override
+        protected void compute() {
+            el.doTick();
+        }
+
+    }
+    
+    class ai_move extends RecursiveAction {
+        EntityLiving el;
+
+        public ai_move(EntityLiving el){
+            this.el = el;
+
+        }
+
+        @Override
+        protected void compute() {
+            el.g(el.be, el.bf); // Torch - fix method name
+        }
+
+    }
 }
-- 
2.8.2.windows.1

