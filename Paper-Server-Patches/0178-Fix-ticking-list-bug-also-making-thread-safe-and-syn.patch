From a59902ce4658eac046acac116104a8a0ae34e432 Mon Sep 17 00:00:00 2001
From: SotrForgotten <i@omc.hk>
Date: Sun, 24 Jul 2016 00:15:49 +0800
Subject: [PATCH] Fix ticking list bug, also making thread safe and sync issues


diff --git a/src/main/java/com/destroystokyo/paper/PaperConfig.java b/src/main/java/com/destroystokyo/paper/PaperConfig.java
index 705c937..5807996 100644
--- a/src/main/java/com/destroystokyo/paper/PaperConfig.java
+++ b/src/main/java/com/destroystokyo/paper/PaperConfig.java
@@ -194,12 +194,10 @@ public class PaperConfig {
         }
     }
 
-	/*
     public static int minChunkLoadThreads = 2;
     private static void chunkLoadThreads() {
         minChunkLoadThreads = Math.min(6, getInt("settings.min-chunk-load-threads", 2)); // Keep people from doing stupid things with max of 6
     }
-	*/
 
     public static boolean enableFileIOThreadSleep;
     private static void enableFileIOThreadSleep() {
diff --git a/src/main/java/net/minecraft/server/ChunkProviderServer.java b/src/main/java/net/minecraft/server/ChunkProviderServer.java
index 85f960a..1623d40 100644
--- a/src/main/java/net/minecraft/server/ChunkProviderServer.java
+++ b/src/main/java/net/minecraft/server/ChunkProviderServer.java
@@ -134,7 +134,9 @@ public class ChunkProviderServer implements IChunkProvider {
                 chunk = ChunkIOExecutor.syncChunkLoad(world, loader, this, i, j);
             }
 			*/ // Paper
-            chunk = ChunkIOExecutor.syncChunkLoad(world, chunkLoader, this, i, j); // Paper - skip chunkExists, expensive and performed by loading anyway.
+			synchronized(this) {
+				chunk = ChunkIOExecutor.syncChunkLoad(world, chunkLoader, this, i, j); // Paper - skip chunkExists, expensive and performed by loading anyway.
+			}
         }
 
         return chunk;
@@ -187,7 +189,9 @@ public class ChunkProviderServer implements IChunkProvider {
                 ChunkIOExecutor.queueChunkLoad(world, loader, this, i, j, runnable);
                 return null;
             } else {
-                chunk = ChunkIOExecutor.syncChunkLoad(world, loader, this, i, j);
+				synchronized(this) {
+					chunk = ChunkIOExecutor.syncChunkLoad(world, loader, this, i, j);
+				}
             }
         } else if (chunk == null && generate) {
             chunk = originalGetChunkAt(i, j);
diff --git a/src/main/java/net/minecraft/server/PersistentVillage.java b/src/main/java/net/minecraft/server/PersistentVillage.java
index 96f82de..05309b5 100644
--- a/src/main/java/net/minecraft/server/PersistentVillage.java
+++ b/src/main/java/net/minecraft/server/PersistentVillage.java
@@ -10,7 +10,7 @@ public class PersistentVillage extends PersistentBase {
     private World world;
     private final List<BlockPosition> c = new CopyOnWriteArrayList<BlockPosition>();
     private final List<VillageDoor> d = new CopyOnWriteArrayList<VillageDoor>();
-    private final List<Village> villages = new CopyOnWriteArrayList<Village>();
+    private final List<Village> villages = Lists.newArrayList(); // COWIterator
     private int time;
 
     public PersistentVillage(String s) {
diff --git a/src/main/java/net/minecraft/server/Village.java b/src/main/java/net/minecraft/server/Village.java
index 6a4fd0d..bc3d8d0 100644
--- a/src/main/java/net/minecraft/server/Village.java
+++ b/src/main/java/net/minecraft/server/Village.java
@@ -10,7 +10,7 @@ import java.util.concurrent.ConcurrentSkipListMap;
 public class Village {
 
     private World a;
-    private final List<VillageDoor> b = new java.util.concurrent.CopyOnWriteArrayList<VillageDoor>();
+    private final List<VillageDoor> b = Lists.newArrayList(); // COWIterator
     private BlockPosition c;
     private BlockPosition d;
     private int e;
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index 643540b..bb35e90 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -21,6 +21,7 @@ import com.google.common.collect.Sets;
 
 import com.destroystokyo.paper.IOStatCommand;
 import com.destroystokyo.paper.PaperConfig;
+import java.util.concurrent.CopyOnWriteArrayList;
 
 // CraftBukkit start
 import com.google.common.collect.Maps;
diff --git a/src/main/java/org/bukkit/craftbukkit/chunkio/ChunkIOExecutor.java b/src/main/java/org/bukkit/craftbukkit/chunkio/ChunkIOExecutor.java
index 67c13fc..4f711f3 100644
--- a/src/main/java/org/bukkit/craftbukkit/chunkio/ChunkIOExecutor.java
+++ b/src/main/java/org/bukkit/craftbukkit/chunkio/ChunkIOExecutor.java
@@ -6,11 +6,11 @@ import net.minecraft.server.IChunkLoader;
 import net.minecraft.server.MCUtil; // Paper
 import net.minecraft.server.World;
 import org.bukkit.craftbukkit.util.AsynchronousExecutor;
+import com.destroystokyo.paper.PaperConfig;
 
 public class ChunkIOExecutor {
-    // static final int BASE_THREADS = PaperConfig.minChunkLoadThreads; // Paper
-    // static final int PLAYERS_PER_THREAD = 50;
-	static final int BASE_THREADS =  Runtime.getRuntime().availableProcessors(); // Paper // Hose - threaded
+    static final int BASE_THREADS = PaperConfig.minChunkLoadThreads; // Paper
+    static final int PLAYERS_PER_THREAD = 50;
 
     private static final AsynchronousExecutor<QueuedChunk, Chunk, Runnable, RuntimeException> instance = new AsynchronousExecutor<QueuedChunk, Chunk, Runnable, RuntimeException>(new ChunkIOProvider(), BASE_THREADS);
 
@@ -27,12 +27,10 @@ public class ChunkIOExecutor {
             instance.drop(new QueuedChunk(x, z, null, world, null), runnable);
     }
 
-	/*
     public static void adjustPoolSize(int players) {
         int size = Math.max(BASE_THREADS, (int) Math.ceil(players / PLAYERS_PER_THREAD));
         instance.setActiveThreads(size);
     }
-	*/
 
     public static void tick() {
         instance.finishActive();
diff --git a/src/main/java/org/bukkit/craftbukkit/util/AsynchronousExecutor.java b/src/main/java/org/bukkit/craftbukkit/util/AsynchronousExecutor.java
index 0bd34c3..193c362 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/AsynchronousExecutor.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/AsynchronousExecutor.java
@@ -118,7 +118,7 @@ public final class AsynchronousExecutor<P, T, C, E extends Throwable> {
             }
         }
 
-        synchronized void initSync() {
+        void initSync() {
             if (set(this, PENDING, STAGE_1_COMPLETE)) {
                 // If we succeed that variable switch, good as done
                 init();
-- 
2.8.2.windows.1

