From ec9d4c5cd1effe15af18ab866023befbfefc4061 Mon Sep 17 00:00:00 2001
From: SotrForgotten <i@omc.hk>
Date: Fri, 1 Jul 2016 14:21:41 +0800
Subject: [PATCH] Use arrays for the DataWatcher


diff --git a/src/main/java/net/minecraft/server/DataWatcher.java b/src/main/java/net/minecraft/server/DataWatcher.java
index 86ad41d..af7a624 100644
--- a/src/main/java/net/minecraft/server/DataWatcher.java
+++ b/src/main/java/net/minecraft/server/DataWatcher.java
@@ -15,11 +15,16 @@ import javax.annotation.Nullable;
 import it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap; // Paper
 import org.apache.commons.lang3.ObjectUtils;
 
+import it.unimi.dsi.fastutil.ints.Int2ObjectMap;
+import net.techcable.tacospigot.LookupTableMap;
+import net.techcable.tacospigot.TacoSpigotConfig;
+import net.techcable.tacospigot.function.FunctionalMaps;
+
 public class DataWatcher {
 
     private static final Map<Class<? extends Entity>, Integer> a = Maps.newHashMap();
     private final Entity b;
-    private final Map<Integer, DataWatcher.Item<?>> c = new Int2ObjectOpenHashMap<>(); // Paper
+    private final Int2ObjectMap<Item<?>> c = TacoSpigotConfig.useArraysForDatawatcher ? new LookupTableMap<>() : new Int2ObjectOpenHashMap<>(); // Paper // TacoSpigot - use 'Int2ObjectMap' and use 'LookupTableMap' if useArraysForDatawatcher
     private final ReadWriteLock d = new ReentrantReadWriteLock();
     private boolean e = true;
     private boolean f;
@@ -74,7 +79,7 @@ public class DataWatcher {
         DataWatcher.Item datawatcher_item = new DataWatcher.Item(datawatcherobject, t0);
 
         this.d.writeLock().lock();
-        this.c.put(Integer.valueOf(datawatcherobject.a()), datawatcher_item);
+        this.c.put(datawatcherobject.a(), datawatcher_item); // TacoSpigot - primitives
         this.e = false;
         this.d.writeLock().unlock();
     }
@@ -85,7 +90,7 @@ public class DataWatcher {
         DataWatcher.Item datawatcher_item;
 
         try {
-            datawatcher_item = (DataWatcher.Item) this.c.get(Integer.valueOf(datawatcherobject.a()));
+            datawatcher_item = (DataWatcher.Item) this.c.get(datawatcherobject.a()); // TacoSpigot - use primitives
         } catch (Throwable throwable) {
             CrashReport crashreport = CrashReport.a(throwable, "Getting synched entity data");
             CrashReportSystemDetails crashreportsystemdetails = crashreport.a("Synched entity data");
diff --git a/src/main/java/net/techcable/tacospigot/LookupTableMap.java b/src/main/java/net/techcable/tacospigot/LookupTableMap.java
new file mode 100644
index 0000000..7646c56
--- /dev/null
+++ b/src/main/java/net/techcable/tacospigot/LookupTableMap.java
@@ -0,0 +1,211 @@
+package net.techcable.tacospigot;
+
+import it.unimi.dsi.fastutil.ints.AbstractInt2ObjectMap;
+import it.unimi.dsi.fastutil.ints.Int2ObjectMap;
+import it.unimi.dsi.fastutil.objects.AbstractObjectCollection;
+import it.unimi.dsi.fastutil.objects.AbstractObjectSet;
+import it.unimi.dsi.fastutil.objects.ObjectCollection;
+import it.unimi.dsi.fastutil.objects.ObjectIterator;
+import it.unimi.dsi.fastutil.objects.ObjectSet;
+
+import java.util.Arrays;
+import java.util.NoSuchElementException;
+import java.util.function.BiConsumer;
+import java.util.function.ObjIntConsumer;
+import javax.annotation.Nonnull;
+
+import com.google.common.collect.AbstractIterator;
+
+import static com.google.common.base.Preconditions.*;
+
+@SuppressWarnings("unchecked")
+public final class LookupTableMap<V> extends AbstractInt2ObjectMap<V> {
+       private static final int DEFAULT_EXPANSION_SIZE = 15;
+       private Object[] values;
+       private int size;
+       private ObjectSet<Int2ObjectMap.Entry<V>> entrySet;
+       private ObjectCollection<V> valuesCollection;
+
+       @Override
+       public ObjectSet<Int2ObjectMap.Entry<V>> int2ObjectEntrySet() {
+           return entrySet != null ? entrySet : (entrySet = new AbstractObjectSet<Int2ObjectMap.Entry<V>>() {
+               @Override
+               @Nonnull
+               public ObjectIterator<Int2ObjectMap.Entry<V>> iterator() {
+                   return new EntryIterator<Int2ObjectMap.Entry<V>>() {
+                       @Override
+                       public Int2ObjectMap.Entry<V> next() {
+                           return nextEntry();
+                       }
+                   };
+               }
+
+               @Override
+               public int size() {
+                   return size;
+               }
+           });
+       }
+
+       @Override
+       @Nonnull
+       public ObjectCollection<V> values() {
+           return valuesCollection != null ? valuesCollection : (valuesCollection = new AbstractObjectCollection<V>() {
+
+               @Override
+               @Nonnull
+               public ObjectIterator<V> iterator() {
+                   return new EntryIterator<V>() {
+                       @Override
+                       @Nonnull
+                       public V next() {
+                           return nextEntry().getValue();
+                       }
+                   };
+               }
+
+               @Override
+               public int size() {
+                   return size;
+               }
+           });
+       }
+
+       @Override
+       @SuppressWarnings("unchecked")
+       public V get(int i) {
+           Object[] values = this.values;
+           return i >= 0 && i < values.length ? (V) values[i] : null;
+       }
+
+       @Override
+       public V put(int key, V value) {
+           checkNotNull(value, "Null value");
+           if (key < 0) {
+               throw new IllegalArgumentException(negativeKey(key));
+           } else if (key >= values.length) {
+               expandAndPut(key, value); // Put in a separate method for inlining (its a unlikely slow-case)
+               return null;
+           } else {
+               V oldValue = (V) values[key];
+               values[key] = value;
+               if (oldValue == null) size++; // New entry
+               return oldValue;
+           }
+       }
+
+       private void expandAndPut(int key, V value) {
+           values = Arrays.copyOf(values, key + DEFAULT_EXPANSION_SIZE);
+           values[key] = value;
+           size++; // Since we've expanded, there was obviously nothing in there before
+       }
+
+       @Override
+       public V remove(int key) {
+           if (key < 0) {
+               throw new IllegalArgumentException(negativeKey(key));
+           } else if (key >= values.length) {
+               return null;
+           } else {
+               V oldValue = (V) values[key];
+               values[key] = null;
+               if (oldValue != null) size--; // Entry was there before, but now we're removing it
+               return oldValue;
+           }
+       }
+
+       @Override
+       public boolean containsKey(int i) {
+           Object[] values = this.values;
+           return i >= 0 && i < values.length && values[i] != null;
+       }
+
+       @Override
+       public void forEach(BiConsumer<? super Integer, ? super V> action) {
+           forEachPrimitive((value, key) -> action.accept(key, value));
+       }
+
+       public void forEachPrimitive(ObjIntConsumer<V> action) {
+           for (int index = 0; index < values.length; index++) {
+               V value = (V) values[index];
+               if (value != null) {
+                   action.accept(value, index);
+               }
+           }
+       }
+
+       private String negativeKey(int key) {
+           return "Can't add a negative key " + key + " to a LookupTableMap!";
+       }
+
+       @Override
+       public int size() {
+           return size;
+       }
+
+       private abstract class EntryIterator<T> implements ObjectIterator<T> {
+           private int index = 0;
+
+           @Override
+           public int skip(int toSkip) {
+               if (toSkip > values.length) toSkip = values.length;
+               index += toSkip;
+               return toSkip;
+           }
+
+           @Override
+           public boolean hasNext() {
+               while (index < values.length) {
+                   V value = (V) values[index];
+                   if (value != null) {
+                       return true;
+                   } else {
+                       index++;
+                   }
+               }
+               return false;
+           }
+
+           /* default */ Int2ObjectMap.Entry<V> nextEntry() {
+               while (index < values.length) {
+                   int key = index++;
+                   V value = (V) values[key];
+                   if (value != null) {
+                       return new Entry(key, value);
+                   }
+               }
+               throw new NoSuchElementException();
+           }
+       }
+
+       public class Entry implements Int2ObjectMap.Entry<V> {
+           private final int key;
+           private V value;
+
+           public Entry(int key, V value) {
+               this.key = key;
+               this.value = checkNotNull(value, "Null value");
+           }
+
+           @Override
+           public int getIntKey() {
+               return key;
+           }
+
+           @Override
+           public Integer getKey() {
+               return getIntKey();
+           }
+
+           @Override
+           public V getValue() {
+               return value;
+           }
+
+           @Override
+           public V setValue(V value) {
+               return put(key, this.value = checkNotNull(value, "Null value"));
+           }
+
+       }
+}
\ No newline at end of file
diff --git a/src/main/java/net/techcable/tacospigot/ObjIntBiFunction.java b/src/main/java/net/techcable/tacospigot/ObjIntBiFunction.java
deleted file mode 100644
index 1ccf880..0000000
--- a/src/main/java/net/techcable/tacospigot/ObjIntBiFunction.java
+++ /dev/null
@@ -1,6 +0,0 @@
-package net.techcable.tacospigot.function;
-
-@FunctionalInterface
-public interface ObjIntBiFunction<T, R> {
-    public R apply(T t, int i);
-}
\ No newline at end of file
diff --git a/src/main/java/net/techcable/tacospigot/TacoSpigotConfig.java b/src/main/java/net/techcable/tacospigot/TacoSpigotConfig.java
index f77ffd3..0069cf7 100644
--- a/src/main/java/net/techcable/tacospigot/TacoSpigotConfig.java
+++ b/src/main/java/net/techcable/tacospigot/TacoSpigotConfig.java
@@ -112,4 +112,9 @@ public class TacoSpigotConfig {
     private static void betterPvp() {
         betterPvp = getBoolean("betterPvp", true); // Torch - default use
     }
+	
+	public static boolean useArraysForDatawatcher;
+    private static void useArraysForDatawatcher() {
+        useArraysForDatawatcher = getBoolean("useArraysForDatawatcher", true); // Torch - default use
+    }
 }
diff --git a/src/main/java/net/techcable/tacospigot/function/FunctionalMaps.java b/src/main/java/net/techcable/tacospigot/function/FunctionalMaps.java
new file mode 100644
index 0000000..4817889
--- /dev/null
+++ b/src/main/java/net/techcable/tacospigot/function/FunctionalMaps.java
@@ -0,0 +1,29 @@
+package net.techcable.tacospigot.function;
+
+import it.unimi.dsi.fastutil.ints.Int2ObjectMap;
+
+import java.util.Map;
+import java.util.function.ObjIntConsumer;
+import javax.annotation.ParametersAreNonnullByDefault;
+
+import net.techcable.tacospigot.LookupTableMap;
+
+import static com.google.common.base.Preconditions.*;
+
+@ParametersAreNonnullByDefault
+public class FunctionalMaps {
+    public static <V> void forEachPrimitive(Int2ObjectMap<V> map, ObjIntConsumer<V> action) {
+        if (map instanceof LookupTableMap) {
+            //noinspection unchecked - ur mums unchecked!
+            ((LookupTableMap) checkNotNull(map, "Null map")).forEachPrimitive(action);
+        } else {
+            defaultForEachPrimitive(map, action);
+        }
+    }
+
+    private static <V> void defaultForEachPrimitive(Int2ObjectMap<V> map, ObjIntConsumer<V> action) {
+        for (Map.Entry<Integer, V> entry : map.entrySet()) {
+            action.accept(entry.getValue(), entry.getKey());
+        }
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/net/techcable/tacospigot/function/ObjIntBiFunction.java b/src/main/java/net/techcable/tacospigot/function/ObjIntBiFunction.java
new file mode 100644
index 0000000..1ccf880
--- /dev/null
+++ b/src/main/java/net/techcable/tacospigot/function/ObjIntBiFunction.java
@@ -0,0 +1,6 @@
+package net.techcable.tacospigot.function;
+
+@FunctionalInterface
+public interface ObjIntBiFunction<T, R> {
+    public R apply(T t, int i);
+}
\ No newline at end of file
diff --git a/src/main/java/net/techcable/tacospigot/function/ObjIntFunction.java b/src/main/java/net/techcable/tacospigot/function/ObjIntFunction.java
deleted file mode 100644
index b5adb4e..0000000
--- a/src/main/java/net/techcable/tacospigot/function/ObjIntFunction.java
+++ /dev/null
@@ -1,6 +0,0 @@
-package net.techcable.tacospigot.function;
-
-@FunctionalInterface
-public interface ObjIntFunction<T, R> {
-    public R apply(T t, int i);
-}
-- 
2.8.2.windows.1

