From fc8e3d854bf7b570f1d7d333e83b32e6e6c7bfd7 Mon Sep 17 00:00:00 2001
From: SotrForgotten <i@omc.hk>
Date: Tue, 12 Jul 2016 17:51:35 +0800
Subject: [PATCH] Main-Class-Config-and-Commands of Migot


diff --git a/src/main/java/de/minetick/Migot.java b/src/main/java/de/minetick/Migot.java
new file mode 100644
index 0000000..e3fe659
--- /dev/null
+++ b/src/main/java/de/minetick/Migot.java
@@ -0,0 +1,125 @@
+package de.minetick;
+
+import java.io.File;
+import java.io.IOException;
+import java.util.Collections;
+import java.util.LinkedList;
+import java.util.List;
+import java.util.concurrent.Callable;
+import java.util.concurrent.Executors;
+import java.util.concurrent.ScheduledExecutorService;
+import java.util.concurrent.ScheduledFuture;
+import java.util.concurrent.TimeUnit;
+
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+import net.minecraft.server.MinecraftServer;
+
+import org.bukkit.configuration.InvalidConfigurationException;
+import org.bukkit.craftbukkit.CraftServer;
+
+import de.minetick.command.ReloadSettingsCommand;
+import de.minetick.command.TPSCommand;
+
+public class Migot {
+
+    private MigotConfig mainConfig;
+    private boolean failedToLoadConfig = false;
+    private TickTimer tickTimerObject;
+    private int timerDelay = 45;
+    private ScheduledExecutorService timerService = Executors.newScheduledThreadPool(1, new MigotThreadFactory(Thread.NORM_PRIORITY + 2, "Migot_TimerService"));
+    private ScheduledFuture<Object> tickTimerTask;
+    private static Migot instance;
+    private boolean initDone = false;
+    private TickCounter tickCounterObject;
+    private List<Integer> ticksPerSecond;
+    private int ticksCounter = 0;
+    private final Logger log = LogManager.getLogger();
+
+    public Migot() {
+        this.tickTimerObject = new TickTimer();
+        this.tickCounterObject = new TickCounter();
+        this.ticksPerSecond = Collections.synchronizedList(new LinkedList<Integer>());
+        this.timerService.scheduleAtFixedRate(this.tickCounterObject, 1, 1, TimeUnit.SECONDS);
+        instance = this;
+        try {
+            this.mainConfig = new MigotConfig(new File("migot.yml"));
+        } catch (IOException e) {
+            this.failedToLoadConfig = true;
+        } catch (InvalidConfigurationException e) {
+            this.failedToLoadConfig = true;
+        } catch (NullPointerException e) {
+            // Bukkit's logger is not yet initialized at this point and throws an NPE when trying to log an yaml load fail
+            this.failedToLoadConfig = true;
+        }
+    }
+
+    public void init() {
+        if(!this.initDone) {
+            this.initDone = true;
+            if(this.failedToLoadConfig) {
+                throw new IllegalStateException("Migot's config file migot.yml could not be loaded. Check it for syntax errors.");
+            }
+            CraftServer craftserver = MinecraftServer.getServer().server;
+            craftserver.getCommandMap().register("tps", "Migot", new TPSCommand("tps"));
+            craftserver.getCommandMap().register("migot-reload", "Migot", new ReloadSettingsCommand("migot-reload"));
+        }
+    }
+
+    public static MigotConfig getConfig() {
+        return instance.mainConfig;
+    }
+
+    public void shutdown() {
+        this.timerService.shutdown();
+    }
+
+    public void checkTickTime(long tickTime) {
+        if(tickTime > 45000000L) {
+            if(this.timerDelay > 40) {
+                this.timerDelay--;
+            }
+        } else if(this.timerDelay < 45) {
+            this.timerDelay++;
+        }
+    }
+
+    public void startTickTimerTask() {
+        this.tickTimerTask = instance.timerService.schedule(this.tickTimerObject, this.timerDelay, TimeUnit.MILLISECONDS);
+    }
+
+    public void cancelTimerTask(boolean flag) {
+        this.tickTimerTask.cancel(false);
+    }
+
+    private class TickTimer implements Callable<Object> {
+        public Object call() {
+            MinecraftServer.getServer().cancelHeavyCalculationsForAllWorlds(true);
+            return null;
+        }
+    }
+
+    private class TickCounter implements Runnable {
+        @Override
+        public void run() {
+            ticksPerSecond.add(ticksCounter);
+            ticksCounter = 0;
+            if(ticksPerSecond.size() > 30) {
+                ticksPerSecond.remove(0);
+            }
+        }
+    }
+
+    public void increaseTickCounter() {
+        this.ticksCounter++;
+    }
+
+    public static Integer[] getTicksPerSecond() {
+        Integer[] emptyArray = new Integer[0];
+        if(instance != null) {
+            return instance.ticksPerSecond.toArray(emptyArray);
+        }
+        return emptyArray;
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/de/minetick/MigotConfig.java b/src/main/java/de/minetick/MigotConfig.java
new file mode 100644
index 0000000..ef2597a
--- /dev/null
+++ b/src/main/java/de/minetick/MigotConfig.java
@@ -0,0 +1,66 @@
+package de.minetick;
+
+import java.io.File;
+import java.io.FileNotFoundException;
+import java.io.IOException;
+import java.io.InputStreamReader;
+
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+import org.bukkit.configuration.InvalidConfigurationException;
+import org.bukkit.configuration.file.FileConfiguration;
+import org.bukkit.configuration.file.YamlConfiguration;
+
+import com.google.common.base.Charsets;
+
+public class MigotConfig {
+
+    private final Logger logger = LogManager.getLogger();
+    private File configFile;
+    private FileConfiguration configuration;
+
+    public MigotConfig(File configFile) throws IOException, InvalidConfigurationException {
+        this.configFile = configFile;
+        this.configuration = this.loadConfig(configFile);
+        try {
+            this.configuration.save(configFile);
+        } catch(IOException e) {
+            logger.error("[Migot] Could not save config file migot.yml!");
+            logger.error(e.toString());
+        }
+
+        this.loadConfigContent();
+    }
+
+    public FileConfiguration[] reload() throws IOException, InvalidConfigurationException {
+        FileConfiguration[] configs = new FileConfiguration[2];
+        configs[0] = this.configuration;
+        this.configuration = this.loadConfig(this.configFile);
+        configs[1] = this.configuration;
+        this.loadConfigContent();
+        return configs;
+    }
+
+    private void loadConfigContent() {
+
+    }
+
+    private FileConfiguration loadConfig(File file) throws IOException, InvalidConfigurationException {
+        YamlConfiguration config = new YamlConfiguration();
+        config.options().copyDefaults(true);
+        if(file.exists() && file.isFile()) {
+            try {
+                config.load(file);
+            } catch (FileNotFoundException e) {
+                // Can not happen, I check if the file exists first
+            }
+        }
+        InputStreamReader defConfigStream = new InputStreamReader(getClass().getClassLoader().getResourceAsStream("configurations/migot.yml"), Charsets.UTF_8);
+        if(defConfigStream != null) {
+            YamlConfiguration defConfig = YamlConfiguration.loadConfiguration(defConfigStream);
+            config.setDefaults(defConfig);
+        }
+        return config;
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/de/minetick/MigotThreadFactory.java b/src/main/java/de/minetick/MigotThreadFactory.java
new file mode 100644
index 0000000..b67783c
--- /dev/null
+++ b/src/main/java/de/minetick/MigotThreadFactory.java
@@ -0,0 +1,35 @@
+package de.minetick;
+
+import java.util.concurrent.Executors;
+import java.util.concurrent.ThreadFactory;
+
+public class MigotThreadFactory implements ThreadFactory {
+
+    private int priority;
+    private int idCounter = 0;
+    private String name = "MigotThread";
+
+    public MigotThreadFactory(int priority) {
+        this.priority = Math.max(priority, Thread.MIN_PRIORITY);
+        this.priority = Math.min(priority, Thread.MAX_PRIORITY);
+    }
+
+    public MigotThreadFactory(int priority, String name) {
+        this(priority);
+        this.name = name;
+    }
+
+    public MigotThreadFactory(String name) {
+        this(Thread.NORM_PRIORITY);
+        this.name = name;
+    }
+
+    @Override
+    public Thread newThread(Runnable runnable) {
+        Thread thread = Executors.defaultThreadFactory().newThread(runnable);
+        thread.setPriority(this.priority);
+        thread.setName(this.name + "-" + String.valueOf(idCounter));
+        idCounter++;
+        return thread;
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/de/minetick/command/ReloadSettingsCommand.java b/src/main/java/de/minetick/command/ReloadSettingsCommand.java
new file mode 100644
index 0000000..0417f2e
--- /dev/null
+++ b/src/main/java/de/minetick/command/ReloadSettingsCommand.java
@@ -0,0 +1,100 @@
+package de.minetick.command;
+
+import java.io.IOException;
+
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+import org.bukkit.ChatColor;
+import org.bukkit.command.Command;
+import org.bukkit.command.CommandSender;
+import org.bukkit.command.ConsoleCommandSender;
+import org.bukkit.configuration.InvalidConfigurationException;
+import org.bukkit.configuration.file.FileConfiguration;
+
+import de.minetick.Migot;
+
+public class ReloadSettingsCommand extends Command {
+
+    private final Logger logger = LogManager.getLogger();
+
+    public ReloadSettingsCommand(String name) {
+        super(name);
+        this.usageMessage = "/migot-reload";
+        this.description = "Reloads the configurations of Migot from its settings file migot.yml";
+    }
+
+    @Override
+    public boolean execute(CommandSender sender, String label, String[] args) {
+        if(!sender.hasPermission("migot.commands.reload")) {
+            sender.sendMessage("You are not allowed to use this command!");
+            return true;
+        }
+        this.sendMessage(sender, ChatColor.GOLD + "[Migot]" + ChatColor.RESET + " Reloading config file migot.yml ... ");
+
+        FileConfiguration[] configs;
+
+        String errorMsg = ChatColor.GOLD + "[Migot]" + ChatColor.RED + " Reloading failed!\n" + ChatColor.RESET;
+        try {
+            configs = Migot.getConfig().reload();
+        } catch (IOException e) {
+            this.sendMessage(sender, errorMsg + e.getMessage());
+            return true;
+        } catch (InvalidConfigurationException e) {
+            this.sendMessage(sender, errorMsg + e.getMessage());
+            return true;
+        }
+        FileConfiguration old = configs[0];
+        FileConfiguration current = configs[1];
+
+        StringBuilder sb = new StringBuilder();
+        for(String key: old.getKeys(true)) {
+            String v1 = old.getString(key);
+            String v2 = current.getString(key);
+            if(v1 != null && v2 == null) {
+                sb.append(ChatColor.RED);
+                sb.append("Removed entry: ");
+                sb.append(ChatColor.RESET);
+                sb.append(key);
+                sb.append("\nValue: ");
+                sb.append(v1);
+                sb.append("\n");
+            }
+        }
+        for(String key: current.getKeys(true)) {
+            String v1 = old.getString(key);
+            String v2 = current.getString(key);
+            if((v1 == null || v1.isEmpty()) && v2 != null) {
+                sb.append(ChatColor.YELLOW);
+                sb.append("New entry: ");
+                sb.append(ChatColor.RESET);
+                sb.append(key);
+                sb.append("\nValue: ");
+                sb.append(v2);
+                sb.append("\n");
+            } else if(v1 != null && v2 != null && !v1.equals(v2)) {
+                sb.append(ChatColor.GREEN);
+                sb.append("Changed entry: ");
+                sb.append(ChatColor.RESET);
+                sb.append(key);
+                sb.append("\nFrom: ");
+                sb.append(v1);
+                sb.append("\nTo: ");
+                sb.append(v2);
+                sb.append("\n");
+            }
+        }
+        if (sb.length() > 0) {
+            this.sendMessage(sender, sb.toString());
+        }
+        this.sendMessage(sender, ChatColor.GOLD + "[Migot]" + ChatColor.RESET + " Config file has been reloaded.");
+        return true;
+    }
+
+    private void sendMessage(CommandSender receiver, String msg) {
+        this.logger.info(ChatColor.stripColor(msg));
+        if(!(receiver instanceof ConsoleCommandSender)) {
+            receiver.sendMessage(msg);
+        }
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/server/DedicatedServer.java b/src/main/java/net/minecraft/server/DedicatedServer.java
index 6d44682..7966ff7 100644
--- a/src/main/java/net/minecraft/server/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/DedicatedServer.java
@@ -183,6 +183,8 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
             com.destroystokyo.paper.PaperConfig.init((File) options.valueOf("paper-settings"));
             com.destroystokyo.paper.PaperConfig.registerCommands();
             // Paper end
+			
+			this.migot.init(); // Migot
 
             DedicatedServer.LOGGER.info("Generating keypair");
             this.a(MinecraftEncryption.b());
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 80dcf9f..e2fc76d 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -21,6 +21,7 @@ import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 import org.bukkit.craftbukkit.Main;
 import org.bukkit.craftbukkit.chunkio2.impl.CraftNBTStorage;
+import de.minetick.Migot;
 
 // Migot start
 import de.minetick.AutoSaveJob;
@@ -139,6 +140,7 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
         SERVER = this; // Paper - better singleton
         io.netty.util.ResourceLeakDetector.setEnabled( false ); // Spigot - disable
         this.e = proxy;
+		this.migot = new Migot(); // Migot
         this.U = yggdrasilauthenticationservice;
         this.V = minecraftsessionservice;
         this.W = gameprofilerepository;
@@ -537,6 +539,8 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
         if (this.m.d()) {
             this.m.e();
         }
+		
+		this.migot.shutdown(); // Migot
 
         // Spigot start
         if (org.spigotmc.SpigotConfig.saveUserCacheOnStopOnly) {
@@ -574,6 +578,7 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
     public double[] recentTps = new double[3]; // Paper - Fine have your darn compat with bad plugins
 	
 	// Migot start
+	protected Migot migot;
     private LinkedList<AutoSaveJob> autoSaveWorlds = new LinkedList<AutoSaveJob>();
     private int autoSaveDelay = 0;
     private boolean autoSaveOrdered = false;
@@ -608,6 +613,12 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
             this.autoSaveOrdered = false;
         }
     }
+	
+	public void cancelHeavyCalculationsForAllWorlds(boolean cancel) {
+        for(WorldServer ws: this.worlds) {
+            ws.cancelHeavyCalculations(cancel);
+        }
+    }
     // Migot end
 
     public static class RollingAverage {
@@ -791,6 +802,11 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
     protected void C() throws ExceptionWorldConflict { // CraftBukkit - added throws
         co.aikar.timings.TimingsManager.FULL_SERVER_TICK.startTiming(); // Paper
         long i = System.nanoTime(); long startTime = i; // Paper
+		
+		// Migot start
+        this.migot.startTickTimerTask();
+        this.migot.increaseTickCounter();
+        // Migot end
 
         ++this.ticks;
         if (this.S) {
@@ -828,10 +844,13 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
         if(this.autoSaveOrdered) {
             this.autoSaveNextWorld();
          }
+		 
+		long tickTime = System.nanoTime() - i;
+        this.migot.checkTickTime(tickTime);
         // Migot end
 
         this.methodProfiler.a("tallying");
-        this.h[this.ticks % 100] = System.nanoTime() - i;
+        this.h[this.ticks % 100] = tickTime - i; // Migot
         this.methodProfiler.b();
         this.methodProfiler.a("snooper");
         if (getSnooperEnabled() && !this.m.d() && this.ticks > 100) {  // Spigot
@@ -892,6 +911,7 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
         }
         MinecraftTimings.timeUpdateTimer.stopTiming(); // Spigot
 
+		this.cancelHeavyCalculationsForAllWorlds(false); // Migot
         int i;
 
         for (i = 0; i < this.worlds.size(); ++i) { // CraftBukkit
@@ -955,6 +975,8 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
 
             // this.i[i][this.ticks % 100] = System.nanoTime() - j; // CraftBukkit
         }
+		
+		this.migot.cancelTimerTask(false); // Migot
 
         this.methodProfiler.c("connection");
         MinecraftTimings.connectionTimer.startTiming(); // Spigot
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index a46e33b..a5df829 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -51,6 +51,7 @@ public abstract class World implements IBlockAccess {
     private int a = 63;
     protected boolean d;
     // Spigot start - guard entity list from removals
+	protected boolean cancelHeavyCalculations = false;
 	public final List<Entity> entityList = Lists.newCopyOnWriteArrayList(); // Hose
 	/*
     public final List<Entity> entityList = new java.util.ArrayList<Entity>()
diff --git a/src/main/java/net/minecraft/server/WorldServer.java b/src/main/java/net/minecraft/server/WorldServer.java
index 298406e..2f16136 100644
--- a/src/main/java/net/minecraft/server/WorldServer.java
+++ b/src/main/java/net/minecraft/server/WorldServer.java
@@ -55,6 +55,12 @@ public class WorldServer extends World implements IAsyncTaskHandler {
     private int T;
     // private List<NextTickListEntry> U = Lists.newArrayList();
 	private final Queue<NextTickListEntry> U = Queues.newConcurrentLinkedQueue();
+	
+	// Migot start
+    public void cancelHeavyCalculations(boolean cancel) {
+        this.cancelHeavyCalculations = cancel;
+    }
+    // Migot end
 
     // CraftBukkit start
     public final int dimension;
diff --git a/src/main/resources/configurations/migot.yml b/src/main/resources/configurations/migot.yml
new file mode 100644
index 0000000..3134ddd
--- /dev/null
+++ b/src/main/resources/configurations/migot.yml
@@ -0,0 +1 @@
+general-settings:
\ No newline at end of file
-- 
2.8.2.windows.1

