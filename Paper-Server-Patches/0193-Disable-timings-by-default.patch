From 577559834789ef01bc8840eb752183301ecff056 Mon Sep 17 00:00:00 2001
From: SotrForgotten <i@omc.hk>
Date: Sun, 31 Jul 2016 16:38:35 +0800
Subject: [PATCH] Disable timings by default.


diff --git a/src/main/java/co/aikar/timings/TimingHandler.java b/src/main/java/co/aikar/timings/TimingHandler.java
index 4bf16ac..80be32e 100644
--- a/src/main/java/co/aikar/timings/TimingHandler.java
+++ b/src/main/java/co/aikar/timings/TimingHandler.java
@@ -46,7 +46,7 @@ class TimingHandler implements Timing {
     int timingDepth = 0;
     boolean added;
     boolean timed;
-    boolean enabled;
+    boolean enabled = false;
     TimingHandler parent;
 
     TimingHandler(TimingIdentifier id) {
@@ -108,15 +108,13 @@ class TimingHandler implements Timing {
 
     public void stopTiming() {
         if (enabled && --timingDepth == 0 && start != 0) {
-            /* if (!Bukkit.isPrimaryThread()) { // Torch start - Temporary workaround for timings
-                Bukkit.getLogger().log(Level.SEVERE, "Timing issue occour in " + name + ", please report it to Torch!");
-                new Throwable().printStackTrace();
+            if (!Bukkit.isPrimaryThread()) {
+                // Bukkit.getLogger().log(Level.SEVERE, "Timing issue occour in " + name + ", please report it to Torch!");
+                // new Throwable().printStackTrace();
                 start = 0;
                 return;
-            } */ // Torch end
-			synchronized(this) {
-				addDiff(System.nanoTime() - start);
-			}
+            }
+			addDiff(System.nanoTime() - start);
             start = 0;
         }
     }
diff --git a/src/main/java/com/destroystokyo/paper/PaperConfig.java b/src/main/java/com/destroystokyo/paper/PaperConfig.java
index 5807996..bd48a55 100644
--- a/src/main/java/com/destroystokyo/paper/PaperConfig.java
+++ b/src/main/java/com/destroystokyo/paper/PaperConfig.java
@@ -166,8 +166,8 @@ public class PaperConfig {
     }
 
     private static void timings() {
-        boolean timings = getBoolean("timings.enabled", true);
-        boolean verboseTimings = getBoolean("timings.verbose", true);
+        boolean timings = getBoolean("timings.enabled", false);
+        boolean verboseTimings = getBoolean("timings.verbose", false);
         TimingsManager.privacy = getBoolean("timings.server-name-privacy", false);
         TimingsManager.hiddenConfigs = getList("timings.hidden-config-entries", Lists.newArrayList("database", "settings.bungeecord-addresses"));
         int timingHistoryInterval = getInt("timings.history-interval", 300);
diff --git a/src/main/java/org/spigotmc/SpigotWorldConfig.java b/src/main/java/org/spigotmc/SpigotWorldConfig.java
index 397ac6a..10e0e5b 100644
--- a/src/main/java/org/spigotmc/SpigotWorldConfig.java
+++ b/src/main/java/org/spigotmc/SpigotWorldConfig.java
@@ -12,40 +12,6 @@ public class SpigotWorldConfig
 	
 	// Hose start
     static public final int cpu_core = Runtime.getRuntime().availableProcessors();
-    /*
-    static final ForkJoinPool.ForkJoinWorkerThreadFactory fetp = new ForkJoinPool.ForkJoinWorkerThreadFactory() {
-        @Override
-        public ForkJoinWorkerThread newThread(ForkJoinPool pool) {
-            final ForkJoinWorkerThread thread = ForkJoinPool.defaultForkJoinWorkerThreadFactory.newThread(pool);
-            thread.setName("EntityTickPool-" + thread.getPoolIndex());
-            return thread;
-        }
-    };
-    static final ForkJoinPool.ForkJoinWorkerThreadFactory fttp = new ForkJoinPool.ForkJoinWorkerThreadFactory() {
-        @Override
-        public ForkJoinWorkerThread newThread(ForkJoinPool pool) {
-            final ForkJoinWorkerThread thread = ForkJoinPool.defaultForkJoinWorkerThreadFactory.newThread(pool);
-            thread.setName("TileTickPool-" + thread.getPoolIndex());
-            return thread;
-        }
-    };
-    static final ForkJoinPool.ForkJoinWorkerThreadFactory fmp = new ForkJoinPool.ForkJoinWorkerThreadFactory() {
-        @Override
-        public ForkJoinWorkerThread newThread(ForkJoinPool pool) {
-            final ForkJoinWorkerThread thread = ForkJoinPool.defaultForkJoinWorkerThreadFactory.newThread(pool);
-            thread.setName("MovePool-" + thread.getPoolIndex());
-            return thread;
-        }
-    };
-    
-    static final ForkJoinPool.ForkJoinWorkerThreadFactory fpcp = new ForkJoinPool.ForkJoinWorkerThreadFactory() {
-        @Override
-        public ForkJoinWorkerThread newThread(ForkJoinPool pool) {
-            final ForkJoinWorkerThread thread = ForkJoinPool.defaultForkJoinWorkerThreadFactory.newThread(pool);
-            thread.setName("PlayerChunkPool-" + thread.getPoolIndex());
-            return thread;
-        }
-    };*/
     
     static final ForkJoinPool.ForkJoinWorkerThreadFactory fcp = new ForkJoinPool.ForkJoinWorkerThreadFactory() {
         @Override
@@ -55,37 +21,9 @@ public class SpigotWorldConfig
             return thread;
         }
     };
-    /*
-    static final ForkJoinPool.ForkJoinWorkerThreadFactory fcfpt3 = new ForkJoinPool.ForkJoinWorkerThreadFactory() {
-        @Override
-        public ForkJoinWorkerThread newThread(ForkJoinPool pool) {
-            final ForkJoinWorkerThread thread = ForkJoinPool.defaultForkJoinWorkerThreadFactory.newThread(pool);
-            thread.setName("ChunkFlushPool_T3-" + thread.getPoolIndex());
-            return thread;
-        }
-    };
-    
-    static final ForkJoinPool.ForkJoinWorkerThreadFactory fcpp = new ForkJoinPool.ForkJoinWorkerThreadFactory() {
-        @Override
-        public ForkJoinWorkerThread newThread(ForkJoinPool pool) {
-            final ForkJoinWorkerThread thread = ForkJoinPool.defaultForkJoinWorkerThreadFactory.newThread(pool);
-            thread.setName("ChunkPopulate_Pool-" + thread.getPoolIndex());
-            return thread;
-        }
-    };
-    
-    public static ForkJoinPool EntityTickPool;
-    public static ForkJoinPool TileTickPool;
-    public static ForkJoinPool MovePool;
-    public static ForkJoinPool PlayerChunkPool;*/
+	
     public static ForkJoinPool ChunkPool;
     
-    /*
-    static public FutureTask CollideTask;
-        
-    static final ThreadFactory tfcp = new ThreadFactoryBuilder().setNameFormat("Collide_Pool-%d").build();
-    static public final ExecutorService collidepool_executor = Executors.newFixedThreadPool(cpu_core, tfcp);*/
-    
     public static int worldtickentitypool_core_multiple;
     
     public static int getthreadnumber(){
@@ -96,15 +34,6 @@ public class SpigotWorldConfig
     {
         worldtickentitypool_core_multiple = getInt("wetp-core-multiple", 4);
         ChunkPool = new ForkJoinPool(getthreadnumber(), fcp, null, false);
-        /*
-        EntityTickPool = new ForkJoinPool(getthreadnumber(), fetp, null, false);
-        TileTickPool = new ForkJoinPool(getthreadnumber(), fttp, null, false);
-        MovePool = new ForkJoinPool(getthreadnumber(), fmp, null, false);
-        PlayerChunkPool = new ForkJoinPool(getthreadnumber(), fpcp, null, false);
-        
-        ChunkFlushPool_T3 = new ForkJoinPool(getthreadnumber(), fcfpt3, null, false);
-        ChunkPopulate_Pool = new ForkJoinPool(getthreadnumber(), fcpp, null, false);*/
-        //executor = new ThreadPoolExecutor(getthreadnumber(), getthreadnumber(), 1, TimeUnit.DAYS, queue);
         log("WETP Core Multiple: " + worldtickentitypool_core_multiple);
     }
     // Hose end
-- 
2.8.2.windows.1

