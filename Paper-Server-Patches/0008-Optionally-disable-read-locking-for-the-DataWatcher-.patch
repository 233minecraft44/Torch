From a10a6d580e755c1ae539cac817a64cfb97f27e64 Mon Sep 17 00:00:00 2001
From: SotrForgotten <i@omc.hk>
Date: Fri, 1 Jul 2016 14:29:50 +0800
Subject: [PATCH] Optionally disable read locking for the DataWatcher when
 using arrays, miscs


diff --git a/src/main/java/net/minecraft/server/DataWatcher.java b/src/main/java/net/minecraft/server/DataWatcher.java
index af7a624..f94e9d6 100644
--- a/src/main/java/net/minecraft/server/DataWatcher.java
+++ b/src/main/java/net/minecraft/server/DataWatcher.java
@@ -16,16 +16,18 @@ import it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap; // Paper
 import org.apache.commons.lang3.ObjectUtils;
 
 import it.unimi.dsi.fastutil.ints.Int2ObjectMap;
-import net.techcable.tacospigot.LookupTableMap;
+import net.techcable.tacospigot.ArrayMap;
+import net.techcable.tacospigot.NoOpReadWriteLock;
 import net.techcable.tacospigot.TacoSpigotConfig;
 import net.techcable.tacospigot.function.FunctionalMaps;
 
+
 public class DataWatcher {
 
     private static final Map<Class<? extends Entity>, Integer> a = Maps.newHashMap();
     private final Entity b;
-    private final Int2ObjectMap<Item<?>> c = TacoSpigotConfig.useArraysForDatawatcher ? new LookupTableMap<>() : new Int2ObjectOpenHashMap<>(); // Paper // TacoSpigot - use 'Int2ObjectMap' and use 'LookupTableMap' if useArraysForDatawatcher
-    private final ReadWriteLock d = new ReentrantReadWriteLock();
+    private final Int2ObjectMap<Item<?>> c = TacoSpigotConfig.useArraysForDatawatcher ? new ArrayMap<>() : new Int2ObjectOpenHashMap<>(); // Paper // TacoSpigot - use 'Int2ObjectMap' and use 'ArrayMap' if useArraysForDatawatcher
+    private final ReadWriteLock d = TacoSpigotConfig.disableDataWatcherReadLocking && TacoSpigotConfig.useArraysForDatawatcher ? NoOpReadWriteLock.INSTANCE : new ReentrantReadWriteLock(); // TacoSpigot - don't lock if we're using ArrayMap
     private boolean e = true;
     private boolean f;
 
diff --git a/src/main/java/net/techcable/tacospigot/ArrayMap.java b/src/main/java/net/techcable/tacospigot/ArrayMap.java
new file mode 100644
index 0000000..48fd7e1
--- /dev/null
+++ b/src/main/java/net/techcable/tacospigot/ArrayMap.java
@@ -0,0 +1,238 @@
+package net.techcable.tacospigot;
+
+import it.unimi.dsi.fastutil.ints.AbstractInt2ObjectMap;
+import it.unimi.dsi.fastutil.ints.Int2ObjectMap;
+import it.unimi.dsi.fastutil.objects.AbstractObjectCollection;
+import it.unimi.dsi.fastutil.objects.AbstractObjectSet;
+import it.unimi.dsi.fastutil.objects.ObjectCollection;
+import it.unimi.dsi.fastutil.objects.ObjectIterator;
+import it.unimi.dsi.fastutil.objects.ObjectSet;
+
+import java.util.Arrays;
+import java.util.NoSuchElementException;
+import java.util.function.BiConsumer;
+import java.util.function.ObjIntConsumer;
+import javax.annotation.Nonnull;
+
+import javax.annotation.concurrent.ThreadSafe;
+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
+import java.util.concurrent.atomic.AtomicReferenceArray;
+import com.google.common.collect.AbstractIterator;
+
+import static com.google.common.base.Preconditions.*;
+
+/**
+ * A concurrent map of integers to objects with non-locking read operations, and locking write operations.
+ * <p>
+ * This map is backed by a array, and therefore the amount of overhead this map incurs is equal to the largest key/integer.
+ * Therefore you should <i>not use this map if your keys will be large or scattered!</i>
+ * However, if the keys are dense and small, this may actually take less memory than a HashMap.
+ * </p>
+ *
+ * @param <V> the type of vales
+ */
+
+@SuppressWarnings("unchecked")
+@ThreadSafe
+public final class ArrayMap<V> extends AbstractInt2ObjectMap<V> {
+    private static final AtomicIntegerFieldUpdater<ArrayMap> SIZE_UPDATER = AtomicIntegerFieldUpdater.newUpdater(ArrayMap.class, "size");
+    private volatile int size;
+    @Nonnull
+    private volatile AtomicReferenceArray<V> values = new AtomicReferenceArray<>(0);
+    private volatile ObjectSet<Int2ObjectMap.Entry<V>> entrySet;
+    private volatile ObjectCollection<V> valuesCollection;
+
+       @Override
+       public ObjectSet<Int2ObjectMap.Entry<V>> int2ObjectEntrySet() {
+           return entrySet != null ? entrySet : (entrySet = new AbstractObjectSet<Int2ObjectMap.Entry<V>>() {
+               @Override
+               @Nonnull
+               public ObjectIterator<Int2ObjectMap.Entry<V>> iterator() {
+                   return new EntryIterator<Int2ObjectMap.Entry<V>>() {
+                       @Override
+                       public Int2ObjectMap.Entry<V> next() {
+                           return nextEntry();
+                       }
+                   };
+               }
+
+               @Override
+               public int size() {
+                   return size;
+               }
+           });
+       }
+
+       @Override
+       @Nonnull
+       public ObjectCollection<V> values() {
+           return valuesCollection != null ? valuesCollection : (valuesCollection = new AbstractObjectCollection<V>() {
+
+               @Override
+               @Nonnull
+               public ObjectIterator<V> iterator() {
+                   return new EntryIterator<V>() {
+                       @Override
+                       @Nonnull
+                       public V next() {
+                           return nextEntry().getValue();
+                       }
+                   };
+               }
+
+               @Override
+               public int size() {
+                   return size;
+               }
+           });
+       }
+
+       @Override
+       @SuppressWarnings("unchecked")
+       public V get(int i) {
+			AtomicReferenceArray<V> values = this.values;
+			return i >= 0 && i < values.length() ? values.get(i) : null;
+       }
+
+       @Override
+       public synchronized V put(int key, V value) {
+           checkNotNull(value, "Null value");
+		   AtomicReferenceArray<V> values = this.values;
+		   int length;
+           if (key < 0) {
+               throw new IllegalArgumentException(negativeKey(key));
+           } else if (key >= values.length()) {
+               expandAndPut(key, value); // Put in a separate method for inlining (its a unlikely slow-case)
+               return null;
+           } else {
+               V oldValue = values.getAndSet(key, value);
+            if (oldValue == null) SIZE_UPDATER.incrementAndGet(this); // New entry
+               return oldValue;
+           }
+       }
+
+       private void expandAndPut(int key, V value) {
+           assert Thread.holdsLock(this);
+        AtomicReferenceArray<V> values = this.values;
+        AtomicReferenceArray<V> copy = new AtomicReferenceArray<>(key + 1);
+        for (int i = 0; i < key; i++) {
+            copy.set(i, values.get(i));
+        }
+        this.values = copy;
+        copy.set(key, value);
+        SIZE_UPDATER.incrementAndGet(this);
+       }
+
+       @Override
+       public synchronized V remove(int key) {
+        AtomicReferenceArray<V> values = this.values;
+           if (key < 0) {
+               throw new IllegalArgumentException(negativeKey(key));
+           } else if (key >= values.length()) {
+               return null;
+           } else {
+               V oldValue = values.getAndSet(key, null);
+            if (oldValue != null)
+                SIZE_UPDATER.decrementAndGet(this); // Entry was there before, but now we're removing it
+               return oldValue;
+           }
+       }
+
+       @Override
+       public boolean containsKey(int i) {
+           AtomicReferenceArray<V> values = this.values;
+		   return i >= 0 && i < values.length() && values.get(i) != null;
+       }
+
+       @Override
+       public void forEach(BiConsumer<? super Integer, ? super V> action) {
+           forEachPrimitive((value, key) -> action.accept(key, value));
+       }
+
+       public void forEachPrimitive(ObjIntConsumer<V> action) {
+            AtomicReferenceArray<V> values = this.values;
+        for (int index = 0; index < values.length(); index++) {
+            V value = values.get(index);
+               if (value != null) {
+                   action.accept(value, index);
+               }
+           }
+       }
+
+       private String negativeKey(int key) {
+           return "Can't add a negative key " + key + " to a ArrayMap!";
+       }
+
+       @Override
+       public int size() {
+           return size;
+       }
+
+       private abstract class EntryIterator<T> implements ObjectIterator<T> {
+           private int index = 0;
+
+           @Override
+           public int skip(int toSkip) {
+               if (toSkip > values.length()) toSkip = values.length();
+               index += toSkip;
+               return toSkip;
+           }
+
+           @Override
+           public boolean hasNext() {
+               AtomicReferenceArray<V> values = ArrayMap.this.values;
+            while (index < values.length()) {
+                V value = values.get(index);
+                   if (value != null) {
+                       return true;
+                   } else {
+                       index++;
+                   }
+               }
+               return false;
+           }
+
+           /* default */ Int2ObjectMap.Entry<V> nextEntry() {
+              AtomicReferenceArray<V> values = ArrayMap.this.values;
+              while (index < values.length()) {
+                   int key = index++;
+                   V value = values.get(key);
+                   if (value != null) {
+                       return new Entry(key, value);
+                   }
+               }
+               throw new NoSuchElementException();
+           }
+       }
+
+       public class Entry implements Int2ObjectMap.Entry<V> {
+           private final int key;
+           private V value;
+
+           public Entry(int key, V value) {
+               this.key = key;
+               this.value = checkNotNull(value, "Null value");
+           }
+
+           @Override
+           public int getIntKey() {
+               return key;
+           }
+
+           @Override
+           public Integer getKey() {
+               return getIntKey();
+           }
+
+           @Override
+           public V getValue() {
+               return value;
+           }
+
+           @Override
+           public V setValue(V value) {
+               return put(key, this.value = checkNotNull(value, "Null value"));
+           }
+
+       }
+}
\ No newline at end of file
diff --git a/src/main/java/net/techcable/tacospigot/LookupTableMap.java b/src/main/java/net/techcable/tacospigot/LookupTableMap.java
deleted file mode 100644
index 7646c56..0000000
--- a/src/main/java/net/techcable/tacospigot/LookupTableMap.java
+++ /dev/null
@@ -1,211 +0,0 @@
-package net.techcable.tacospigot;
-
-import it.unimi.dsi.fastutil.ints.AbstractInt2ObjectMap;
-import it.unimi.dsi.fastutil.ints.Int2ObjectMap;
-import it.unimi.dsi.fastutil.objects.AbstractObjectCollection;
-import it.unimi.dsi.fastutil.objects.AbstractObjectSet;
-import it.unimi.dsi.fastutil.objects.ObjectCollection;
-import it.unimi.dsi.fastutil.objects.ObjectIterator;
-import it.unimi.dsi.fastutil.objects.ObjectSet;
-
-import java.util.Arrays;
-import java.util.NoSuchElementException;
-import java.util.function.BiConsumer;
-import java.util.function.ObjIntConsumer;
-import javax.annotation.Nonnull;
-
-import com.google.common.collect.AbstractIterator;
-
-import static com.google.common.base.Preconditions.*;
-
-@SuppressWarnings("unchecked")
-public final class LookupTableMap<V> extends AbstractInt2ObjectMap<V> {
-       private static final int DEFAULT_EXPANSION_SIZE = 15;
-       private Object[] values;
-       private int size;
-       private ObjectSet<Int2ObjectMap.Entry<V>> entrySet;
-       private ObjectCollection<V> valuesCollection;
-
-       @Override
-       public ObjectSet<Int2ObjectMap.Entry<V>> int2ObjectEntrySet() {
-           return entrySet != null ? entrySet : (entrySet = new AbstractObjectSet<Int2ObjectMap.Entry<V>>() {
-               @Override
-               @Nonnull
-               public ObjectIterator<Int2ObjectMap.Entry<V>> iterator() {
-                   return new EntryIterator<Int2ObjectMap.Entry<V>>() {
-                       @Override
-                       public Int2ObjectMap.Entry<V> next() {
-                           return nextEntry();
-                       }
-                   };
-               }
-
-               @Override
-               public int size() {
-                   return size;
-               }
-           });
-       }
-
-       @Override
-       @Nonnull
-       public ObjectCollection<V> values() {
-           return valuesCollection != null ? valuesCollection : (valuesCollection = new AbstractObjectCollection<V>() {
-
-               @Override
-               @Nonnull
-               public ObjectIterator<V> iterator() {
-                   return new EntryIterator<V>() {
-                       @Override
-                       @Nonnull
-                       public V next() {
-                           return nextEntry().getValue();
-                       }
-                   };
-               }
-
-               @Override
-               public int size() {
-                   return size;
-               }
-           });
-       }
-
-       @Override
-       @SuppressWarnings("unchecked")
-       public V get(int i) {
-           Object[] values = this.values;
-           return i >= 0 && i < values.length ? (V) values[i] : null;
-       }
-
-       @Override
-       public V put(int key, V value) {
-           checkNotNull(value, "Null value");
-           if (key < 0) {
-               throw new IllegalArgumentException(negativeKey(key));
-           } else if (key >= values.length) {
-               expandAndPut(key, value); // Put in a separate method for inlining (its a unlikely slow-case)
-               return null;
-           } else {
-               V oldValue = (V) values[key];
-               values[key] = value;
-               if (oldValue == null) size++; // New entry
-               return oldValue;
-           }
-       }
-
-       private void expandAndPut(int key, V value) {
-           values = Arrays.copyOf(values, key + DEFAULT_EXPANSION_SIZE);
-           values[key] = value;
-           size++; // Since we've expanded, there was obviously nothing in there before
-       }
-
-       @Override
-       public V remove(int key) {
-           if (key < 0) {
-               throw new IllegalArgumentException(negativeKey(key));
-           } else if (key >= values.length) {
-               return null;
-           } else {
-               V oldValue = (V) values[key];
-               values[key] = null;
-               if (oldValue != null) size--; // Entry was there before, but now we're removing it
-               return oldValue;
-           }
-       }
-
-       @Override
-       public boolean containsKey(int i) {
-           Object[] values = this.values;
-           return i >= 0 && i < values.length && values[i] != null;
-       }
-
-       @Override
-       public void forEach(BiConsumer<? super Integer, ? super V> action) {
-           forEachPrimitive((value, key) -> action.accept(key, value));
-       }
-
-       public void forEachPrimitive(ObjIntConsumer<V> action) {
-           for (int index = 0; index < values.length; index++) {
-               V value = (V) values[index];
-               if (value != null) {
-                   action.accept(value, index);
-               }
-           }
-       }
-
-       private String negativeKey(int key) {
-           return "Can't add a negative key " + key + " to a LookupTableMap!";
-       }
-
-       @Override
-       public int size() {
-           return size;
-       }
-
-       private abstract class EntryIterator<T> implements ObjectIterator<T> {
-           private int index = 0;
-
-           @Override
-           public int skip(int toSkip) {
-               if (toSkip > values.length) toSkip = values.length;
-               index += toSkip;
-               return toSkip;
-           }
-
-           @Override
-           public boolean hasNext() {
-               while (index < values.length) {
-                   V value = (V) values[index];
-                   if (value != null) {
-                       return true;
-                   } else {
-                       index++;
-                   }
-               }
-               return false;
-           }
-
-           /* default */ Int2ObjectMap.Entry<V> nextEntry() {
-               while (index < values.length) {
-                   int key = index++;
-                   V value = (V) values[key];
-                   if (value != null) {
-                       return new Entry(key, value);
-                   }
-               }
-               throw new NoSuchElementException();
-           }
-       }
-
-       public class Entry implements Int2ObjectMap.Entry<V> {
-           private final int key;
-           private V value;
-
-           public Entry(int key, V value) {
-               this.key = key;
-               this.value = checkNotNull(value, "Null value");
-           }
-
-           @Override
-           public int getIntKey() {
-               return key;
-           }
-
-           @Override
-           public Integer getKey() {
-               return getIntKey();
-           }
-
-           @Override
-           public V getValue() {
-               return value;
-           }
-
-           @Override
-           public V setValue(V value) {
-               return put(key, this.value = checkNotNull(value, "Null value"));
-           }
-
-       }
-}
\ No newline at end of file
diff --git a/src/main/java/net/techcable/tacospigot/NoOpLock.java b/src/main/java/net/techcable/tacospigot/NoOpLock.java
new file mode 100644
index 0000000..692170b
--- /dev/null
+++ b/src/main/java/net/techcable/tacospigot/NoOpLock.java
@@ -0,0 +1,36 @@
+package net.techcable.tacospigot;
+
+import java.util.concurrent.TimeUnit;
+import java.util.concurrent.locks.Condition;
+import java.util.concurrent.locks.Lock;
+
+public class NoOpLock implements Lock {
+    private NoOpLock() {}
+    public static final NoOpLock INSTANCE = new NoOpLock();
+
+    @Override
+    public void lock() {}
+
+    @Override
+    public void lockInterruptibly() throws InterruptedException {}
+
+    @Override
+    public boolean tryLock() {
+        return true;
+    }
+
+    @Override
+    public boolean tryLock(long time, TimeUnit unit) throws InterruptedException {
+        return true;
+    }
+
+    @Override
+    public void unlock() {
+
+    }
+
+    @Override
+    public Condition newCondition() {
+        throw new UnsupportedOperationException();
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/net/techcable/tacospigot/NoOpReadWriteLock.java b/src/main/java/net/techcable/tacospigot/NoOpReadWriteLock.java
new file mode 100644
index 0000000..a190239
--- /dev/null
+++ b/src/main/java/net/techcable/tacospigot/NoOpReadWriteLock.java
@@ -0,0 +1,22 @@
+package net.techcable.tacospigot;
+
+import java.util.concurrent.locks.Lock;
+import java.util.concurrent.locks.ReadWriteLock;
+import javax.annotation.Nonnull;
+
+public class NoOpReadWriteLock implements ReadWriteLock {
+    private NoOpReadWriteLock() {}
+    public static final NoOpReadWriteLock INSTANCE = new NoOpReadWriteLock();
+
+    @Override
+    @Nonnull
+    public Lock readLock() {
+        return NoOpLock.INSTANCE;
+    }
+
+    @Override
+    @Nonnull
+    public Lock writeLock() {
+        return NoOpLock.INSTANCE;
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/net/techcable/tacospigot/TacoSpigotConfig.java b/src/main/java/net/techcable/tacospigot/TacoSpigotConfig.java
index 0069cf7..d412e13 100644
--- a/src/main/java/net/techcable/tacospigot/TacoSpigotConfig.java
+++ b/src/main/java/net/techcable/tacospigot/TacoSpigotConfig.java
@@ -117,4 +117,9 @@ public class TacoSpigotConfig {
     private static void useArraysForDatawatcher() {
         useArraysForDatawatcher = getBoolean("useArraysForDatawatcher", true); // Torch - default use
     }
+	
+	public static boolean disableDataWatcherReadLocking;
+    private static void disableDataWatcherReadLocking() {
+        disableDataWatcherReadLocking = getBoolean("disableDataWatcherReadLocking", true); // Torch - default use
+    }
 }
diff --git a/src/main/java/net/techcable/tacospigot/function/FunctionalMaps.java b/src/main/java/net/techcable/tacospigot/function/FunctionalMaps.java
index 4817889..7fd17db 100644
--- a/src/main/java/net/techcable/tacospigot/function/FunctionalMaps.java
+++ b/src/main/java/net/techcable/tacospigot/function/FunctionalMaps.java
@@ -6,16 +6,16 @@ import java.util.Map;
 import java.util.function.ObjIntConsumer;
 import javax.annotation.ParametersAreNonnullByDefault;
 
-import net.techcable.tacospigot.LookupTableMap;
+import net.techcable.tacospigot.ArrayMap;
 
 import static com.google.common.base.Preconditions.*;
 
 @ParametersAreNonnullByDefault
 public class FunctionalMaps {
     public static <V> void forEachPrimitive(Int2ObjectMap<V> map, ObjIntConsumer<V> action) {
-        if (map instanceof LookupTableMap) {
+        if (map instanceof ArrayMap) {
             //noinspection unchecked - ur mums unchecked!
-            ((LookupTableMap) checkNotNull(map, "Null map")).forEachPrimitive(action);
+            ((ArrayMap) checkNotNull(map, "Null map")).forEachPrimitive(action);
         } else {
             defaultForEachPrimitive(map, action);
         }
-- 
2.8.2.windows.1

