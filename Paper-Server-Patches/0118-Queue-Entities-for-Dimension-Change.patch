From a43e0a2ad30511d1dd41222a2a75fbd04c23dd84 Mon Sep 17 00:00:00 2001
From: SotrForgotten <i@omc.hk>
Date: Fri, 15 Jul 2016 21:00:45 +0800
Subject: [PATCH] Queue Entities for Dimension Change


diff --git a/src/main/java/de/minetick/MigotConfig.java b/src/main/java/de/minetick/MigotConfig.java
index 1bbb22c..09ae77c 100644
--- a/src/main/java/de/minetick/MigotConfig.java
+++ b/src/main/java/de/minetick/MigotConfig.java
@@ -34,7 +34,7 @@ public class MigotConfig {
         try {
             this.configuration.save(configFile);
         } catch(IOException e) {
-            logger.error("[Migot] Could not save config file migot.yml!");
+            logger.error("[Torch] Could not save config file migot.yml!");
             logger.error(e.toString());
         }
 
@@ -89,7 +89,7 @@ public class MigotConfig {
                 EntityType type = EntityType.valueOf(name.toUpperCase());
                 this.entitiesWithOffloadedPathSearches.add(type);
             } catch (IllegalArgumentException e) {
-                logger.warn("[Migot] Settings: Skipping \"" + name + "\", as it is not a constant in org.bukkit.entity.EntityType!");
+                logger.warn("[Torch] Settings: Skipping \"" + name + "\", as it is not a constant in org.bukkit.entity.EntityType!");
             }
         }
     }
@@ -104,6 +104,6 @@ public class MigotConfig {
     }
 
     public boolean getOffloadedPathSearchesEnabled() {
-        return configuration.getBoolean("async-pathsearches.enabled", true);
+        return configuration.getBoolean("async-pathsearches.enabled", false); // It's buggy this point.
     }
 }
\ No newline at end of file
diff --git a/src/main/java/de/minetick/MigotThreadFactory.java b/src/main/java/de/minetick/MigotThreadFactory.java
index b67783c..4a56340 100644
--- a/src/main/java/de/minetick/MigotThreadFactory.java
+++ b/src/main/java/de/minetick/MigotThreadFactory.java
@@ -7,7 +7,7 @@ public class MigotThreadFactory implements ThreadFactory {
 
     private int priority;
     private int idCounter = 0;
-    private String name = "MigotThread";
+    private String name = "TorchThread";
 
     public MigotThreadFactory(int priority) {
         this.priority = Math.max(priority, Thread.MIN_PRIORITY);
diff --git a/src/main/java/de/minetick/pathsearch/PathSearchJobEntity.java b/src/main/java/de/minetick/pathsearch/PathSearchJobEntity.java
index 976c593..5e62315 100644
--- a/src/main/java/de/minetick/pathsearch/PathSearchJobEntity.java
+++ b/src/main/java/de/minetick/pathsearch/PathSearchJobEntity.java
@@ -49,7 +49,7 @@ public class PathSearchJobEntity extends PathSearchJob {
 
     public SearchCacheEntry getCacheEntryValue() {
         if(this.pathEntity != null) {
-            return new SearchCacheEntryEntity((EntityInsentient)this.navigation.getEntity(), (EntityInsentient)this.target, this.pathEntity);
+            return new SearchCacheEntryEntity((EntityInsentient) this.navigation.getEntity(), this.target, this.pathEntity);
         }
         return null;
     }
diff --git a/src/main/java/de/minetick/pathsearch/PathSearchJobPosition.java b/src/main/java/de/minetick/pathsearch/PathSearchJobPosition.java
index d1ef2e2..0639e69 100644
--- a/src/main/java/de/minetick/pathsearch/PathSearchJobPosition.java
+++ b/src/main/java/de/minetick/pathsearch/PathSearchJobPosition.java
@@ -34,7 +34,7 @@ public class PathSearchJobPosition extends PathSearchJob {
 
     public SearchCacheEntryPosition getCacheEntryValue() {
         if(this.pathEntity != null) {
-            return new SearchCacheEntryPosition((Entity)this.a, this.blockposition, this.pathEntity);
+            return new SearchCacheEntryPosition((EntityInsentient) this.navigation.getEntity(), this.blockposition, this.pathEntity);
         }
         return null;
     }
diff --git a/src/main/java/de/minetick/pathsearch/PathSearchThrottlerThread.java b/src/main/java/de/minetick/pathsearch/PathSearchThrottlerThread.java
index bc86ffb..75245e7 100644
--- a/src/main/java/de/minetick/pathsearch/PathSearchThrottlerThread.java
+++ b/src/main/java/de/minetick/pathsearch/PathSearchThrottlerThread.java
@@ -20,7 +20,7 @@ public class PathSearchThrottlerThread extends ThreadPoolExecutor {
     private static PathSearchThrottlerThread instance;
 
     public PathSearchThrottlerThread(int poolSize) {
-        super(poolSize, poolSize, 1L, TimeUnit.MINUTES, new LinkedBlockingQueue<Runnable>(), new MigotThreadFactory(Thread.MIN_PRIORITY, "Migot_PathFinder"));
+        super(poolSize, poolSize, 1L, TimeUnit.MINUTES, new LinkedBlockingQueue<Runnable>(), new MigotThreadFactory(Thread.MIN_PRIORITY, "Torch_PathFinder"));
         instance = this;
         adjustPoolSize(poolSize);
         this.filter = new LinkedHashMap<PathSearchJob, PathSearchJob>();
diff --git a/src/main/java/net/minecraft/server/Entity.java b/src/main/java/net/minecraft/server/Entity.java
index 237167e..acdf0c9 100644
--- a/src/main/java/net/minecraft/server/Entity.java
+++ b/src/main/java/net/minecraft/server/Entity.java
@@ -176,6 +176,13 @@ public abstract class Entity implements ICommandListener {
     public long activatedTick = Integer.MIN_VALUE;
     public boolean fromMobSpawner;
     public void inactiveTick() { }
+	// Migot start
+    private int targetDimension;
+
+    public int getTargetDimension() {
+        return this.targetDimension;
+    }
+    // Migot end
     protected int numCollisions = 0;
     // Spigot end
 
@@ -198,6 +205,7 @@ public abstract class Entity implements ICommandListener {
         this.setPosition(0.0D, 0.0D, 0.0D);
         if (world != null) {
             this.dimension = world.worldProvider.getDimensionManager().getDimensionID();
+			this.targetDimension = this.dimension; // Migot
             // Spigot start
             this.defaultActivationState = org.spigotmc.ActivationRange.initializeEntityActivationState(this, world.spigotConfig);
         } else {
diff --git a/src/main/java/net/minecraft/server/NavigationAbstract.java b/src/main/java/net/minecraft/server/NavigationAbstract.java
index 02d10f9..0835632 100644
--- a/src/main/java/net/minecraft/server/NavigationAbstract.java
+++ b/src/main/java/net/minecraft/server/NavigationAbstract.java
@@ -131,6 +131,11 @@ public abstract class NavigationAbstract {
     }
 
     public boolean a(Entity entity, double d0) {
+		PathEntity pathentity = this.a(entity);
+
+        return pathentity != null ? this.a(pathentity, d0) : false;
+    }
+		/*
         // Paper start - Pathfinding optimizations
         if (this.pathfindFailures > 10 && this.c == null && MinecraftServer.currentTick < this.lastFailure + 40) {
             return false;
@@ -151,6 +156,7 @@ public abstract class NavigationAbstract {
     private int lastFailure = 0;
     private int pathfindFailures = 0;
     // Paper end
+	*/
 
     public boolean a(@Nullable PathEntity pathentity, double d0) {
         if (pathentity == null) {
@@ -284,7 +290,7 @@ public abstract class NavigationAbstract {
     }
 
     public void o() {
-        this.pathfindFailures = 0; this.lastFailure = 0; // Paper - Pathfinding optimizations
+        // this.pathfindFailures = 0; this.lastFailure = 0; // Paper - Pathfinding optimizations
         this.c = null;
     }
 
@@ -342,7 +348,7 @@ public abstract class NavigationAbstract {
 
     public ChunkCache createChunkCache(boolean forEntitySearch) {
         if (this.b()) { // Torch - hold method
-            float f = this.h(); // Torch - hold method
+            float f = this.h(); // Torch
             BlockPosition blockposition1 = new BlockPosition(this.a); // Torch - remapping fix
             int i = (int) (f + (forEntitySearch ? 16.0F : 8.0F));
             return new ChunkCache(this.b, blockposition1.a(-i, -i, -i), blockposition1.a(i, i, i), 0); // Torch - remapping fix
@@ -352,8 +358,8 @@ public abstract class NavigationAbstract {
 
     public PathEntity doPathSearch(ChunkCache chunkcache, BlockPosition blockposition) {
         if (this.b()) { // Torch - hold method
-            float f = this.h(); // Torch - hold method
-            return this.s.a((IBlockAccess) chunkcache, (Entity) this.a, blockposition, f); // Torch - remapping fix
+            float f = this.h(); // Torch
+            return this.s.a((IBlockAccess) chunkcache, this.a, blockposition, f); // Torch - remapping fix
         }
         return null;
     }
diff --git a/src/main/java/net/minecraft/server/Pathfinder.java b/src/main/java/net/minecraft/server/Pathfinder.java
index df2f4ed..25de357 100644
--- a/src/main/java/net/minecraft/server/Pathfinder.java
+++ b/src/main/java/net/minecraft/server/Pathfinder.java
@@ -19,11 +19,6 @@ public class Pathfinder {
     public PathEntity a(IBlockAccess iblockaccess, EntityInsentient entityinsentient, Entity entity, float f) {
         return this.a(iblockaccess, entityinsentient, entity.locX, entity.getBoundingBox().b, entity.locZ, f);
     }
-	
-	@Nullable
-    public PathEntity a(IBlockAccess iblockaccess, Entity entity, BlockPosition blockposition, float f) {
-		return this.a(iblockaccess, entity, (double) ((float) blockposition.getX() + 0.5F), (double) ((float) blockposition.getY() + 0.5F), (double) ((float) blockposition.getZ() + 0.5F), f);
-    }
 
     @Nullable
     public PathEntity a(IBlockAccess iblockaccess, EntityInsentient entityinsentient, BlockPosition blockposition, float f) {
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index 9972005..f12500b 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -52,6 +52,7 @@ public abstract class World implements IBlockAccess {
     protected boolean d;
     // Spigot start - guard entity list from removals
 	protected boolean cancelHeavyCalculations = false;
+	
 	public final List<Entity> entityList = Lists.newCopyOnWriteArrayList(); // Hose
 	/*
     public final List<Entity> entityList = new java.util.ArrayList<Entity>()
diff --git a/src/main/resources/configurations/migot.yml b/src/main/resources/configurations/migot.yml
index 1954307..fa965b9 100644
--- a/src/main/resources/configurations/migot.yml
+++ b/src/main/resources/configurations/migot.yml
@@ -1,6 +1,6 @@
 general-settings:
 async-pathsearches:
-    enabled: true
+    enabled: false
     threadPoolSize: 1
     minimumDistanceToTarget: 0.0
     entities:
-- 
2.8.2.windows.1

