From 2ff42388b619ea4604f11f16b005cfcb068858ef Mon Sep 17 00:00:00 2001
From: SotrForgotten <i@omc.hk>
Date: Sat, 2 Jul 2016 19:31:34 +0800
Subject: [PATCH] Optimize DataPalleteBlock and getType


diff --git a/src/main/java/net/minecraft/server/ChunkProviderServer.java b/src/main/java/net/minecraft/server/ChunkProviderServer.java
index 0aca107..99b45b7 100644
--- a/src/main/java/net/minecraft/server/ChunkProviderServer.java
+++ b/src/main/java/net/minecraft/server/ChunkProviderServer.java
@@ -184,7 +184,7 @@ public class ChunkProviderServer implements IChunkProvider {
         // CraftBukkit end
 
         if (chunk == null) {
-            world.timings.syncChunkLoadTimer.startTiming(); // Spigot
+            // world.timings.syncChunkLoadTimer.startTiming(); // Spigot
             long k = ChunkCoordIntPair.a(i, j);
 
             try {
@@ -203,7 +203,7 @@ public class ChunkProviderServer implements IChunkProvider {
             chunk.addEntities();
 
             chunk.loadNearby(this, this.chunkGenerator, true); // CraftBukkit
-            world.timings.syncChunkLoadTimer.stopTiming(); // Spigot
+            // world.timings.syncChunkLoadTimer.stopTiming(); // Spigot
         }
 
         return chunk;
diff --git a/src/main/java/net/minecraft/server/DataPaletteBlock.java b/src/main/java/net/minecraft/server/DataPaletteBlock.java
index b395221..cd55357 100644
--- a/src/main/java/net/minecraft/server/DataPaletteBlock.java
+++ b/src/main/java/net/minecraft/server/DataPaletteBlock.java
@@ -32,12 +32,12 @@ public class DataPaletteBlock implements DataPaletteExpandable {
             }
 
             this.c.a(DataPaletteBlock.a);
-            this.b = new DataBits(this.e, 4096);
+            this.b = new DataBits(this.e, 4096); // Paper
         }
     }
 
     public int a(int i, IBlockData iblockdata) {
-        DataBits databits = this.b;
+        DataBits databits = this.b; // Paper - nope
         DataPalette datapalette = this.c;
 
         this.b(i);
@@ -58,9 +58,9 @@ public class DataPaletteBlock implements DataPaletteExpandable {
     }
 
     protected void setBlockIndex(int i, IBlockData iblockdata) {
-        int j = this.c.a(iblockdata);
-
-        this.b.a(i, j);
+         int j = this.c.a(iblockdata);
+ 
+         this.b.a(i, j);
     }
 
     public IBlockData a(int i, int j, int k) {
@@ -133,5 +133,6 @@ public class DataPaletteBlock implements DataPaletteExpandable {
 
     public int a() {
         return 1 + this.c.a() + PacketDataSerializer.a(this.b.b()) + this.b.a().length * 8;
+        // Paper end
     }
 }
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index 8d43d95..5ddd1aa 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -805,43 +805,54 @@ public abstract class World implements IBlockAccess {
 
     // Paper start - reduces need to do isLoaded before getType
     public IBlockData getTypeIfLoaded(BlockPosition blockposition) {
-        // CraftBukkit start - tree generation
-		final int x = blockposition.getX();
-        final int y = blockposition.getY();
-        final int z = blockposition.getZ();
-        if (captureTreeGeneration) {
-            final IBlockData previous = getCapturedBlockType(x, y, z);
-            if (previous != null) {
-                return previous;
-            }
-        }
-        // CraftBukkit end
-        Chunk chunk = ((ChunkProviderServer) this.chunkProvider).getChunkIfLoaded(x >> 4, z >> 4);
+        if (captureTreeGeneration) return findCaptured(blockposition); // use seperate findCaptured() method
+        Chunk chunk = this.getChunkIfLoaded(blockposition);
         if (chunk != null) {
-            return chunk.getBlockData(x, y, z);
+            return blockposition.isValidLocation() ? chunk.getBlockData(blockposition) : Blocks.AIR.getBlockData();
         }
         return null;
     }
     // Paper end
 
-    public IBlockData getType(BlockPosition blockposition) {
+    // Paper start - optimize getType
+    // hoist tree generation into a seperate method to assist inlining
+    public IBlockData getType(BlockPosition pos) {
+        return getType(pos, this.captureTreeGeneration);
+    }
+
+    private IBlockData findCaptured(BlockPosition blockposition) {
         // CraftBukkit start - tree generation
 		// Paper start - optimize getType lookup to reduce instructions - getBlockData already enforces valid Y, move tree out
         final int x = blockposition.getX();
         final int y = blockposition.getY();
         final int z = blockposition.getZ();
-        if (captureTreeGeneration) {
-            Iterator<BlockState> it = capturedBlockStates.iterator();
+		Iterator<BlockState> it = capturedBlockStates.iterator();
+        while (it.hasNext()) {
             final IBlockData previous = getCapturedBlockType(x, y, z);
             if (previous != null) {
                 return previous;
             }
-        }
+		}
         // CraftBukkit end
-        return this.chunkProvider.getChunkAt(x >> 4, z >> 4).getBlockData(x, y, z);
-        // Paper end
+        return getType(blockposition, captureTreeGeneration);
     }
 	
+	public IBlockData getType(BlockPosition blockposition, boolean captureTreeGeneration) {
+        if (captureTreeGeneration) {
+            // CraftBukkit end
+            return findCaptured(blockposition); // Move into seperate method to assist inlining
+         }
+        if (blockposition.isValidLocation()) { // Paper
+            Chunk chunk = this.getChunkAtWorldCoords(blockposition);
+            ChunkSection chunksection = chunk.getSections()[blockposition.getY() >> 4];
+            if (chunksection != null) {
+                return chunksection.getType(blockposition.getX() & 15, blockposition.getY() & 15, blockposition.getZ() & 15);
+            }
+        }
+        return Blocks.AIR.getBlockData();
+     }
+    // Paper end
+	
 	// Paper start
     private IBlockData getCapturedBlockType(int x, int y, int z) {
         Iterator<BlockState> it = capturedBlockStates.iterator();
-- 
2.8.2.windows.1

