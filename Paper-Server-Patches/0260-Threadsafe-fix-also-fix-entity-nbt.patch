From 8aa7ba68dd6a36989d7244d0081dc2914222fd7f Mon Sep 17 00:00:00 2001
From: SotrForgotten <i@omc.hk>
Date: Fri, 22 Jul 2016 21:11:51 +0800
Subject: [PATCH] Threadsafe fix also fix entity nbt


diff --git a/src/main/java/net/minecraft/server/CrashReport.java b/src/main/java/net/minecraft/server/CrashReport.java
index 6f7eb62..07e8bb9 100644
--- a/src/main/java/net/minecraft/server/CrashReport.java
+++ b/src/main/java/net/minecraft/server/CrashReport.java
@@ -267,6 +267,10 @@ public class CrashReport {
 
             if (k < 0) {
                 System.out.println("Negative index in crash report handler (" + astacktraceelement.length + "/" + j + ")");
+				System.out.println("Torch debug - s: " + s);
+				System.out.println("Torch debug - i: " + i);
+				System.out.println("Torch debug - j: " + j);
+				System.out.println("Torch debug - k: " + k);
             }
 
             if (astacktraceelement != null && 0 <= k && k < astacktraceelement.length) {
diff --git a/src/main/java/net/minecraft/server/Entity.java b/src/main/java/net/minecraft/server/Entity.java
index ae90ba4..8da127f 100644
--- a/src/main/java/net/minecraft/server/Entity.java
+++ b/src/main/java/net/minecraft/server/Entity.java
@@ -406,7 +406,7 @@ public abstract class Entity implements ICommandListener, org.spigotmc.Optimized
             this.world.methodProfiler.b();
         }
 
-		us_task = new U_sub();
+		// us_task = new U_sub(); // Torch - removed to the head
         us_task.fork();
 		// Hose start
 		/*
@@ -455,9 +455,9 @@ public abstract class Entity implements ICommandListener, org.spigotmc.Optimized
     }
 	
 	// Hose start
-	U_sub us_task; // Hose - fork
+	U_sub us_task = new U_sub(); // Hose - fork // Torch - fix leak
+	U u_task = new U(); // Hose - fork // Torch - fix leak
 	public void U() {
-        U u_task = new U();
         u_task.fork();
     }
 	// Hose end
@@ -2139,8 +2139,8 @@ public abstract class Entity implements ICommandListener, org.spigotmc.Optimized
     }
 
     public void az() {
-        for (Entity e : this.passengers) {
-            e.stopRiding();
+        for (int i = this.passengers.size() - 1; i >= 0; --i) {
+            ((Entity) this.passengers.get(i)).stopRiding();
         }
 
     }
diff --git a/src/main/java/net/minecraft/server/EntityFallingBlock.java b/src/main/java/net/minecraft/server/EntityFallingBlock.java
index 7cf22fb..0dc7e12 100644
--- a/src/main/java/net/minecraft/server/EntityFallingBlock.java
+++ b/src/main/java/net/minecraft/server/EntityFallingBlock.java
@@ -8,6 +8,7 @@ import java.util.List;
 import javax.annotation.Nullable;
 
 import org.bukkit.craftbukkit.event.CraftEventFactory; // CraftBukkit
+import java.util.concurrent.RecursiveAction; // Torch
 
 public class EntityFallingBlock extends Entity {
 
@@ -56,8 +57,26 @@ public class EntityFallingBlock extends Entity {
     public boolean isInteractable() {
         return !this.dead;
     }
+	
+	/* // Torch start - Fork/Join
+	FallingTask task = new FallingTask();
+	public void m() {
+        task.fork(); // Fork task for 'm'
+	}
+	
+	class FallingTask extends RecursiveAction {
+		
+        FallingTask() {}
+		
+        @Override
+        protected void compute() {
+            m_();
+        }
+    }
 
-    public void m() {
+    public void m_() { // Original method
+	*/ // Torch end
+	public void m() {
         Block block = this.block.getBlock();
 
         if (this.block.getMaterial() == Material.AIR) {
diff --git a/src/main/java/net/minecraft/server/EntityInsentient.java b/src/main/java/net/minecraft/server/EntityInsentient.java
index e9af72c..d170e1b 100644
--- a/src/main/java/net/minecraft/server/EntityInsentient.java
+++ b/src/main/java/net/minecraft/server/EntityInsentient.java
@@ -398,21 +398,21 @@ public abstract class EntityInsentient extends EntityLiving {
         }
         // CraftBukkit end
         NBTTagList nbttaglist;
-		int i;
+        int i;
 
         if (nbttagcompound.hasKeyOfType("ArmorItems", 9)) {
             nbttaglist = nbttagcompound.getList("ArmorItems", 10);
 
-            for (ItemStack itemstack : this.bx) {
-                itemstack = ItemStack.createStack(itemstack.getTag());
+            for (i = 0; i < this.bx.length; ++i) {
+                this.bx[i] = ItemStack.createStack(nbttaglist.get(i));
             }
         }
 
         if (nbttagcompound.hasKeyOfType("HandItems", 9)) {
             nbttaglist = nbttagcompound.getList("HandItems", 10);
 
-            for (ItemStack itemstack : this.bw) {
-                itemstack = ItemStack.createStack(itemstack.getTag());
+            for (i = 0; i < this.bw.length; ++i) {
+                this.bw[i] = ItemStack.createStack(nbttaglist.get(i));
             }
         }
 
-- 
2.8.2.windows.1

