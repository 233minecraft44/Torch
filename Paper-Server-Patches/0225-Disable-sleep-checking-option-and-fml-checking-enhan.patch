From 6882d2b03456dc7d5e665b2b1a42fe34d5489014 Mon Sep 17 00:00:00 2001
From: SotrForgotten <i@omc.hk>
Date: Fri, 12 Aug 2016 23:32:28 +0800
Subject: [PATCH] Disable sleep checking option and fml checking enhanced


diff --git a/src/main/java/de/minetick/MigotConfig.java b/src/main/java/de/minetick/MigotConfig.java
index b5d87b0..7690504 100644
--- a/src/main/java/de/minetick/MigotConfig.java
+++ b/src/main/java/de/minetick/MigotConfig.java
@@ -1,5 +1,7 @@
 package de.minetick;
 
+import java.util.Arrays;
+import java.util.List;
 import java.io.File;
 import java.io.FileNotFoundException;
 import java.io.IOException;
@@ -43,10 +45,16 @@ public class MigotConfig {
 
 	// Settings - load
 	private void loadConfigContent() {
-		enabledAutoSave = configuration.getBoolean("auto-save", false);
+		enabledAutoSave = configuration.getBoolean("settings.auto-save", false);
 		enabledForkPing = configuration.getBoolean("settings.fork-ping", false);
-		enabledFMLMonitor = configuration.getBoolean("settings.enable-fml-monitor", false);
 		bungeeForwardingCompatible = configuration.getBoolean("settings.bungee-redirect-compatible", false);
+		
+		disableSleepChecking = configuration.getBoolean("world-settings.disable-sleep-checking", false);
+		
+		enabledFMLMonitor = configuration.getBoolean("fml.enable-fml-monitor", false);
+		disableMods = configuration.getStringList("fml.disabled-mods");
+		requisiteMods = configuration.getStringList("fml.requisite-mods");
+		kickInfo = configuration.getString("fml.kick-info", "Mod {MOD} is not allwoed in the server!");
 	}
 
 	private FileConfiguration loadConfig(File file) throws IOException, InvalidConfigurationException {
@@ -69,9 +77,18 @@ public class MigotConfig {
 	}
 
 	// Settings - values
+	// Auto save
 	public static boolean enabledAutoSave;
+	// Fork ping
 	public static boolean enabledForkPing;
-	public static boolean enabledFMLMonitor;
+	// Bungee redirect
 	public static boolean bungeeForwardingCompatible;
+	// FML monitor
+	public static boolean enabledFMLMonitor;
+	public static List<String> disableMods;
+	public static List<String> requisiteMods;
+	public static String kickInfo;
+	// Sleep checking
+	public static boolean disableSleepChecking;
 
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index f56463d..614847a 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -910,7 +910,9 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
 		FutureTask<?> entry;
 		int count = this.j.size();
 		while (count-- > 0 && (entry = this.j.poll()) != null) {
-			SystemUtils.a(entry, MinecraftServer.LOGGER);
+			synchronized(this) {
+				SystemUtils.a(entry, MinecraftServer.LOGGER);
+			}
 		}
 		// Spigot end
 		MinecraftTimings.minecraftSchedulerTimer.stopTiming(); // Paper
diff --git a/src/main/java/net/minecraft/server/PlayerConnection.java b/src/main/java/net/minecraft/server/PlayerConnection.java
index ff80e16..fa18fde 100644
--- a/src/main/java/net/minecraft/server/PlayerConnection.java
+++ b/src/main/java/net/minecraft/server/PlayerConnection.java
@@ -2498,8 +2498,7 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
 			TileEntitySign tileentitysign = (TileEntitySign) tileentity;
 
 			if (!tileentitysign.c() || tileentitysign.d() != this.player) {
-				this.minecraftServer
-						.warning("Player " + this.player.getName() + " just tried to change non-editable sign");
+				this.minecraftServer.warning("Player " + this.player.getName() + " just tried to change non-editable sign");
 				this.sendPacket(tileentity.getUpdatePacket()); // CraftBukkit
 				return;
 			}
@@ -2604,6 +2603,7 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
 		String result = "";
 		for (String name : mods.keySet()) {
 			result += name + ": " + mods.get(name) + "\n";
+			if (!this.progressMods(name)) { return result; }
 		}
 		return result;
 	}
@@ -2613,7 +2613,7 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
 		return str;
 	}
 
-	public void handshakeFML(PacketPlayInCustomPayload packet) {
+	private void handshakeFML(PacketPlayInCustomPayload packet) {
 		PlayerStatus.addPlayer(this.player.getName());
 		PacketDataSerializer data = packet.b();
 
@@ -2629,12 +2629,32 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
 		PlayerStatus.removePlayer(this.player.getName());
 	}
 
-	public void logOutput(final String format, final Object... args) {
+	private void logOutput(final String format, final Object... args) {
 		PlayerConnection.LOGGER.info(String.format(format, args));
 	}
 
-	public void infoOutput(String player) {
-		this.logOutput("Player %s status:\n" + "Mods:%s", player, this.formatMods(this.mods));
+	private void infoOutput(String player) {
+		this.logOutput("Player %s status:\n" + "Mod(s):%s", player, this.formatMods(this.mods));
+	}
+	
+	private boolean progressMods(String currentMod) {
+		for (String disableMod : MigotConfig.disableMods) {
+			// Strict mode
+			if (currentMod.contains(disableMod)) {
+				PlayerConnection.LOGGER.warn(this.player.getName() + " was kicked for using disable mod.");
+				this.disconnect(MigotConfig.kickInfo.replace("{MOD}", currentMod));
+				return false;
+			}
+		}
+		for (String requisiteMod : MigotConfig.requisiteMods) {
+			// Strict mode
+			if (!currentMod.contains(requisiteMod)) {
+				PlayerConnection.LOGGER.warn(this.player.getName() + " was kicked for not using requisite mod.");
+				this.disconnect(MigotConfig.kickInfo.replace("{MOD}", currentMod));
+				return false;
+			}
+		}
+		return true;
 	}
 	// Torch end
 
diff --git a/src/main/java/net/minecraft/server/WorldServer.java b/src/main/java/net/minecraft/server/WorldServer.java
index 828b9f0..77888d8 100644
--- a/src/main/java/net/minecraft/server/WorldServer.java
+++ b/src/main/java/net/minecraft/server/WorldServer.java
@@ -30,6 +30,8 @@ import com.google.common.collect.Maps;
 import com.google.common.collect.Queues;
 import com.google.common.util.concurrent.ListenableFuture;
 
+import de.minetick.MigotConfig;
+
 public class WorldServer extends World implements IAsyncTaskHandler {
 
 	private static final Logger a = LogManager.getLogger();
@@ -327,6 +329,8 @@ public class WorldServer extends World implements IAsyncTaskHandler {
 
 	@Override
 	public void everyoneSleeping() {
+		if (MigotConfig.disableSleepChecking) { return; }
+		
 		this.O = false;
 		if (!this.players.isEmpty()) {
 			int i = 0;
diff --git a/src/main/resources/configurations/migot.yml b/src/main/resources/configurations/migot.yml
index 7476173..c7428e6 100644
--- a/src/main/resources/configurations/migot.yml
+++ b/src/main/resources/configurations/migot.yml
@@ -3,8 +3,14 @@
 # 
 # ( GH: https://github.com/Poweruser/Migot )
 
-auto-save: false
 settings:
+  auto-save: false
   fork-ping: false
+  bungee-redirect-compatible: false
+world-settings:
+  disable-sleep-checking: false
+fml:
   enable-fml-monitor: false
-  bungee-redirect-compatible: false
\ No newline at end of file
+  disabled-mods: {}
+  requisite-mods: {}
+  kick-info: "Your mod(s) is not allowed on this server!"
\ No newline at end of file
-- 
2.8.2.windows.1

