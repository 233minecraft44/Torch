From 459fb616f0ce455d29427af1bb4e7ac0471e4d93 Mon Sep 17 00:00:00 2001
From: SotrForgotten <i@omc.hk>
Date: Tue, 12 Jul 2016 05:34:27 +0800
Subject: [PATCH] Do not Spam Hopper InventoryMoveItemEvents misc revert


diff --git a/src/main/java/net/minecraft/server/Chunk.java b/src/main/java/net/minecraft/server/Chunk.java
index ceaf88c..b5e2555 100644
--- a/src/main/java/net/minecraft/server/Chunk.java
+++ b/src/main/java/net/minecraft/server/Chunk.java
@@ -59,18 +59,6 @@ public class Chunk {
     private ConcurrentLinkedQueue<BlockPosition> y;
     public boolean d;public void setShouldUnload(boolean unload) { this.d = unload; } public boolean isUnloading() { return d; } // Paper // OBFHELPER
     protected gnu.trove.map.hash.TObjectIntHashMap<Class> entityCount = new gnu.trove.map.hash.TObjectIntHashMap<Class>(); // Spigot
-	
-	// Migot start
-    private boolean unloaded = false;
-
-    public boolean wasUnloaded() {
-        return this.unloaded;
-    }
-
-    public void markAsUnloaded() {
-        this.unloaded = true;
-    }
-    // Migot end
 
     // Paper start
     // Track the number of minecarts and items
diff --git a/src/main/java/net/minecraft/server/ChunkProviderServer.java b/src/main/java/net/minecraft/server/ChunkProviderServer.java
index fc124d6..24497d5 100644
--- a/src/main/java/net/minecraft/server/ChunkProviderServer.java
+++ b/src/main/java/net/minecraft/server/ChunkProviderServer.java
@@ -358,7 +358,6 @@ public class ChunkProviderServer implements IChunkProvider {
             }
         }
         // Moved from unloadChunks above
-		if (chunk != null) { chunk.markAsUnloaded(); } // Migot
         chunk.removeEntities();
         if (save) {
             this.saveChunk(chunk);
diff --git a/src/main/java/net/minecraft/server/IPlayerFileData.java b/src/main/java/net/minecraft/server/IPlayerFileData.java
index 62c1062..80ed342 100644
--- a/src/main/java/net/minecraft/server/IPlayerFileData.java
+++ b/src/main/java/net/minecraft/server/IPlayerFileData.java
@@ -1,7 +1,5 @@
 package net.minecraft.server;
 
-import java.util.List; // Paper
-import java.util.UUID; // Paper
 
 public interface IPlayerFileData {
 
@@ -10,10 +8,4 @@ public interface IPlayerFileData {
     NBTTagCompound load(EntityHuman entityhuman);
 
     String[] getSeenPlayers();
-	
-	List<UUID> getSeenPlayerUUIDs(); // Paper
-
-    NBTTagCompound getPlayerData(UUID id); // Paper
-
-    long getLastModified(UUID id); // Paper
 }
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index bd89917..a34c290 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -63,7 +63,6 @@ import org.bukkit.Bukkit;
 import org.bukkit.craftbukkit.CraftServer;
 // CraftBukkit end
 import co.aikar.timings.MinecraftTimings; // Paper
-import org.bukkit.craftbukkit.chunkio2.impl.CraftNBTStorage; // Paper
 
 public abstract class MinecraftServer implements Runnable, ICommandListener, IAsyncTaskHandler, IMojangStatistics {
 
@@ -274,11 +273,7 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
             worldsettings.setGeneratorSettings(s2);
 
             if (j == 0) {
-				// Paper - Start
-                IDataManager idatamanager = persistence == null ? 
-                        new ServerNBTManager(server.getWorldContainer(), s1, true, this.dataConverterManager) :
-                        new CraftNBTStorage(true, this.dataConverterManager, persistence);
-                // Paper - End
+				IDataManager idatamanager = new ServerNBTManager(server.getWorldContainer(), s1, true, this.dataConverterManager);
                 WorldData worlddata = idatamanager.getWorldData();
                 if (worlddata == null) {
                     worlddata = new WorldData(worldsettings, s1);
@@ -328,11 +323,7 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
                     }
                 }
 
-                // Paper - Start
-                IDataManager idatamanager = persistence == null ? 
-                        new ServerNBTManager(server.getWorldContainer(), name, true, this.dataConverterManager) :
-                        new CraftNBTStorage(true, this.dataConverterManager, persistence);
-                // Paper - End
+                IDataManager idatamanager = new ServerNBTManager(server.getWorldContainer(), name, true, this.dataConverterManager);
                 // world =, b0 to dimension, s1 to name, added Environment and gen
                 WorldData worlddata = idatamanager.getWorldData();
                 if (worlddata == null) {
diff --git a/src/main/java/net/minecraft/server/TileEntityFurnace.java b/src/main/java/net/minecraft/server/TileEntityFurnace.java
index 8dbfcc0..e12a8ed 100644
--- a/src/main/java/net/minecraft/server/TileEntityFurnace.java
+++ b/src/main/java/net/minecraft/server/TileEntityFurnace.java
@@ -252,7 +252,7 @@ public class TileEntityFurnace extends TileEntityContainer implements ITickable,
             return false;
         } else {
             ItemStack itemstack = RecipesFurnace.getInstance().getResult(this.items[0]);
-			if(!this.world.isLoaded(this.position) || ((WorldServer) this.world).chunkProviderServer.unloadQueue.contains(this.position.getX() >> 4, this.position.getZ() >> 4)) { return false; } // Migot
+			if(!this.world.isLoaded(this.position)) { return false; } // Migot
 
             // CraftBukkit - consider resultant count instead of current count
             return itemstack == null ? false : (this.items[2] == null ? true : (!this.items[2].doMaterialsMatch(itemstack) ? false : (this.items[2].count + itemstack.count <= this.getMaxStackSize() && this.items[2].count < this.items[2].getMaxStackSize() ? true : this.items[2].count + itemstack.count <= itemstack.getMaxStackSize())));
diff --git a/src/main/java/net/minecraft/server/TileEntityHopper.java b/src/main/java/net/minecraft/server/TileEntityHopper.java
index 45c134b..782a5c6 100644
--- a/src/main/java/net/minecraft/server/TileEntityHopper.java
+++ b/src/main/java/net/minecraft/server/TileEntityHopper.java
@@ -47,6 +47,41 @@ public class TileEntityHopper extends TileEntityLootable implements IHopper, ITi
         maxStack = size;
     }
     // CraftBukkit end
+	
+	// Migot start
+    private static int doesInventoryHaveEnoughSpaceForItem(IInventory iinventory, ItemStack itemstack, EnumDirection enumdirection) {
+        if (iinventory instanceof IWorldInventory && enumdirection != null) {
+            IWorldInventory iworldinventory = (IWorldInventory) iinventory;
+            int[] possibleSlots = iworldinventory.getSlotsForFace(enumdirection);
+            for(int i = 0; i < possibleSlots.length; i++) {
+                int slotId = possibleSlots[i];
+                if(a(iinventory, itemstack, slotId, enumdirection)) {
+                    ItemStack slot = iinventory.getItem(slotId);
+                    if(slot == null || a(slot, itemstack)) {
+                        return slotId;
+                    }
+                }
+            }
+        } else {
+            int size = iinventory.getSize();
+            for(int i = 0; i < size; i++) {
+                if(a(iinventory, itemstack, i, enumdirection)) {
+                    ItemStack slot = iinventory.getItem(i);
+                    if(slot == null || a(slot, itemstack)) {
+                        return i;
+                    }
+                }
+            }
+        }
+        return -1;
+    }
+
+    private static int checkForPossibleInventorySlot(IInventory iinventory, ItemStack itemstack, EnumDirection enumdirection) {
+        ItemStack copyOfItemBeingProcessed = itemstack.cloneItemStack();
+        copyOfItemBeingProcessed.count = 1;
+        return doesInventoryHaveEnoughSpaceForItem(iinventory, copyOfItemBeingProcessed, enumdirection);
+    }
+    // Migot end
 
     public TileEntityHopper() {}
 
@@ -259,6 +294,13 @@ public class TileEntityHopper extends TileEntityLootable implements IHopper, ITi
                     if (this.getItem(i) != null) {
                         ItemStack itemstack = this.getItem(i).cloneItemStack();
                         // ItemStack itemstack1 = addItem(iinventory, this.splitStack(i, 1), enumdirection);
+						
+						// Migot start
+                        int possibleInventorySlot = checkForPossibleInventorySlot(iinventory, itemstack, enumdirection);
+                        if(possibleInventorySlot < 0) {
+                            continue;
+                        }
+                        // Migot end
 
                         // CraftBukkit start - Call event when pushing items into other inventories
                         CraftItemStack oitemstack = CraftItemStack.asCraftMirror(this.splitStack(i, world.spigotConfig.hopperAmount)); // Spigot
@@ -287,7 +329,7 @@ public class TileEntityHopper extends TileEntityLootable implements IHopper, ITi
                             stack = oitemstack;
                         }
                         int origCount = stack.getAmount(); // Spigot
-                        ItemStack itemstack1 = addItem(iinventory, CraftItemStack.asNMSCopy(stack), enumdirection);
+                        ItemStack itemstack1 = addItem(iinventory, possibleInventorySlot, CraftItemStack.asNMSCopy(stack), enumdirection); // Migot
                         // TacoSpigot end
 
                         if (itemstack1 == null || itemstack1.count == 0) {
@@ -416,6 +458,14 @@ public class TileEntityHopper extends TileEntityLootable implements IHopper, ITi
             ItemStack itemstack1 = itemstack.cloneItemStack();
             // ItemStack itemstack2 = addItem(ihopper, iinventory.splitStack(i, 1), (EnumDirection) null);
             // CraftBukkit start - Call event on collection of items from inventories into the hopper
+			
+			// Migot start
+            int possibleInventorySlot = checkForPossibleInventorySlot(ihopper, iinventory.getItem(i), null);
+            if(possibleInventorySlot < 0) {
+                return false;
+            }
+            // Migot end
+			
             CraftItemStack oitemstack = CraftItemStack.asCraftMirror(iinventory.splitStack(i, ihopper.getWorld().spigotConfig.hopperAmount)); // Spigot
             // TacoSpigot start - option to disable event
             final org.bukkit.inventory.ItemStack stack;
@@ -449,7 +499,7 @@ public class TileEntityHopper extends TileEntityLootable implements IHopper, ITi
                 stack = oitemstack;
             }
             int origCount = stack.getAmount(); // Spigot
-            ItemStack itemstack2 = addItem(ihopper, CraftItemStack.asNMSCopy(stack), null);
+			ItemStack itemstack2 = addItem(ihopper, possibleInventorySlot, CraftItemStack.asNMSCopy(stack), null); // Migot
             // TacoSpigot end
 
             if (itemstack2 == null || itemstack2.count == 0) {
@@ -475,6 +525,12 @@ public class TileEntityHopper extends TileEntityLootable implements IHopper, ITi
         if (entityitem == null) {
             return false;
         } else {
+			// Migot start
+            int possibleInventorySlot = checkForPossibleInventorySlot(iinventory, entityitem.getItemStack(), null);
+            if(possibleInventorySlot < 0) {
+                return false;
+            }
+            // Migot end
             // CraftBukkit start
             InventoryPickupItemEvent event = new InventoryPickupItemEvent(iinventory.getOwner().getInventory(), (org.bukkit.entity.Item) entityitem.getBukkitEntity());
             entityitem.world.getServer().getPluginManager().callEvent(event);
@@ -483,7 +539,7 @@ public class TileEntityHopper extends TileEntityLootable implements IHopper, ITi
             }
             // CraftBukkit end
             ItemStack itemstack = entityitem.getItemStack().cloneItemStack();
-            ItemStack itemstack1 = addItem(iinventory, itemstack, (EnumDirection) null);
+            ItemStack itemstack1 = addItem(iinventory, possibleInventorySlot, itemstack, null); // Migot
 
             if (itemstack1 != null && itemstack1.count != 0) {
                 entityitem.setItemStack(itemstack1);
@@ -497,9 +553,21 @@ public class TileEntityHopper extends TileEntityLootable implements IHopper, ITi
     }
 
     public static ItemStack addItem(IInventory iinventory, ItemStack itemstack, @Nullable EnumDirection enumdirection) {
+		// Migot start
+        return addItem(iinventory, -1, itemstack, enumdirection);
+    }
+
+    public static ItemStack addItem(IInventory iinventory, int possibleInventorySlot, ItemStack itemstack, @Nullable EnumDirection enumdirection) {
+    // Migot end
         if (iinventory instanceof IWorldInventory && enumdirection != null) {
             IWorldInventory iworldinventory = (IWorldInventory) iinventory;
             int[] aint = iworldinventory.getSlotsForFace(enumdirection);
+			
+			// Migot start
+            if(possibleInventorySlot >= 0 && possibleInventorySlot < aint.length) {
+                itemstack = c(iinventory, itemstack, possibleInventorySlot, enumdirection);
+            }
+            // Migot end
 
             for (int i = 0; i < aint.length && itemstack != null && itemstack.count > 0; ++i) {
                 itemstack = c(iinventory, itemstack, aint[i], enumdirection);
@@ -507,7 +575,7 @@ public class TileEntityHopper extends TileEntityLootable implements IHopper, ITi
         } else {
             int j = iinventory.getSize();
 
-            for (int k = 0; k < j && itemstack != null && itemstack.count > 0; ++k) {
+			for (int k = Math.max(possibleInventorySlot, 0); k < j && itemstack != null && itemstack.count > 0; ++k) { // Migot - set start index
                 itemstack = c(iinventory, itemstack, k, enumdirection);
             }
         }
@@ -638,7 +706,7 @@ public class TileEntityHopper extends TileEntityLootable implements IHopper, ITi
     }
 
     private static boolean a(ItemStack itemstack, ItemStack itemstack1) {
-        return itemstack.getItem() != itemstack1.getItem() ? false : (itemstack.getData() != itemstack1.getData() ? false : (itemstack.count > itemstack.getMaxStackSize() ? false : ItemStack.equals(itemstack, itemstack1)));
+        return itemstack.getItem() != itemstack1.getItem() ? false : (itemstack.getData() != itemstack1.getData() ? false : (itemstack.count >= itemstack.getMaxStackSize() ? false : ItemStack.equals(itemstack, itemstack1))); // Migot - can not merge when the itemcount is already >= getMaxStackSize
     }
 
     public double E() {
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index fc5a1b4..a46e33b 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -160,13 +160,6 @@ public abstract class World implements IBlockAccess {
 	// Paper - Start Peristence counters.
     private long nextPersistenceCountersTick = System.nanoTime();
     // Paper - End
-	
-	// Migot start
-    private Chunk dummyChunk = new EmptyChunk(this, Integer.MIN_VALUE, Integer.MIN_VALUE);
-    private Chunk lastChunkAccessed = dummyChunk;
-    final Object chunkLock = new Object();
-    public ChunkProviderServer chunkProviderServer; // moved here from WorldServer
-    // Migot end
 
     public CraftWorld getWorld() {
         return this.world;
@@ -373,31 +366,9 @@ public abstract class World implements IBlockAccess {
     public Chunk getChunkAtWorldCoords(BlockPosition blockposition) {
         return this.getChunkAt(blockposition.getX() >> 4, blockposition.getZ() >> 4);
     }
-	
-	// Migot start
-    private void cacheLastChunkAccess(Chunk foundChunk) {
-        this.lastChunkAccessed = ((foundChunk == null || foundChunk.isEmpty() || foundChunk.wasUnloaded()) ? this.dummyChunk : foundChunk);
-    }
-    // Migot end
 
     public Chunk getChunkAt(int i, int j) {
-        // Migot start
-        Chunk last = this.lastChunkAccessed;
-        if(last.a(i,j) && !last.wasUnloaded()) {
-            return last;
-        } else {
-            Chunk result = null;
-            if(this.chunkProviderServer.isChunkLoaded(i, j)) {
-                result = this.chunkProviderServer.getChunkAt(i, j);
-            } else {
-                synchronized (this.chunkLock) {
-                    result = this.chunkProvider.getOrCreateChunk(i, j);
-                }
-            }
-            this.cacheLastChunkAccess(result);
-            return result;
-        }
-        // Migot end
+       return this.chunkProvider.getChunkAt(i, j);
     }
 
     public boolean setTypeAndData(BlockPosition blockposition, IBlockData iblockdata, int i) {
diff --git a/src/main/java/net/minecraft/server/WorldNBTStorage.java b/src/main/java/net/minecraft/server/WorldNBTStorage.java
index cebe38d..6bb3d3f 100644
--- a/src/main/java/net/minecraft/server/WorldNBTStorage.java
+++ b/src/main/java/net/minecraft/server/WorldNBTStorage.java
@@ -214,7 +214,7 @@ public class WorldNBTStorage implements IDataManager, IPlayerFileData {
     }
 
     // CraftBukkit start
-    public NBTTagCompound getPlayerData(UUID s) { // Paper - String -> UUID.
+    public NBTTagCompound getPlayerData(String s) {
         try {
             File file1 = new File(this.playerDir, s + ".dat");
 
@@ -306,7 +306,6 @@ public class WorldNBTStorage implements IDataManager, IPlayerFileData {
     // CraftBukkit end
 	
 	// Paper start
-    @Override
     public List<UUID> getSeenPlayerUUIDs() {
         return Arrays.asList(playerDir.list((dir, s) -> s.endsWith(".dat")))
                 .stream()
@@ -321,7 +320,6 @@ public class WorldNBTStorage implements IDataManager, IPlayerFileData {
                 .collect(Collectors.toList());
     }
 
-    @Override
     public long getLastModified(UUID id) {
         File file = new File(playerDir, id + ".dat");
         if (file.exists()) {
diff --git a/src/main/java/net/minecraft/server/WorldServer.java b/src/main/java/net/minecraft/server/WorldServer.java
index c172590..298406e 100644
--- a/src/main/java/net/minecraft/server/WorldServer.java
+++ b/src/main/java/net/minecraft/server/WorldServer.java
@@ -1211,7 +1211,7 @@ public class WorldServer extends World implements IAsyncTaskHandler {
     }
 
     public ChunkProviderServer getChunkProviderServer() {
-        return net.minecraft.server.World.chunkProviderServer;
+        return (ChunkProviderServer) super.getChunkProvider();
     }
 
     public Explosion createExplosion(@Nullable Entity entity, double d0, double d1, double d2, float f, boolean flag, boolean flag1) {
diff --git a/src/main/java/org/bukkit/OfflinePlayer.java b/src/main/java/org/bukkit/OfflinePlayer.java
index f4090cb..d4418d3 100644
--- a/src/main/java/org/bukkit/OfflinePlayer.java
+++ b/src/main/java/org/bukkit/OfflinePlayer.java
@@ -8,8 +8,6 @@ import org.bukkit.entity.AnimalTamer;
 import org.bukkit.entity.Player;
 import org.bukkit.permissions.ServerOperator;
 
-import com.destroystokyo.paper.profile.AccountProfile; // Paper
-
 public interface OfflinePlayer extends ServerOperator, AnimalTamer, ConfigurationSerializable {
 
     /**
@@ -156,14 +154,5 @@ public interface OfflinePlayer extends ServerOperator, AnimalTamer, Configuratio
     @Override
     int hashCode();
     // Paper end
-	
-	// Paper start
-    /**
-     * Return this player's profile
-     *
-     * @return this player's profile
-     */
-    public AccountProfile getAccount();
-    // Paper end
 
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftOfflinePlayer.java b/src/main/java/org/bukkit/craftbukkit/CraftOfflinePlayer.java
index 5ecadc2..40697e9 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftOfflinePlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftOfflinePlayer.java
@@ -15,38 +15,27 @@ import org.bukkit.Bukkit;
 import org.bukkit.Location;
 import org.bukkit.OfflinePlayer;
 import org.bukkit.Server;
+import net.minecraft.server.WorldNBTStorage;
+import java.io.File;
+import net.minecraft.server.EntityPlayer;
 import org.bukkit.configuration.serialization.ConfigurationSerializable;
 import org.bukkit.configuration.serialization.SerializableAs;
 import org.bukkit.entity.Player;
 import org.bukkit.metadata.MetadataValue;
 import org.bukkit.plugin.Plugin;
-import net.minecraft.server.IPlayerFileData; // Paper
 
 @SerializableAs("Player")
 public class CraftOfflinePlayer implements OfflinePlayer, ConfigurationSerializable {
     private final GameProfile profile;
     private final CraftServer server;
-    private final IPlayerFileData storage; // Paper
+    private final WorldNBTStorage storage;
 
     protected CraftOfflinePlayer(CraftServer server, GameProfile profile) {
         this.server = server;
         this.profile = profile;
-        this.storage = server.console.worlds.get(0).getDataManager().getPlayerFileData(); // Paper
+        this.storage = (WorldNBTStorage) (server.console.worlds.get(0).getDataManager());
 		// Paper start - store our profile
-        this.paperProfile = ProfileUtils.toPaper(profile);
     }
-    private final AccountProfile paperProfile;
-
-    protected CraftOfflinePlayer(CraftServer server, AccountProfile profile) {
-        this.server = server;
-        this.profile = ProfileUtils.toMojang(profile);
-        this.storage = server.console.worlds.get(0).getDataManager().getPlayerFileData(); // Paper
-        this.paperProfile = profile;
-    }
-
-    public AccountProfile getAccount() {
-        return paperProfile;
-     }
 
     public GameProfile getProfile() {
         return profile;
@@ -180,9 +169,13 @@ public class CraftOfflinePlayer implements OfflinePlayer, ConfigurationSerializa
         hash = 97 * hash + (this.getUniqueId() != null ? this.getUniqueId().hashCode() : 0);
         return hash;
     }
+	
+	private File getDataFile() {
+        return new File(storage.getPlayerDir(), getUniqueId() + ".dat");
+    }
 
     private NBTTagCompound getData() {
-        return storage.getPlayerData(getUniqueId()); // Paper
+        return storage.getPlayerData(getUniqueId().toString());
     }
 
     private NBTTagCompound getBukkitData() {
@@ -208,7 +201,8 @@ public class CraftOfflinePlayer implements OfflinePlayer, ConfigurationSerializa
             if (data.hasKey("firstPlayed")) {
                 return data.getLong("firstPlayed");
             } else {
-                return storage.getLastModified(getUniqueId()); // Paper
+                File file = getDataFile();
+                return file.lastModified();
             }
         } else {
             return 0;
@@ -225,7 +219,8 @@ public class CraftOfflinePlayer implements OfflinePlayer, ConfigurationSerializa
             if (data.hasKey("lastPlayed")) {
                 return data.getLong("lastPlayed");
             } else {
-                return storage.getLastModified(getUniqueId()); // Paper
+                File file = getDataFile();
+                return file.lastModified();
             }
         } else {
             return 0;
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 263f4c0..17076ca 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -24,7 +24,6 @@ import com.destroystokyo.paper.PaperConfig;
 import java.util.stream.Collectors; // Paper
 import org.bukkit.craftbukkit.chunkio2.WorldPersistence;
 import org.bukkit.craftbukkit.chunkio2.anvil.AnvilWorldPersistenceFactory;
-import org.bukkit.craftbukkit.chunkio2.impl.CraftNBTStorage;
 
 import javax.imageio.ImageIO;
 import com.destroystokyo.paper.profile.EventProfileLookup;
@@ -922,13 +921,7 @@ public final class CraftServer implements Server {
         } while(used);
         boolean hardcore = false;
 
-        // Paper Start
-        org.bukkit.craftbukkit.chunkio2.WorldPersistence persistence = getPersistence(name, creator.environment(), false);
-
-        IDataManager sdm = persistence == null ? 
-                new ServerNBTManager(getWorldContainer(), name, true, getHandle().getServer().getDataConverterManager()) :
-                new CraftNBTStorage(false, getHandle().getServer().getDataConverterManager(), persistence);
-        // Paper Endver().getDataConverterManager());
+        IDataManager sdm = new ServerNBTManager(getWorldContainer(), name, true, getHandle().getServer().getDataConverterManager());
         WorldData worlddata = sdm.getWorldData();
         WorldSettings worldSettings = null;
         if (worlddata == null) {
@@ -1383,11 +1376,11 @@ public final class CraftServer implements Server {
         OfflinePlayer result = getPlayerExact(name);
         if (result == null) {
             // Spigot Start
-            AccountProfile profile = null;
+            GameProfile profile = null;
             // Only fetch an online UUID in online mode
             if ( MinecraftServer.getServer().getOnlineMode() || org.spigotmc.SpigotConfig.bungee )
             {
-                profile = getProfileLookup().lookup(name);
+                profile = console.getUserCache().getProfile( name );
             }
             // Spigot end
             if (profile == null) {
@@ -1395,8 +1388,7 @@ public final class CraftServer implements Server {
                 result = getOfflinePlayer(new GameProfile(UUID.nameUUIDFromBytes(("OfflinePlayer:" + name).getBytes(Charsets.UTF_8)), name));
             } else {
                 // Use the GameProfile even when we get a UUID so we ensure we still have a name
-                result = new CraftOfflinePlayer(this, profile);
-                offlinePlayers.put(result.getUniqueId(), result);
+                result = getOfflinePlayer(profile);
             }
         } else {
             offlinePlayers.remove(result.getUniqueId());
@@ -1413,7 +1405,7 @@ public final class CraftServer implements Server {
         if (result == null) {
             result = offlinePlayers.get(id);
             if (result == null) {
-                result = new CraftOfflinePlayer(this, getProfileLookup().lookup(id)); // Paper - do lookup
+                result = new CraftOfflinePlayer(this, new GameProfile(id, null));
                 offlinePlayers.put(id, result);
             }
         } else {
@@ -1552,13 +1544,21 @@ public final class CraftServer implements Server {
 
     @Override
     public OfflinePlayer[] getOfflinePlayers() {
-        // Paper Start
-        Set<OfflinePlayer> result = 
-                console.worlds.get(0).getDataManager().getPlayerFileData().getSeenPlayerUUIDs().stream()
-                .map((id) -> getOfflinePlayer(id))
-                .collect(Collectors.toSet());
-        return result.toArray(new OfflinePlayer[result.size()]);
-        // Paper End
+        WorldNBTStorage storage = (WorldNBTStorage) console.worlds.get(0).getDataManager();
+        String[] files = storage.getPlayerDir().list(new DatFileFilter());
+        Set<OfflinePlayer> players = new HashSet<OfflinePlayer>();
+
+        for (String file : files) {
+            try {
+                players.add(getOfflinePlayer(UUID.fromString(file.substring(0, file.length() - 4))));
+            } catch (IllegalArgumentException ex) {
+                // Who knows what is in this directory, just ignore invalid files
+            }
+        }
+
+        players.addAll(getOnlinePlayers());
+
+        return players.toArray(new OfflinePlayer[players.size()]);
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
index 4b6c530..d65ddab 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
@@ -217,7 +217,6 @@ public class CraftWorld implements World {
         if (chunk == null) {
 			return true;
 		}
-		chunk.markAsUnloaded(); // Migot
 		// If chunk had previously been queued to save, must do save to avoid loss of that data
         return world.getChunkProviderServer().unloadChunk(chunk, chunk.mustSave || save);
     }
@@ -1234,7 +1233,7 @@ public class CraftWorld implements World {
     }
 
     public File getWorldFolder() {
-        return world.getDataManager().getDirectory(); // Paper
+        return ((WorldNBTStorage) world.getDataManager()).getDirectory();
     }
 
     public void sendPluginMessage(Plugin source, String channel, byte[] message) {
diff --git a/src/main/java/org/bukkit/craftbukkit/chunkio2/impl/CraftNBTStorage.java b/src/main/java/org/bukkit/craftbukkit/chunkio2/impl/CraftNBTStorage.java
index 9b4572c..4cf7fa8 100644
--- a/src/main/java/org/bukkit/craftbukkit/chunkio2/impl/CraftNBTStorage.java
+++ b/src/main/java/org/bukkit/craftbukkit/chunkio2/impl/CraftNBTStorage.java
@@ -145,7 +145,6 @@ public class CraftNBTStorage implements IDataManager, IPlayerFileData {
         return nbttagcompound;
     }
 
-    @Override
     public NBTTagCompound getPlayerData(UUID s) {
         NBTDataInputConsumer result = new NBTDataInputConsumer();
         persistence.getPlayerPersistence().loadPlayer(null, s, result);
@@ -186,12 +185,10 @@ public class CraftNBTStorage implements IDataManager, IPlayerFileData {
         return persistence.getUUID();
     }
 
-    @Override
     public List<UUID> getSeenPlayerUUIDs() {
         return persistence.getPlayerPersistence().getPlayerUUIDs();
     }
 
-    @Override
     public long getLastModified(UUID id) {
         return persistence.getPlayerPersistence().getLastModified(id);
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index 90adf99..59e77a1 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -22,8 +22,6 @@ import java.util.logging.Level;
 import java.util.logging.Logger;
 import net.md_5.bungee.api.chat.BaseComponent;
 
-import com.destroystokyo.paper.profile.AccountProfile; // Paper
-
 import net.minecraft.server.*;
 import net.minecraft.server.PacketPlayOutTitle.EnumTitleAction;
 
@@ -84,13 +82,6 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
         firstPlayed = System.currentTimeMillis();
     }
-	
-	// Paper start
-    @Override
-    public AccountProfile getAccount() {
-        return getHandle().getBukkitProfile();
-    }
-    // Paper end
 
     public GameProfile getProfile() {
         return getHandle().getProfile();
diff --git a/src/main/java/org/bukkit/entity/Player.java b/src/main/java/org/bukkit/entity/Player.java
index 76392a0..0ead18d 100644
--- a/src/main/java/org/bukkit/entity/Player.java
+++ b/src/main/java/org/bukkit/entity/Player.java
@@ -22,8 +22,6 @@ import org.bukkit.map.MapView;
 import org.bukkit.plugin.messaging.PluginMessageRecipient;
 import org.bukkit.scoreboard.Scoreboard;
 
-import com.destroystokyo.paper.profile.AccountProfile; // Paper
-
 /**
  * Represents a player, connected or not
  */
@@ -1658,14 +1656,4 @@ public interface Player extends HumanEntity, Conversable, CommandSender, Offline
 
     Spigot spigot();
     // Spigot end
-	
-	// Paper start
-    /**
-     * Return this player's profile
-     *
-     * @return this player's profile
-     */
-    @Override
-    public AccountProfile getAccount();
-    // Paper end
 }
-- 
2.8.2.windows.1

