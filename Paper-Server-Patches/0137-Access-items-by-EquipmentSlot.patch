From 44a884d0cce4edcf32077c49b5998563f124f267 Mon Sep 17 00:00:00 2001
From: SotrForgotten <i@omc.hk>
Date: Sat, 16 Jul 2016 06:22:01 +0800
Subject: [PATCH] Access items by EquipmentSlot


diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryPlayer.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryPlayer.java
index e2aa794..393aa31 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryPlayer.java
@@ -6,6 +6,7 @@ import net.minecraft.server.EntityPlayer;
 import net.minecraft.server.PacketPlayOutHeldItemSlot;
 import net.minecraft.server.PacketPlayOutSetSlot;
 import net.minecraft.server.PlayerInventory;
+import org.bukkit.inventory.EquipmentSlot;
 
 import org.apache.commons.lang.Validate;
 import org.bukkit.craftbukkit.entity.CraftPlayer;
@@ -60,6 +61,32 @@ public class CraftInventoryPlayer extends CraftInventory implements org.bukkit.i
     public void setItemInHand(ItemStack stack) {
         setItemInMainHand(stack);
     }
+	
+	@Override
+    public ItemStack getItem(EquipmentSlot slot) {
+        switch(slot) {
+            case HAND: return getItemInMainHand();
+            case OFF_HAND: return getItemInOffHand();
+            case HEAD: return getHelmet();
+            case CHEST: return getChestplate();
+            case LEGS: return getLeggings();
+            case FEET: return getBoots();
+        }
+        throw new UnsupportedOperationException(slot.name());
+    }
+
+    @Override
+    public void setItem(EquipmentSlot slot, ItemStack stack) {
+        switch(slot) {
+            case HAND: setItemInMainHand(stack); return;
+            case OFF_HAND: setItemInOffHand(stack); return;
+            case HEAD: setHelmet(stack); return;
+            case CHEST: setChestplate(stack); return;
+            case LEGS: setLeggings(stack); return;
+            case FEET: setBoots(stack); return;
+        }
+        throw new UnsupportedOperationException(slot.name());
+    }
 
     @Override
     public void setItem(int index, ItemStack item) {
@@ -67,34 +94,7 @@ public class CraftInventoryPlayer extends CraftInventory implements org.bukkit.i
         if (this.getHolder() == null) return;
         EntityPlayer player = ((CraftPlayer) this.getHolder()).getHandle();
         if (player.playerConnection == null) return;
-        // PacketPlayOutSetSlot places the items differently than setItem()
-        //
-        // Between, and including, index 9 (the first index outside of the hotbar) and index 35 (the last index before
-        // armor slots) both PacketPlayOutSetSlot and setItem() places the items in the player's inventory the same way.
-        // Index 9 starts at the upper left corner of the inventory and moves to the right as it increases. When it
-        // reaches the end of the line it goes back to the left side of the new line in the inventory. Basically, it
-        // follows the path your eyes would follow as you read a book.
-        //
-        // The player's hotbar is indexed 0-8 in setItem(). The order goes: 0-8 hotbar, 9-35 normal inventory, 36 boots,
-        // 37 leggings, 38 chestplate, and 39 helmet. For indexes > 39 an ArrayIndexOutOfBoundsException will be thrown.
-        //
-        // PacketPlayOutSetSlot works very differently. Slots 0-8 are as follows: 0 crafting output, 1-4 crafting input,
-        // 5 helmet, 6 chestplate, 7 leggings, and 8 boots. Then, 9-35 work exactly the same as setItem(). The hotbar
-        // for PacketPlayOutSetSlot starts at index 36, and continues to index 44. Items placed where index is < 0 or
-        // > 44 have no action. Basically, the upper part of the player's inventory (crafting area and armor slots) is
-        // the first "row" of 9 slots for PacketPlayOutSetSlot. From there the rows work as normal, from left to right
-        // all the way down, including the hotbar.
-        //
-        // With this in mind, we have to modify the index we give PacketPlayOutSetSlot to match the index we intended
-        // with setItem(). First, if the index is 0-8, we need to add 36, or 4 rows worth of slots, to the index. This
-        // will push the item down to the correct spot in the hotbar.
-        //
-        // Now when index is > 35 (if index > 39 an ArrayIndexOutOfBoundsException will be thrown, so we need not worry
-        // about it) then we need to reset the index, and then count backwards  from the "top" of the inventory. That is
-        // to say, we first find (index - 36), which will give us the index required for the armor slots. Now, we need
-        // to reverse the order of the index from 8. That means we need 0 to correspond to 8, 1 to correspond to 7,
-        // 2 to correspond to 6, and 3 to correspond to 5. We do this simply by taking the result of (index - 36) and
-        // subtracting that value from 8.
+
         if (index < PlayerInventory.getHotbarSize()) {
             index += 36;
         } else if (index > 39) {
-- 
2.8.2.windows.1

