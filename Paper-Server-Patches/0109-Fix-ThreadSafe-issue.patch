From fb6332ff1e5e97d24a557764597c4f177e17bfb2 Mon Sep 17 00:00:00 2001
From: SotrForgotten <i@omc.hk>
Date: Mon, 11 Jul 2016 16:53:27 +0800
Subject: [PATCH] Fix ThreadSafe issue


diff --git a/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java b/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java
index 6e50e8d..09249c8 100644
--- a/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java
+++ b/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java
@@ -164,7 +164,7 @@ public class PaperWorldConfig {
 
     public boolean queueLightUpdates;
     private void queueLightUpdates() {
-        queueLightUpdates = getBoolean("queue-light-updates", false);
+        queueLightUpdates = getBoolean("queue-light-updates", true); // Torch
         log("Lighting Queue enabled: " + queueLightUpdates);
     }
 
@@ -207,8 +207,8 @@ public class PaperWorldConfig {
     public boolean fastDrainLava;
     public boolean fastDrainWater;
     private void fastDrain() {
-        fastDrainLava = getBoolean("fast-drain.lava", false);
-        fastDrainWater = getBoolean("fast-drain.water", false);
+        fastDrainLava = getBoolean("fast-drain.lava", true); // Torch
+        fastDrainWater = getBoolean("fast-drain.water", true); // Torch
     }
 
     public int lavaFlowSpeedNormal;
diff --git a/src/main/java/net/minecraft/server/Entity.java b/src/main/java/net/minecraft/server/Entity.java
index ff739cf..af13bb1 100644
--- a/src/main/java/net/minecraft/server/Entity.java
+++ b/src/main/java/net/minecraft/server/Entity.java
@@ -438,6 +438,7 @@ public abstract class Entity implements ICommandListener {
     }
 	
 	// Hose start
+	U_sub us_task; // Hose - fork
 	public void U() {
         U u_task = new U();
         u_task.fork();
diff --git a/src/main/java/net/minecraft/server/EntityTrackerEntry.java b/src/main/java/net/minecraft/server/EntityTrackerEntry.java
index a783ecb..2afdd77 100644
--- a/src/main/java/net/minecraft/server/EntityTrackerEntry.java
+++ b/src/main/java/net/minecraft/server/EntityTrackerEntry.java
@@ -12,6 +12,7 @@ import org.apache.logging.log4j.Logger;
 // CraftBukkit start
 import org.bukkit.entity.Player;
 import org.bukkit.event.player.PlayerVelocityEvent;
+import java.util.concurrent.ConcurrentHashMap;
 // CraftBukkit end
 
 public class EntityTrackerEntry {
@@ -44,7 +45,7 @@ public class EntityTrackerEntry {
     // Paper start
     // Replace trackedPlayers Set with a Map. The value is true until the player receives
     // their first update (which is forced to have absolute coordinates), false afterward.
-    public java.util.Map<EntityPlayer, Boolean> trackedPlayerMap = new java.util.HashMap<EntityPlayer, Boolean>();
+    public java.util.Map<EntityPlayer, Boolean> trackedPlayerMap = new ConcurrentHashMap<EntityPlayer, Boolean>();
     public Set<EntityPlayer> trackedPlayers = trackedPlayerMap.keySet();
     // Paper end
 
diff --git a/src/main/java/net/minecraft/server/PlayerChunkMap.java b/src/main/java/net/minecraft/server/PlayerChunkMap.java
index 0428602..9255b96 100644
--- a/src/main/java/net/minecraft/server/PlayerChunkMap.java
+++ b/src/main/java/net/minecraft/server/PlayerChunkMap.java
@@ -26,7 +26,7 @@ import org.spigotmc.AsyncCatcher;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Queues;
 import java.util.Map;
-import java.util.concurrent.ConcurrentLinkedDeque;
+import java.util.concurrent.ConcurrentLinkedQeque;
 import java.util.Queue;
 
 public class PlayerChunkMap {
@@ -56,8 +56,8 @@ public class PlayerChunkMap {
 	private final Map<Long, PlayerChunk> e = Maps.newConcurrentMap();
     // private final Set<PlayerChunk> f = AsyncCatcher.catchAsyncUsage(Sets.newHashSet(), "set access PlayerChunkMap.f");
 	private final Set<PlayerChunk> f = Sets.newConcurrentHashSet();
-    private final List<PlayerChunk> g = Lists.ConcurrentLinkedDeque();
-    private final List<PlayerChunk> h = Lists.ConcurrentLinkedDeque();
+    private final List<PlayerChunk> g = new ConcurrentLinkedQueue<PlayerChunk>();
+    private final List<PlayerChunk> h = new ConcurrentLinkedQueue<PlayerChunk>();
     // private final List<PlayerChunk> i = AsyncCatcher.catchAsyncUsage(Lists.newArrayList(), "list access PlayerChunkMap.i");
 	private final Queue<PlayerChunk> i = Queues.newConcurrentLinkedQueue();
     // TacoSpigot end
diff --git a/src/main/java/net/techcable/tacospigot/TacoSpigotConfig.java b/src/main/java/net/techcable/tacospigot/TacoSpigotConfig.java
index b64399b..ac62a88 100644
--- a/src/main/java/net/techcable/tacospigot/TacoSpigotConfig.java
+++ b/src/main/java/net/techcable/tacospigot/TacoSpigotConfig.java
@@ -104,21 +104,21 @@ public class TacoSpigotConfig {
 
     public static boolean useArraysForBlockStates;
     private static void useArraysForBlockStates() {
-        useArraysForBlockStates = getBoolean("useArraysForBlockStates", true); // Torch - default use
+        useArraysForBlockStates = getBoolean("useArraysForBlockStates", false); // Torch
     }
 
     public static boolean betterPvp;
     private static void betterPvp() {
-        betterPvp = getBoolean("betterPvp", true); // Torch - default use
+        betterPvp = getBoolean("betterPvp", false); // Torch
     }
 	
 	public static boolean useArraysForDatawatcher;
     private static void useArraysForDatawatcher() {
-        useArraysForDatawatcher = getBoolean("useArraysForDatawatcher", true); // Torch - default use
+        useArraysForDatawatcher = getBoolean("useArraysForDatawatcher", false); // Torch
     }
 	
 	public static boolean disableDataWatcherReadLocking;
     private static void disableDataWatcherReadLocking() {
-        disableDataWatcherReadLocking = getBoolean("disableDataWatcherReadLocking", true); // Torch - default use
+        disableDataWatcherReadLocking = getBoolean("disableDataWatcherReadLocking", false); // Torch
     }
 }
-- 
2.8.2.windows.1

