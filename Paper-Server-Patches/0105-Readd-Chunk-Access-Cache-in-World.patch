From 95f6dd13fbef6eeaee1103a0a3b9fc3843b1b8bd Mon Sep 17 00:00:00 2001
From: SotrForgotten <i@omc.hk>
Date: Tue, 12 Jul 2016 05:15:36 +0800
Subject: [PATCH] Readd-Chunk-Access-Cache-in-World


diff --git a/src/main/java/net/minecraft/server/Chunk.java b/src/main/java/net/minecraft/server/Chunk.java
index b5e2555..ceaf88c 100644
--- a/src/main/java/net/minecraft/server/Chunk.java
+++ b/src/main/java/net/minecraft/server/Chunk.java
@@ -59,6 +59,18 @@ public class Chunk {
     private ConcurrentLinkedQueue<BlockPosition> y;
     public boolean d;public void setShouldUnload(boolean unload) { this.d = unload; } public boolean isUnloading() { return d; } // Paper // OBFHELPER
     protected gnu.trove.map.hash.TObjectIntHashMap<Class> entityCount = new gnu.trove.map.hash.TObjectIntHashMap<Class>(); // Spigot
+	
+	// Migot start
+    private boolean unloaded = false;
+
+    public boolean wasUnloaded() {
+        return this.unloaded;
+    }
+
+    public void markAsUnloaded() {
+        this.unloaded = true;
+    }
+    // Migot end
 
     // Paper start
     // Track the number of minecarts and items
diff --git a/src/main/java/net/minecraft/server/ChunkProviderServer.java b/src/main/java/net/minecraft/server/ChunkProviderServer.java
index 24497d5..fc124d6 100644
--- a/src/main/java/net/minecraft/server/ChunkProviderServer.java
+++ b/src/main/java/net/minecraft/server/ChunkProviderServer.java
@@ -358,6 +358,7 @@ public class ChunkProviderServer implements IChunkProvider {
             }
         }
         // Moved from unloadChunks above
+		if (chunk != null) { chunk.markAsUnloaded(); } // Migot
         chunk.removeEntities();
         if (save) {
             this.saveChunk(chunk);
diff --git a/src/main/java/net/minecraft/server/PortalTravelAgent.java b/src/main/java/net/minecraft/server/PortalTravelAgent.java
index 76434af..1f3ad24 100644
--- a/src/main/java/net/minecraft/server/PortalTravelAgent.java
+++ b/src/main/java/net/minecraft/server/PortalTravelAgent.java
@@ -138,7 +138,7 @@ public class PortalTravelAgent {
 
 			// Migot start
             BlockPosition.MutableBlockPosition mutableblockposition = new BlockPosition.MutableBlockPosition();
-            int range = short1;
+            int range = world.paperConfig.portalSearchRadius;
 
             int zOffset = 0, yOffset = 0;
             for (int xDiff = -range; xDiff <= range; ++xDiff) {
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index cbfe40e..fc5a1b4 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -160,6 +160,13 @@ public abstract class World implements IBlockAccess {
 	// Paper - Start Peristence counters.
     private long nextPersistenceCountersTick = System.nanoTime();
     // Paper - End
+	
+	// Migot start
+    private Chunk dummyChunk = new EmptyChunk(this, Integer.MIN_VALUE, Integer.MIN_VALUE);
+    private Chunk lastChunkAccessed = dummyChunk;
+    final Object chunkLock = new Object();
+    public ChunkProviderServer chunkProviderServer; // moved here from WorldServer
+    // Migot end
 
     public CraftWorld getWorld() {
         return this.world;
@@ -366,9 +373,31 @@ public abstract class World implements IBlockAccess {
     public Chunk getChunkAtWorldCoords(BlockPosition blockposition) {
         return this.getChunkAt(blockposition.getX() >> 4, blockposition.getZ() >> 4);
     }
+	
+	// Migot start
+    private void cacheLastChunkAccess(Chunk foundChunk) {
+        this.lastChunkAccessed = ((foundChunk == null || foundChunk.isEmpty() || foundChunk.wasUnloaded()) ? this.dummyChunk : foundChunk);
+    }
+    // Migot end
 
     public Chunk getChunkAt(int i, int j) {
-        return this.chunkProvider.getChunkAt(i, j);
+        // Migot start
+        Chunk last = this.lastChunkAccessed;
+        if(last.a(i,j) && !last.wasUnloaded()) {
+            return last;
+        } else {
+            Chunk result = null;
+            if(this.chunkProviderServer.isChunkLoaded(i, j)) {
+                result = this.chunkProviderServer.getChunkAt(i, j);
+            } else {
+                synchronized (this.chunkLock) {
+                    result = this.chunkProvider.getOrCreateChunk(i, j);
+                }
+            }
+            this.cacheLastChunkAccess(result);
+            return result;
+        }
+        // Migot end
     }
 
     public boolean setTypeAndData(BlockPosition blockposition, IBlockData iblockdata, int i) {
diff --git a/src/main/java/net/minecraft/server/WorldServer.java b/src/main/java/net/minecraft/server/WorldServer.java
index 298406e..c172590 100644
--- a/src/main/java/net/minecraft/server/WorldServer.java
+++ b/src/main/java/net/minecraft/server/WorldServer.java
@@ -1211,7 +1211,7 @@ public class WorldServer extends World implements IAsyncTaskHandler {
     }
 
     public ChunkProviderServer getChunkProviderServer() {
-        return (ChunkProviderServer) super.getChunkProvider();
+        return net.minecraft.server.World.chunkProviderServer;
     }
 
     public Explosion createExplosion(@Nullable Entity entity, double d0, double d1, double d2, float f, boolean flag, boolean flag1) {
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
index c329f2c..4b6c530 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
@@ -217,6 +217,7 @@ public class CraftWorld implements World {
         if (chunk == null) {
 			return true;
 		}
+		chunk.markAsUnloaded(); // Migot
 		// If chunk had previously been queued to save, must do save to avoid loss of that data
         return world.getChunkProviderServer().unloadChunk(chunk, chunk.mustSave || save);
     }
-- 
2.8.2.windows.1

