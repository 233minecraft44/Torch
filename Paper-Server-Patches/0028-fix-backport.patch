From ae44138bacefc6314bbf0c79609e65105e38f6ca Mon Sep 17 00:00:00 2001
From: SotrForgotten <i@omc.hk>
Date: Sun, 26 Jun 2016 02:22:19 +0800
Subject: [PATCH] fix backport


diff --git a/src/main/java/net/minecraft/server/IBlockState.java b/src/main/java/net/minecraft/server/IBlockState.java
index 982dd55..30557b1 100644
--- a/src/main/java/net/minecraft/server/IBlockState.java
+++ b/src/main/java/net/minecraft/server/IBlockState.java
@@ -11,13 +11,8 @@ public interface IBlockState<T extends Comparable<T>> {
     Class<T> b();
 
     String a(T t0);
-
-    // TacoSpigot start
-	// Torch - backport
-    public int getId();
-  
-    public int getValueId(T value);
-
+	
+	 // TacoSpigot start
     public int getId();
 
     public int getValueId(T value);
diff --git a/src/main/java/net/techcable/tacospigot/ArrayMap.java b/src/main/java/net/techcable/tacospigot/ArrayMap.java
index 6786803..8a76ede 100644
--- a/src/main/java/net/techcable/tacospigot/ArrayMap.java
+++ b/src/main/java/net/techcable/tacospigot/ArrayMap.java
@@ -16,7 +16,11 @@ import javax.annotation.Nonnull;
 
 import it.unimi.dsi.fastutil.ints.AbstractInt2ObjectMap;
 
-import com.google.common.collect.AbstractIterator;
+import javax.annotation.concurrent.ThreadSafe;
+import it.unimi.dsi.fastutil.objects.ObjectIterator;
+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
+import java.util.concurrent.atomic.AtomicReferenceArray;
+import it.unimi.dsi.fastutil.objects.ObjectSet;
 
 import static com.google.common.base.Preconditions.*;
 
diff --git a/src/main/java/net/techcable/tacospigot/ImmutableArrayMap.java b/src/main/java/net/techcable/tacospigot/ImmutableArrayMap.java
index 4eda84d..88657a6 100644
--- a/src/main/java/net/techcable/tacospigot/ImmutableArrayMap.java
+++ b/src/main/java/net/techcable/tacospigot/ImmutableArrayMap.java
@@ -20,9 +20,6 @@ public class ImmutableArrayMap<K, V> {
     private final int offset;
     private final Object[] data;
     private final Object[] outlyingData;
-    private final int offset;
-    private final Object[] data;
-    private final Object[] outlyingData;
     private final int[] outlyingIds;
 
     private final int size;
diff --git a/src/main/java/net/techcable/tacospigot/ImmutableArrayTable.java b/src/main/java/net/techcable/tacospigot/ImmutableArrayTable.java
index 0bb7b2a..719b46f 100644
--- a/src/main/java/net/techcable/tacospigot/ImmutableArrayTable.java
+++ b/src/main/java/net/techcable/tacospigot/ImmutableArrayTable.java
@@ -1,56 +1,36 @@
 package net.techcable.tacospigot;
 
-import java.util.AbstractCollection;
-import java.util.AbstractSet;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.Iterator;
 import java.util.Map;
-import java.util.NoSuchElementException;
-import java.util.Set;
 import java.util.function.IntFunction;
 import java.util.function.ToIntBiFunction;
 import java.util.function.ToIntFunction;
-import javax.annotation.Nullable;
 
 import com.google.common.base.Preconditions;
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.Table;
 
-import net.techcable.tacospigot.function.ObjIntFunction;
+import net.techcable.tacospigot.function.ObjIntBiFunction;
 
 public class ImmutableArrayTable<R, C, V> {
-    private final ImmutableArrayMap<R, ImmutableArrayMap<C, V>> rowMap;
-
-    public ImmutableArrayTable(ToIntFunction<R> rowIndexer, IntFunction<R> rowById, ToIntBiFunction<R, C> columnGetId, ObjIntBiFunction<R, C> columnById, Table<R, C, V> table) {
-        Preconditions.checkNotNull(table, "Null table");
-        ImmutableMap.Builder<R, ImmutableArrayMap<C, V>> rowMapBuilder = ImmutableMap.builder();
-        for (Map.Entry<R, Map<C, V>> rowEntry : table.rowMap().entrySet()) {
-            R row = rowEntry.getKey();
-            Preconditions.checkNotNull(row, "Null row");
-            ImmutableMap.Builder<C, V> rowMapEntryBuilder = ImmutableMap.builder();
-            for (Map.Entry<C, V> rowEntryEntry : rowEntry.getValue().entrySet()) {
-                rowMapEntryBuilder.put(rowEntryEntry);
-            }
-            rowMapBuilder.put(row, new ImmutableArrayMap<>((c) -> columnGetId.applyAsInt(row, c), (id) -> columnById.apply(row, id), rowMapEntryBuilder.build()));
-        }
-        this.rowMap = new ImmutableArrayMap<>(rowIndexer, rowById, rowMapBuilder.build());
-        
-    }
-
-    public V get(int rowId, int columnId) {
-        ImmutableArrayMap<C, V> rowEntry = rowMap.get(rowId);
-        return rowEntry != null ? rowEntry.get(columnId) : null;
-    }
-
-    @Override
-    public void putAll(Table<? extends R, ? extends C, ? extends V> table) {
-        throw new UnsupportedOperationException();
-    }
-
-    @Override
-    public V remove(@Nullable Object rowKey, @Nullable Object columnKey) {
-        throw new UnsupportedOperationException();
-    }
-}
+  private final ImmutableArrayMap<R, ImmutableArrayMap<C, V>> rowMap;
+
+  public ImmutableArrayTable(ToIntFunction<R> rowIndexer, IntFunction<R> rowById, ToIntBiFunction<R, C> columnGetId, ObjIntBiFunction<R, C> columnById, Table<R, C, V> table) {
+      Preconditions.checkNotNull(table, "Null table");
+      ImmutableMap.Builder<R, ImmutableArrayMap<C, V>> rowMapBuilder = ImmutableMap.builder();
+      for (Map.Entry<R, Map<C, V>> rowEntry : table.rowMap().entrySet()) {
+          R row = rowEntry.getKey();
+          Preconditions.checkNotNull(row, "Null row");
+          ImmutableMap.Builder<C, V> rowMapEntryBuilder = ImmutableMap.builder();
+          for (Map.Entry<C, V> rowEntryEntry : rowEntry.getValue().entrySet()) {
+              rowMapEntryBuilder.put(rowEntryEntry);
+          }
+          rowMapBuilder.put(row, new ImmutableArrayMap<>((c) -> columnGetId.applyAsInt(row, c), (id) -> columnById.apply(row, id), rowMapEntryBuilder.build()));
+      }
+      this.rowMap = new ImmutableArrayMap<>(rowIndexer, rowById, rowMapBuilder.build());
+  }
+
+  public V get(int rowId, int columnId) {
+      ImmutableArrayMap<C, V> rowEntry = rowMap.get(rowId);
+      return rowEntry != null ? rowEntry.get(columnId) : null;
+  }
+}
\ No newline at end of file
-- 
2.8.2.windows.1

