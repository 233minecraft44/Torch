From 62e35043ee716706ef147ca3be6a4b4b71cbeda7 Mon Sep 17 00:00:00 2001
From: SotrForgotten <i@omc.hk>
Date: Thu, 11 Aug 2016 01:57:05 +0800
Subject: [PATCH] Fix FOR_OTHER_TEAMS and FOR_OWN_TEAM being inverted for
 visibility


diff --git a/src/main/java/co/aikar/timings/TimingHandler.java b/src/main/java/co/aikar/timings/TimingHandler.java
index 3f6a86b..10d9065 100644
--- a/src/main/java/co/aikar/timings/TimingHandler.java
+++ b/src/main/java/co/aikar/timings/TimingHandler.java
@@ -142,7 +142,7 @@ class TimingHandler implements Timing {
 		if (!added) {
 			added = true;
 			timed = true;
-			TimingsManager.HANDLERS.add(this);
+			synchronized(this) { TimingsManager.HANDLERS.add(this); }
 		}
 		if (groupHandler != null) {
 			groupHandler.addDiff(diff);
diff --git a/src/main/java/net/minecraft/server/EntityPlayer.java b/src/main/java/net/minecraft/server/EntityPlayer.java
index ddf3744..0e6bcfd 100644
--- a/src/main/java/net/minecraft/server/EntityPlayer.java
+++ b/src/main/java/net/minecraft/server/EntityPlayer.java
@@ -62,6 +62,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
 	public boolean f;
 	public int ping;
 	public boolean viewingCredits;
+	private boolean isProgress = false;
 	// Paper start - Player view distance API
 	private int viewDistance = -1;
 
@@ -610,6 +611,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
 	@Override
 	@Nullable
 	public Entity c(int i) {
+		if(this.isProgress) { return this; } else { this.isProgress = true; }
 		// this.ck = true; // CraftBukkit - Moved down and into
 		// PlayerList#changeDimension
 		if (this.dimension == 1 && i == 1) {
@@ -640,7 +642,8 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
 			// CraftBukkit start
 			TeleportCause cause = (this.dimension == 1 || i == 1) ? TeleportCause.END_PORTAL
 					: TeleportCause.NETHER_PORTAL;
-			this.server.getPlayerList().changeDimension(this, i, cause); // PAIL:
+			this.server.getPlayerList().changeDimension(this, i, cause);
+																			// PAIL:
 																			// check
 																			// all
 																			// this
@@ -649,6 +652,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
 			this.lastSentExp = -1;
 			this.lastHealthSent = -1.0F;
 			this.cc = -1;
+			this.isProgress = false;
 			return this;
 		}
 	}
@@ -1276,13 +1280,13 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
 		if (entity instanceof EntityHuman) {
 			this.playerConnection.sendPacket(new PacketPlayOutEntityDestroy(new int[] { entity.getId() }));
 		} else {
-			this.removeQueue.add(Integer.valueOf(entity.getId()));
+			synchronized(this) { this.removeQueue.add(Integer.valueOf(entity.getId())); }
 		}
 
 	}
 
 	public void d(Entity entity) {
-		this.removeQueue.remove(Integer.valueOf(entity.getId()));
+		synchronized(this) { this.removeQueue.remove(Integer.valueOf(entity.getId())); }
 	}
 
 	@Override
diff --git a/src/main/java/net/minecraft/server/Village.java b/src/main/java/net/minecraft/server/Village.java
index 48a526a..dcb66e6 100644
--- a/src/main/java/net/minecraft/server/Village.java
+++ b/src/main/java/net/minecraft/server/Village.java
@@ -11,7 +11,7 @@ import com.mojang.authlib.GameProfile;
 public class Village {
 
 	private World a;
-	private final List<VillageDoor> b = Lists.newArrayList(); // COWIterator
+	private final List<VillageDoor> b = Lists.newArrayList();
 	private BlockPosition c;
 	private BlockPosition d;
 	private int e;
@@ -40,498 +40,448 @@ public class Village {
 	}
 
 	public void a(World world) {
-		this.a = world;
-	}
-
-	// Migot start
-	private BlockPosition[] positions = null;
-
-	private void calculateNewCheckPositions() {
-		if (this.d == null || this.d.equals(BlockPosition.ZERO)) {
-			this.positions = null;
-		} else {
-			this.positions = new BlockPosition[] { this.d.a(-this.e, 0, -this.e), this.d.a(-this.e, 0, this.e),
-					this.d.a(this.e, 0, -this.e), this.d.a(this.e, 0, this.e), this.d };
-		}
-	}
-
-	public boolean isVillageAreaLoaded() {
-		for (int i = 0; this.positions != null && i < this.positions.length; i++) {
-			if (this.a.isLoaded(this.positions[i])) {
-				return true;
-			}
-		}
-		return false;
-	}
-	// Migot end
-
-	public void a(int i) {
-		if (!this.isVillageAreaLoaded()) {
-			return;
-		} // Migot
-		this.g = i;
-		this.m();
-		this.l();
-		if (i % 20 == 0) {
-			this.k();
-		}
-
-		if (i % 30 == 0) {
-			this.j();
-		}
-
-		int j = this.h / 10;
-
-		if (this.l < j && this.b.size() > 20 && this.a.random.nextInt(7000) == 0) {
-			Vec3D vec3d = this.a(this.d, 2, 4, 2);
-
-			if (vec3d != null) {
-				EntityIronGolem entityirongolem = new EntityIronGolem(this.a);
-
-				entityirongolem.setPosition(vec3d.x, vec3d.y, vec3d.z);
-				this.a.addEntity(entityirongolem,
-						org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.VILLAGE_DEFENSE); // CraftBukkit
-				++this.l;
-			}
-		}
-
-	}
-
-	private Vec3D a(BlockPosition blockposition, int i, int j, int k) {
-		for (int l = 0; l < 10; ++l) {
-			BlockPosition blockposition1 = blockposition.a(this.a.random.nextInt(16) - 8, this.a.random.nextInt(6) - 3,
-					this.a.random.nextInt(16) - 8);
-
-			if (this.a(blockposition1) && this.a(new BlockPosition(i, j, k), blockposition1)) {
-				return new Vec3D(blockposition1.getX(), blockposition1.getY(), blockposition1.getZ());
-			}
-		}
-
-		return null;
-	}
-
-	private boolean a(BlockPosition blockposition, BlockPosition blockposition1) {
-		if (!this.a.getType(blockposition1.down()).q()) {
-			return false;
-		} else {
-			int i = blockposition1.getX() - blockposition.getX() / 2;
-			int j = blockposition1.getZ() - blockposition.getZ() / 2;
-
-			for (int k = i; k < i + blockposition.getX(); ++k) {
-				for (int l = blockposition1.getY(); l < blockposition1.getY() + blockposition.getY(); ++l) {
-					for (int i1 = j; i1 < j + blockposition.getZ(); ++i1) {
-						if (this.a.getType(new BlockPosition(k, l, i1)).l()) {
-							return false;
-						}
-					}
-				}
-			}
-
-			return true;
-		}
-	}
-
-	private void j() {
-		List list = this.a.a(EntityIronGolem.class, new AxisAlignedBB(this.d.getX() - this.e, this.d.getY() - 4,
-				this.d.getZ() - this.e, this.d.getX() + this.e, this.d.getY() + 4, this.d.getZ() + this.e));
-
-		this.l = list.size();
-	}
-
-	private void k() {
-		List list = this.a.a(EntityVillager.class, new AxisAlignedBB(this.d.getX() - this.e, this.d.getY() - 4,
-				this.d.getZ() - this.e, this.d.getX() + this.e, this.d.getY() + 4, this.d.getZ() + this.e));
-
-		this.h = list.size();
-		if (this.h == 0) {
-			this.j.clear();
-		}
-
-	}
+        this.a = world;
+    }
+
+    public void a(int i) {
+        this.g = i;
+        this.m();
+        this.l();
+        if (i % 20 == 0) {
+            this.k();
+        }
+
+        if (i % 30 == 0) {
+            this.j();
+        }
+
+        int j = this.h / 10;
+
+        if (this.l < j && this.b.size() > 20 && this.a.random.nextInt(7000) == 0) {
+            Vec3D vec3d = this.a(this.d, 2, 4, 2);
+
+            if (vec3d != null) {
+                EntityIronGolem entityirongolem = new EntityIronGolem(this.a);
+
+                entityirongolem.setPosition(vec3d.x, vec3d.y, vec3d.z);
+                this.a.addEntity(entityirongolem, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.VILLAGE_DEFENSE); // CraftBukkit
+                ++this.l;
+            }
+        }
+
+    }
+
+    private Vec3D a(BlockPosition blockposition, int i, int j, int k) {
+        for (int l = 0; l < 10; ++l) {
+            BlockPosition blockposition1 = blockposition.a(this.a.random.nextInt(16) - 8, this.a.random.nextInt(6) - 3, this.a.random.nextInt(16) - 8);
+
+            if (this.a(blockposition1) && this.a(new BlockPosition(i, j, k), blockposition1)) {
+                return new Vec3D((double) blockposition1.getX(), (double) blockposition1.getY(), (double) blockposition1.getZ());
+            }
+        }
+
+        return null;
+    }
+
+    private boolean a(BlockPosition blockposition, BlockPosition blockposition1) {
+        if (!this.a.getType(blockposition1.down()).q()) {
+            return false;
+        } else {
+            int i = blockposition1.getX() - blockposition.getX() / 2;
+            int j = blockposition1.getZ() - blockposition.getZ() / 2;
+
+            for (int k = i; k < i + blockposition.getX(); ++k) {
+                for (int l = blockposition1.getY(); l < blockposition1.getY() + blockposition.getY(); ++l) {
+                    for (int i1 = j; i1 < j + blockposition.getZ(); ++i1) {
+                        if (this.a.getType(new BlockPosition(k, l, i1)).l()) {
+                            return false;
+                        }
+                    }
+                }
+            }
+
+            return true;
+        }
+    }
+
+    private void j() {
+        List list = this.a.a(EntityIronGolem.class, new AxisAlignedBB((double) (this.d.getX() - this.e), (double) (this.d.getY() - 4), (double) (this.d.getZ() - this.e), (double) (this.d.getX() + this.e), (double) (this.d.getY() + 4), (double) (this.d.getZ() + this.e)));
+
+        this.l = list.size();
+    }
+
+    private void k() {
+        List list = this.a.a(EntityVillager.class, new AxisAlignedBB((double) (this.d.getX() - this.e), (double) (this.d.getY() - 4), (double) (this.d.getZ() - this.e), (double) (this.d.getX() + this.e), (double) (this.d.getY() + 4), (double) (this.d.getZ() + this.e)));
+
+        this.h = list.size();
+        if (this.h == 0) {
+            this.j.clear();
+        }
+
+    }
+
+    public BlockPosition a() {
+        return this.d;
+    }
+
+    public int b() {
+        return this.e;
+    }
+
+    public int c() {
+        return this.b.size();
+    }
+
+    public int d() {
+        return this.g - this.f;
+    }
+
+    public int e() {
+        return this.h;
+    }
+
+    public boolean a(BlockPosition blockposition) {
+        return this.d.n(blockposition) < (double) (this.e * this.e);
+    }
+
+    public List<VillageDoor> f() {
+        return this.b;
+    }
+
+    public VillageDoor b(BlockPosition blockposition) {
+        VillageDoor villagedoor = null;
+        int i = Integer.MAX_VALUE;
+        Iterator iterator = this.b.iterator();
+
+        while (iterator.hasNext()) {
+            VillageDoor villagedoor1 = (VillageDoor) iterator.next();
+            int j = villagedoor1.a(blockposition);
+
+            if (j < i) {
+                villagedoor = villagedoor1;
+                i = j;
+            }
+        }
+
+        return villagedoor;
+    }
+
+    public VillageDoor c(BlockPosition blockposition) {
+        VillageDoor villagedoor = null;
+        int i = Integer.MAX_VALUE;
+        Iterator iterator = this.b.iterator();
+
+        while (iterator.hasNext()) {
+            VillageDoor villagedoor1 = (VillageDoor) iterator.next();
+            int j = villagedoor1.a(blockposition);
+
+            if (j > 256) {
+                j *= 1000;
+            } else {
+                j = villagedoor1.c();
+            }
+
+            if (j < i) {
+                BlockPosition blockposition1 = villagedoor1.d();
+                EnumDirection enumdirection = villagedoor1.j();
+
+                if (this.a.getType(blockposition1.shift(enumdirection, 1)).getBlock().b(this.a, blockposition1.shift(enumdirection, 1)) && this.a.getType(blockposition1.shift(enumdirection, -1)).getBlock().b(this.a, blockposition1.shift(enumdirection, -1)) && this.a.getType(blockposition1.up().shift(enumdirection, 1)).getBlock().b(this.a, blockposition1.up().shift(enumdirection, 1)) && this.a.getType(blockposition1.up().shift(enumdirection, -1)).getBlock().b(this.a, blockposition1.up().shift(enumdirection, -1))) {
+                    villagedoor = villagedoor1;
+                    i = j;
+                }
+            }
+        }
+
+        return villagedoor;
+    }
+
+    public VillageDoor e(BlockPosition blockposition) {
+        if (this.d.n(blockposition) > (double) (this.e * this.e)) {
+            return null;
+        } else {
+            Iterator iterator = this.b.iterator();
+
+            VillageDoor villagedoor;
 
-	public BlockPosition a() {
-		return this.d;
-	}
+            do {
+                if (!iterator.hasNext()) {
+                    return null;
+                }
+
+                villagedoor = (VillageDoor) iterator.next();
+            } while (villagedoor.d().getX() != blockposition.getX() || villagedoor.d().getZ() != blockposition.getZ() || Math.abs(villagedoor.d().getY() - blockposition.getY()) > 1);
+
+            return villagedoor;
+        }
+    }
+
+    public void a(VillageDoor villagedoor) {
+        this.b.add(villagedoor);
+        this.c = this.c.a(villagedoor.d());
+        this.n();
+        this.f = villagedoor.h();
+    }
+
+    public boolean g() {
+        return this.b.isEmpty();
+    }
+
+    public void a(EntityLiving entityliving) {
+        Iterator iterator = this.k.iterator();
+
+        Village.Aggressor village_aggressor;
+
+        do {
+            if (!iterator.hasNext()) {
+                this.k.add(new Village.Aggressor(entityliving, this.g));
+                return;
+            }
+
+            village_aggressor = (Village.Aggressor) iterator.next();
+        } while (village_aggressor.a != entityliving);
+
+        village_aggressor.b = this.g;
+    }
+
+    public EntityLiving b(EntityLiving entityliving) {
+        double d0 = Double.MAX_VALUE;
+        Village.Aggressor village_aggressor = null;
+
+        for (int i = 0; i < this.k.size(); ++i) {
+            Village.Aggressor village_aggressor1 = (Village.Aggressor) this.k.get(i);
+            double d1 = village_aggressor1.a.h(entityliving);
+
+            if (d1 <= d0) {
+                village_aggressor = village_aggressor1;
+                d0 = d1;
+            }
+        }
 
-	public int b() {
-		return this.e;
-	}
+        return village_aggressor != null ? village_aggressor.a : null;
+    }
+
+    public EntityHuman c(EntityLiving entityliving) {
+        double d0 = Double.MAX_VALUE;
+        EntityHuman entityhuman = null;
+        Iterator iterator = this.j.keySet().iterator();
 
-	public int c() {
-		return this.b.size();
-	}
+        while (iterator.hasNext()) {
+            String s = (String) iterator.next();
+
+            if (this.d(s)) {
+                EntityHuman entityhuman1 = this.a.a(s);
 
-	public int d() {
-		return this.g - this.f;
-	}
-
-	public int e() {
-		return this.h;
-	}
-
-	public boolean a(BlockPosition blockposition) {
-		return this.d.n(blockposition) < this.e * this.e;
-	}
-
-	public List<VillageDoor> f() {
-		return this.b;
-	}
-
-	public VillageDoor b(BlockPosition blockposition) {
-		VillageDoor villagedoor = null;
-		int i = Integer.MAX_VALUE;
-		Iterator iterator = this.b.iterator();
-
-		while (iterator.hasNext()) {
-			VillageDoor villagedoor1 = (VillageDoor) iterator.next();
-			int j = villagedoor1.a(blockposition);
-
-			if (j < i) {
-				villagedoor = villagedoor1;
-				i = j;
-			}
-		}
-
-		return villagedoor;
-	}
-
-	public VillageDoor c(BlockPosition blockposition) {
-		VillageDoor villagedoor = null;
-		int i = Integer.MAX_VALUE;
-		Iterator iterator = this.b.iterator();
-
-		while (iterator.hasNext()) {
-			VillageDoor villagedoor1 = (VillageDoor) iterator.next();
-			int j = villagedoor1.a(blockposition);
-
-			if (j > 256) {
-				j *= 1000;
-			} else {
-				j = villagedoor1.c();
-			}
-
-			if (j < i) {
-				BlockPosition blockposition1 = villagedoor1.d();
-				EnumDirection enumdirection = villagedoor1.j();
-
-				if (this.a.getType(blockposition1.shift(enumdirection, 1)).getBlock().b(this.a,
-						blockposition1.shift(enumdirection, 1))
-						&& this.a.getType(blockposition1.shift(enumdirection, -1)).getBlock().b(this.a,
-								blockposition1.shift(enumdirection, -1))
-						&& this.a.getType(blockposition1.up().shift(enumdirection, 1)).getBlock().b(this.a,
-								blockposition1.up().shift(enumdirection, 1))
-						&& this.a.getType(blockposition1.up().shift(enumdirection, -1)).getBlock().b(this.a,
-								blockposition1.up().shift(enumdirection, -1))) {
-					villagedoor = villagedoor1;
-					i = j;
-				}
-			}
-		}
-
-		return villagedoor;
-	}
-
-	public VillageDoor e(BlockPosition blockposition) {
-		if (this.d.n(blockposition) > this.e * this.e) {
-			return null;
-		} else {
-			Iterator iterator = this.b.iterator();
-
-			VillageDoor villagedoor;
-
-			do {
-				if (!iterator.hasNext()) {
-					return null;
-				}
-
-				villagedoor = (VillageDoor) iterator.next();
-			} while (villagedoor.d().getX() != blockposition.getX() || villagedoor.d().getZ() != blockposition.getZ()
-					|| Math.abs(villagedoor.d().getY() - blockposition.getY()) > 1);
-
-			return villagedoor;
-		}
-	}
-
-	public void a(VillageDoor villagedoor) {
-		this.b.add(villagedoor);
-		this.c = this.c.a(villagedoor.d());
-		this.n();
-		this.f = villagedoor.h();
-	}
-
-	public boolean g() {
-		return this.b.isEmpty();
-	}
-
-	public void a(EntityLiving entityliving) {
-		Iterator iterator = this.k.iterator();
-
-		Village.Aggressor village_aggressor;
-
-		do {
-			if (!iterator.hasNext()) {
-				this.k.add(new Village.Aggressor(entityliving, this.g));
-				return;
-			}
-
-			village_aggressor = (Village.Aggressor) iterator.next();
-		} while (village_aggressor.a != entityliving);
-
-		village_aggressor.b = this.g;
-	}
+                if (entityhuman1 != null) {
+                    double d1 = entityhuman1.h(entityliving);
+
+                    if (d1 <= d0) {
+                        entityhuman = entityhuman1;
+                        d0 = d1;
+                    }
+                }
+            }
+        }
+
+        return entityhuman;
+    }
+
+    private void l() {
+        Iterator iterator = this.k.iterator();
+
+        while (iterator.hasNext()) {
+            Village.Aggressor village_aggressor = (Village.Aggressor) iterator.next();
 
-	public EntityLiving b(EntityLiving entityliving) {
-		double d0 = Double.MAX_VALUE;
-		Village.Aggressor village_aggressor = null;
+            if (!village_aggressor.a.isAlive() || Math.abs(this.g - village_aggressor.b) > 300) {
+                iterator.remove();
+            }
+        }
 
-		for (int i = 0; i < this.k.size(); ++i) {
-			Village.Aggressor village_aggressor1 = this.k.get(i);
-			double d1 = village_aggressor1.a.h(entityliving);
+    }
 
-			if (d1 <= d0) {
-				village_aggressor = village_aggressor1;
-				d0 = d1;
-			}
-		}
+    private void m() {
+        boolean flag = false;
+        boolean flag1 = this.a.random.nextInt(50) == 0;
+        Iterator iterator = this.b.iterator();
+
+        while (iterator.hasNext()) {
+            VillageDoor villagedoor = (VillageDoor) iterator.next();
 
-		return village_aggressor != null ? village_aggressor.a : null;
-	}
-
-	public EntityHuman c(EntityLiving entityliving) {
-		double d0 = Double.MAX_VALUE;
-		EntityHuman entityhuman = null;
-		Iterator iterator = this.j.keySet().iterator();
-
-		while (iterator.hasNext()) {
-			String s = (String) iterator.next();
-
-			if (this.d(s)) {
-				EntityHuman entityhuman1 = this.a.a(s);
-
-				if (entityhuman1 != null) {
-					double d1 = entityhuman1.h(entityliving);
-
-					if (d1 <= d0) {
-						entityhuman = entityhuman1;
-						d0 = d1;
-					}
-				}
-			}
-		}
-
-		return entityhuman;
-	}
-
-	private void l() {
-		Iterator iterator = this.k.iterator();
-
-		while (iterator.hasNext()) {
-			Village.Aggressor village_aggressor = (Village.Aggressor) iterator.next();
-
-			if (!village_aggressor.a.isAlive() || Math.abs(this.g - village_aggressor.b) > 300) {
-				iterator.remove();
-			}
-		}
-
-	}
-
-	private void m() {
-		boolean flag = false;
-		boolean flag1 = this.a.random.nextInt(50) == 0;
-		Iterator iterator = this.b.iterator();
-
-		while (iterator.hasNext()) {
-			VillageDoor villagedoor = (VillageDoor) iterator.next();
-
-			if (flag1) {
-				villagedoor.a();
-			}
-
-			if (!this.f(villagedoor.d()) || Math.abs(this.g - villagedoor.h()) > 1200) {
-				this.c = this.c.b(villagedoor.d());
-				flag = true;
-				villagedoor.a(true);
-				iterator.remove();
-			}
-		}
-
-		if (flag) {
-			this.n();
-		}
-
-	}
-
-	private boolean f(BlockPosition blockposition) {
-		IBlockData iblockdata = this.a.getType(blockposition);
-		Block block = iblockdata.getBlock();
-
-		return block instanceof BlockDoor ? iblockdata.getMaterial() == Material.WOOD : false;
-	}
-
-	private void n() {
-		int i = this.b.size();
-
-		if (i == 0) {
-			this.d = BlockPosition.ZERO;
-			this.e = 0;
-		} else {
-			this.d = new BlockPosition(this.c.getX() / i, this.c.getY() / i, this.c.getZ() / i);
-			int j = 0;
-
-			VillageDoor villagedoor;
-
-			for (Iterator iterator = this.b.iterator(); iterator.hasNext(); j = Math.max(villagedoor.a(this.d), j)) {
-				villagedoor = (VillageDoor) iterator.next();
-			}
-
-			this.e = Math.max(32, (int) Math.sqrt(j) + 1);
-		}
-		this.calculateNewCheckPositions(); // Migot
-	}
-
-	public int a(String s) {
-		Integer integer = this.j.get(s);
-
-		return integer != null ? integer.intValue() : 0;
-	}
-
-	public int a(String s, int i) {
-		int j = this.a(s);
-		int k = MathHelper.clamp(j + i, -30, 10);
-
-		this.j.put(s, Integer.valueOf(k));
-		return k;
-	}
-
-	public boolean d(String s) {
-		return this.a(s) <= -15;
-	}
-
-	public void a(NBTTagCompound nbttagcompound) {
-		this.h = nbttagcompound.getInt("PopSize");
-		this.e = nbttagcompound.getInt("Radius");
-		this.l = nbttagcompound.getInt("Golems");
-		this.f = nbttagcompound.getInt("Stable");
-		this.g = nbttagcompound.getInt("Tick");
-		this.i = nbttagcompound.getInt("MTick");
-		this.d = new BlockPosition(nbttagcompound.getInt("CX"), nbttagcompound.getInt("CY"),
-				nbttagcompound.getInt("CZ"));
-		this.c = new BlockPosition(nbttagcompound.getInt("ACX"), nbttagcompound.getInt("ACY"),
-				nbttagcompound.getInt("ACZ"));
-		NBTTagList nbttaglist = nbttagcompound.getList("Doors", 10);
-
-		for (int i = 0; i < nbttaglist.size(); ++i) {
-			NBTTagCompound nbttagcompound1 = nbttaglist.get(i);
-			VillageDoor villagedoor = new VillageDoor(
-					new BlockPosition(nbttagcompound1.getInt("X"), nbttagcompound1.getInt("Y"),
-							nbttagcompound1.getInt("Z")),
-					nbttagcompound1.getInt("IDX"), nbttagcompound1.getInt("IDZ"), nbttagcompound1.getInt("TS"));
-
-			this.b.add(villagedoor);
-		}
-
-		NBTTagList nbttaglist1 = nbttagcompound.getList("Players", 10);
-
-		for (int j = 0; j < nbttaglist1.size(); ++j) {
-			NBTTagCompound nbttagcompound2 = nbttaglist1.get(j);
-
-			if (nbttagcompound2.hasKey("UUID")) {
-				UserCache usercache = MinecraftServer.getServer().getUserCache(); // Paper
-																					// -
-																					// Bandaid
-																					// for
-																					// world
-																					// being
-																					// null
-				GameProfile gameprofile = usercache.a(UUID.fromString(nbttagcompound2.getString("UUID")));
-
-				if (gameprofile != null) {
-					this.j.put(gameprofile.getName(), Integer.valueOf(nbttagcompound2.getInt("S")));
-				}
-			} else {
-				this.j.put(nbttagcompound2.getString("Name"), Integer.valueOf(nbttagcompound2.getInt("S")));
-			}
-		}
-
-		this.calculateNewCheckPositions(); // Migot
-	}
-
-	public void b(NBTTagCompound nbttagcompound) {
-		nbttagcompound.setInt("PopSize", this.h);
-		nbttagcompound.setInt("Radius", this.e);
-		nbttagcompound.setInt("Golems", this.l);
-		nbttagcompound.setInt("Stable", this.f);
-		nbttagcompound.setInt("Tick", this.g);
-		nbttagcompound.setInt("MTick", this.i);
-		nbttagcompound.setInt("CX", this.d.getX());
-		nbttagcompound.setInt("CY", this.d.getY());
-		nbttagcompound.setInt("CZ", this.d.getZ());
-		nbttagcompound.setInt("ACX", this.c.getX());
-		nbttagcompound.setInt("ACY", this.c.getY());
-		nbttagcompound.setInt("ACZ", this.c.getZ());
-		NBTTagList nbttaglist = new NBTTagList();
-		Iterator iterator = this.b.iterator();
-
-		while (iterator.hasNext()) {
-			VillageDoor villagedoor = (VillageDoor) iterator.next();
-			NBTTagCompound nbttagcompound1 = new NBTTagCompound();
-
-			nbttagcompound1.setInt("X", villagedoor.d().getX());
-			nbttagcompound1.setInt("Y", villagedoor.d().getY());
-			nbttagcompound1.setInt("Z", villagedoor.d().getZ());
-			nbttagcompound1.setInt("IDX", villagedoor.f());
-			nbttagcompound1.setInt("IDZ", villagedoor.g());
-			nbttagcompound1.setInt("TS", villagedoor.h());
-			nbttaglist.add(nbttagcompound1);
-		}
-
-		nbttagcompound.set("Doors", nbttaglist);
-		NBTTagList nbttaglist1 = new NBTTagList();
-		Iterator iterator1 = this.j.keySet().iterator();
-
-		while (iterator1.hasNext()) {
-			String s = (String) iterator1.next();
-			NBTTagCompound nbttagcompound2 = new NBTTagCompound();
-			UserCache usercache = this.a.getMinecraftServer().getUserCache();
-			GameProfile gameprofile = usercache.getProfile(s);
-
-			if (gameprofile != null) {
-				nbttagcompound2.setString("UUID", gameprofile.getId().toString());
-				nbttagcompound2.setInt("S", this.j.get(s).intValue());
-				nbttaglist1.add(nbttagcompound2);
-			}
-		}
-
-		nbttagcompound.set("Players", nbttaglist1);
-	}
-
-	public void h() {
-		this.i = this.g;
-	}
-
-	public boolean i() {
-		return this.i == 0 || this.g - this.i >= 3600;
-	}
-
-	public void b(int i) {
-		Iterator iterator = this.j.keySet().iterator();
-
-		while (iterator.hasNext()) {
-			String s = (String) iterator.next();
-
-			this.a(s, i);
-		}
-
-	}
-
-	class Aggressor {
-
-		public EntityLiving a;
-		public int b;
-
-		Aggressor(EntityLiving entityliving, int i) {
-			this.a = entityliving;
-			this.b = i;
-		}
-	}
+            if (flag1) {
+                villagedoor.a();
+            }
+
+            if (!this.f(villagedoor.d()) || Math.abs(this.g - villagedoor.h()) > 1200) {
+                this.c = this.c.b(villagedoor.d());
+                flag = true;
+                villagedoor.a(true);
+                iterator.remove();
+            }
+        }
+
+        if (flag) {
+            this.n();
+        }
+
+    }
+
+    private boolean f(BlockPosition blockposition) {
+        IBlockData iblockdata = this.a.getType(blockposition);
+        Block block = iblockdata.getBlock();
+
+        return block instanceof BlockDoor ? iblockdata.getMaterial() == Material.WOOD : false;
+    }
+
+    private void n() {
+        int i = this.b.size();
+
+        if (i == 0) {
+            this.d = BlockPosition.ZERO;
+            this.e = 0;
+        } else {
+            this.d = new BlockPosition(this.c.getX() / i, this.c.getY() / i, this.c.getZ() / i);
+            int j = 0;
+
+            VillageDoor villagedoor;
+
+            for (Iterator iterator = this.b.iterator(); iterator.hasNext(); j = Math.max(villagedoor.a(this.d), j)) {
+                villagedoor = (VillageDoor) iterator.next();
+            }
+
+            this.e = Math.max(32, (int) Math.sqrt((double) j) + 1);
+        }
+    }
+
+    public int a(String s) {
+        Integer integer = (Integer) this.j.get(s);
+
+        return integer != null ? integer.intValue() : 0;
+    }
+
+    public int a(String s, int i) {
+        int j = this.a(s);
+        int k = MathHelper.clamp(j + i, -30, 10);
+
+        this.j.put(s, Integer.valueOf(k));
+        return k;
+    }
+
+    public boolean d(String s) {
+        return this.a(s) <= -15;
+    }
+
+    public void a(NBTTagCompound nbttagcompound) {
+        this.h = nbttagcompound.getInt("PopSize");
+        this.e = nbttagcompound.getInt("Radius");
+        this.l = nbttagcompound.getInt("Golems");
+        this.f = nbttagcompound.getInt("Stable");
+        this.g = nbttagcompound.getInt("Tick");
+        this.i = nbttagcompound.getInt("MTick");
+        this.d = new BlockPosition(nbttagcompound.getInt("CX"), nbttagcompound.getInt("CY"), nbttagcompound.getInt("CZ"));
+        this.c = new BlockPosition(nbttagcompound.getInt("ACX"), nbttagcompound.getInt("ACY"), nbttagcompound.getInt("ACZ"));
+        NBTTagList nbttaglist = nbttagcompound.getList("Doors", 10);
+
+        for (int i = 0; i < nbttaglist.size(); ++i) {
+            NBTTagCompound nbttagcompound1 = nbttaglist.get(i);
+            VillageDoor villagedoor = new VillageDoor(new BlockPosition(nbttagcompound1.getInt("X"), nbttagcompound1.getInt("Y"), nbttagcompound1.getInt("Z")), nbttagcompound1.getInt("IDX"), nbttagcompound1.getInt("IDZ"), nbttagcompound1.getInt("TS"));
+
+            this.b.add(villagedoor);
+        }
+
+        NBTTagList nbttaglist1 = nbttagcompound.getList("Players", 10);
+
+        for (int j = 0; j < nbttaglist1.size(); ++j) {
+            NBTTagCompound nbttagcompound2 = nbttaglist1.get(j);
+
+            if (nbttagcompound2.hasKey("UUID")) {
+                UserCache usercache = MinecraftServer.getServer().getUserCache(); // Paper - Bandaid for world being null
+                GameProfile gameprofile = usercache.a(UUID.fromString(nbttagcompound2.getString("UUID")));
+
+                if (gameprofile != null) {
+                    this.j.put(gameprofile.getName(), Integer.valueOf(nbttagcompound2.getInt("S")));
+                }
+            } else {
+                this.j.put(nbttagcompound2.getString("Name"), Integer.valueOf(nbttagcompound2.getInt("S")));
+            }
+        }
+
+    }
+
+    public void b(NBTTagCompound nbttagcompound) {
+        nbttagcompound.setInt("PopSize", this.h);
+        nbttagcompound.setInt("Radius", this.e);
+        nbttagcompound.setInt("Golems", this.l);
+        nbttagcompound.setInt("Stable", this.f);
+        nbttagcompound.setInt("Tick", this.g);
+        nbttagcompound.setInt("MTick", this.i);
+        nbttagcompound.setInt("CX", this.d.getX());
+        nbttagcompound.setInt("CY", this.d.getY());
+        nbttagcompound.setInt("CZ", this.d.getZ());
+        nbttagcompound.setInt("ACX", this.c.getX());
+        nbttagcompound.setInt("ACY", this.c.getY());
+        nbttagcompound.setInt("ACZ", this.c.getZ());
+        NBTTagList nbttaglist = new NBTTagList();
+        Iterator iterator = this.b.iterator();
+
+        while (iterator.hasNext()) {
+            VillageDoor villagedoor = (VillageDoor) iterator.next();
+            NBTTagCompound nbttagcompound1 = new NBTTagCompound();
+
+            nbttagcompound1.setInt("X", villagedoor.d().getX());
+            nbttagcompound1.setInt("Y", villagedoor.d().getY());
+            nbttagcompound1.setInt("Z", villagedoor.d().getZ());
+            nbttagcompound1.setInt("IDX", villagedoor.f());
+            nbttagcompound1.setInt("IDZ", villagedoor.g());
+            nbttagcompound1.setInt("TS", villagedoor.h());
+            nbttaglist.add(nbttagcompound1);
+        }
+
+        nbttagcompound.set("Doors", nbttaglist);
+        NBTTagList nbttaglist1 = new NBTTagList();
+        Iterator iterator1 = this.j.keySet().iterator();
+
+        while (iterator1.hasNext()) {
+            String s = (String) iterator1.next();
+            NBTTagCompound nbttagcompound2 = new NBTTagCompound();
+            UserCache usercache = this.a.getMinecraftServer().getUserCache();
+            GameProfile gameprofile = usercache.getProfile(s);
+
+            if (gameprofile != null) {
+                nbttagcompound2.setString("UUID", gameprofile.getId().toString());
+                nbttagcompound2.setInt("S", ((Integer) this.j.get(s)).intValue());
+                nbttaglist1.add(nbttagcompound2);
+            }
+        }
+
+        nbttagcompound.set("Players", nbttaglist1);
+    }
+
+    public void h() {
+        this.i = this.g;
+    }
+
+    public boolean i() {
+        return this.i == 0 || this.g - this.i >= 3600;
+    }
+
+    public void b(int i) {
+        Iterator iterator = this.j.keySet().iterator();
+
+        while (iterator.hasNext()) {
+            String s = (String) iterator.next();
+
+            this.a(s, i);
+        }
+
+    }
+
+    class Aggressor {
+
+        public EntityLiving a;
+        public int b;
+
+        Aggressor(EntityLiving entityliving, int i) {
+            this.a = entityliving;
+            this.b = i;
+        }
+    }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftTeam.java b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftTeam.java
index b0f7e45..85916e0 100644
--- a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftTeam.java
+++ b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftTeam.java
@@ -210,11 +210,11 @@ final class CraftTeam extends CraftScoreboardComponent implements Team {
 
 		switch (option) {
 		case NAME_TAG_VISIBILITY:
-			return OptionStatus.values()[team.getNameTagVisibility().ordinal()];
+			return bukkitVisibility(team.getNameTagVisibility());
 		case DEATH_MESSAGE_VISIBILITY:
-			return OptionStatus.values()[team.getDeathMessageVisibility().ordinal()];
+			return bukkitVisibility(team.getDeathMessageVisibility());
 		case COLLISION_RULE:
-			return OptionStatus.values()[team.getCollisionRule().ordinal()];
+			return bukkitCollision(team.getCollisionRule());
 		default:
 			throw new IllegalArgumentException("Unrecognised option " + option);
 		}
@@ -226,18 +226,63 @@ final class CraftTeam extends CraftScoreboardComponent implements Team {
 
 		switch (option) {
 		case NAME_TAG_VISIBILITY:
-			team.setNameTagVisibility(EnumNameTagVisibility.values()[status.ordinal()]);
+			team.setNameTagVisibility(mojangVisibility(status));
 			break;
 		case DEATH_MESSAGE_VISIBILITY:
-			team.setDeathMessageVisibility(EnumNameTagVisibility.values()[status.ordinal()]);
+			team.setDeathMessageVisibility(mojangVisibility(status));
 			break;
 		case COLLISION_RULE:
-			team.setCollisionRule(ScoreboardTeamBase.EnumTeamPush.values()[status.ordinal()]);
+			team.setCollisionRule(mojangCollision(status));
 			break;
 		default:
 			throw new IllegalArgumentException("Unrecognised option " + option);
 		}
 	}
+	
+	public static EnumNameTagVisibility mojangVisibility(OptionStatus bukkit) {
+        switch(bukkit) {
+            case ALWAYS: return EnumNameTagVisibility.ALWAYS;
+            case NEVER: return EnumNameTagVisibility.NEVER;
+
+            // Order of these are flipped since the Mojang versions have negated meaning
+            case FOR_OWN_TEAM: return EnumNameTagVisibility.HIDE_FOR_OTHER_TEAMS;
+            case FOR_OTHER_TEAMS: return EnumNameTagVisibility.HIDE_FOR_OWN_TEAM;
+        }
+        throw new Error();
+    }
+
+    public static ScoreboardTeamBase.EnumTeamPush mojangCollision(OptionStatus bukkit) {
+        switch(bukkit) {
+            case ALWAYS: return ScoreboardTeamBase.EnumTeamPush.ALWAYS;
+            case NEVER: return ScoreboardTeamBase.EnumTeamPush.NEVER;
+
+            // These are NOT flipped since Mojang didn't use the negative here
+            // i.e. HIDE_FOR_OWN_TEAM is actually "pushOwnTeam".
+            case FOR_OWN_TEAM: return ScoreboardTeamBase.EnumTeamPush.HIDE_FOR_OWN_TEAM;
+            case FOR_OTHER_TEAMS: return ScoreboardTeamBase.EnumTeamPush.HIDE_FOR_OTHER_TEAMS;
+        }
+        throw new Error();
+    }
+
+    public static OptionStatus bukkitVisibility(EnumNameTagVisibility mojang) {
+        switch(mojang) {
+            case ALWAYS: return OptionStatus.ALWAYS;
+            case NEVER: return OptionStatus.NEVER;
+            case HIDE_FOR_OTHER_TEAMS: return OptionStatus.FOR_OWN_TEAM;
+            case HIDE_FOR_OWN_TEAM: return OptionStatus.FOR_OTHER_TEAMS;
+        }
+        throw new Error();
+    }
+
+    public static OptionStatus bukkitCollision(ScoreboardTeamBase.EnumTeamPush mojang) {
+        switch(mojang) {
+            case ALWAYS: return OptionStatus.ALWAYS;
+            case NEVER: return OptionStatus.NEVER;
+            case HIDE_FOR_OWN_TEAM: return OptionStatus.FOR_OWN_TEAM;
+            case HIDE_FOR_OTHER_TEAMS: return OptionStatus.FOR_OTHER_TEAMS;
+        }
+        throw new Error();
+    }
 
 	public static EnumNameTagVisibility bukkitToNotch(NameTagVisibility visibility) {
 		switch (visibility) {
-- 
2.8.2.windows.1

